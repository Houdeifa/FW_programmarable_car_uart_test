
UART_programmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004774  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080048fc  080048fc  000058fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004928  08004928  000061b0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004928  08004928  00005928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004930  08004930  000061b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004930  08004930  00005930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004934  08004934  00005934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b0  20000000  08004938  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000061b0  2**0
                  CONTENTS
 10 .bss          00000400  200001b0  200001b0  000061b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005b0  200005b0  000061b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000061b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dd35  00000000  00000000  000061e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002549  00000000  00000000  00013f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b20  00000000  00000000  00016460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000086e  00000000  00000000  00016f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021568  00000000  00000000  000177ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ea56  00000000  00000000  00038d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb195  00000000  00000000  000477ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00112941  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d84  00000000  00000000  00112984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00115708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001b0 	.word	0x200001b0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080048e4 	.word	0x080048e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001b4 	.word	0x200001b4
 80001c4:	080048e4 	.word	0x080048e4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <DIO_GPIO_CLK_ENABLE>:
		{.id = eID_LED3,.name = "LED3",.gpio=GPIOD,.pin = LD3_Pin,.mode = GPIO_MODE_OUTPUT_PP,.pull = GPIO_NOPULL,.speed = GPIO_SPEED_FREQ_LOW,.default_value = -1},
		{.id = eID_LED5,.name = "LED5",.gpio=GPIOD,.pin = LD5_Pin,.mode = GPIO_MODE_OUTPUT_PP,.pull = GPIO_NOPULL,.speed = GPIO_SPEED_FREQ_LOW,.default_value = -1},
		{.id = eID_LED6,.name = "LED6",.gpio=GPIOD,.pin = LD6_Pin,.mode = GPIO_MODE_OUTPUT_PP,.pull = GPIO_NOPULL,.speed = GPIO_SPEED_FREQ_LOW,.default_value = -1}
};

void DIO_GPIO_CLK_ENABLE(uint32_t sGPIO){
 80004f4:	b480      	push	{r7}
 80004f6:	b08b      	sub	sp, #44	@ 0x2c
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]

	switch(sGPIO){
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4a5f      	ldr	r2, [pc, #380]	@ (800067c <DIO_GPIO_CLK_ENABLE+0x188>)
 8000500:	4293      	cmp	r3, r2
 8000502:	f000 80a5 	beq.w	8000650 <DIO_GPIO_CLK_ENABLE+0x15c>
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4a5c      	ldr	r2, [pc, #368]	@ (800067c <DIO_GPIO_CLK_ENABLE+0x188>)
 800050a:	4293      	cmp	r3, r2
 800050c:	f200 80af 	bhi.w	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a5b      	ldr	r2, [pc, #364]	@ (8000680 <DIO_GPIO_CLK_ENABLE+0x18c>)
 8000514:	4293      	cmp	r3, r2
 8000516:	f000 808c 	beq.w	8000632 <DIO_GPIO_CLK_ENABLE+0x13e>
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4a58      	ldr	r2, [pc, #352]	@ (8000680 <DIO_GPIO_CLK_ENABLE+0x18c>)
 800051e:	4293      	cmp	r3, r2
 8000520:	f200 80a5 	bhi.w	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a57      	ldr	r2, [pc, #348]	@ (8000684 <DIO_GPIO_CLK_ENABLE+0x190>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d073      	beq.n	8000614 <DIO_GPIO_CLK_ENABLE+0x120>
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4a55      	ldr	r2, [pc, #340]	@ (8000684 <DIO_GPIO_CLK_ENABLE+0x190>)
 8000530:	4293      	cmp	r3, r2
 8000532:	f200 809c 	bhi.w	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4a53      	ldr	r2, [pc, #332]	@ (8000688 <DIO_GPIO_CLK_ENABLE+0x194>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d05b      	beq.n	80005f6 <DIO_GPIO_CLK_ENABLE+0x102>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a51      	ldr	r2, [pc, #324]	@ (8000688 <DIO_GPIO_CLK_ENABLE+0x194>)
 8000542:	4293      	cmp	r3, r2
 8000544:	f200 8093 	bhi.w	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4a50      	ldr	r2, [pc, #320]	@ (800068c <DIO_GPIO_CLK_ENABLE+0x198>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d043      	beq.n	80005d8 <DIO_GPIO_CLK_ENABLE+0xe4>
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a4e      	ldr	r2, [pc, #312]	@ (800068c <DIO_GPIO_CLK_ENABLE+0x198>)
 8000554:	4293      	cmp	r3, r2
 8000556:	f200 808a 	bhi.w	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4a4c      	ldr	r2, [pc, #304]	@ (8000690 <DIO_GPIO_CLK_ENABLE+0x19c>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d02b      	beq.n	80005ba <DIO_GPIO_CLK_ENABLE+0xc6>
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4a4a      	ldr	r2, [pc, #296]	@ (8000690 <DIO_GPIO_CLK_ENABLE+0x19c>)
 8000566:	4293      	cmp	r3, r2
 8000568:	f200 8081 	bhi.w	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4a49      	ldr	r2, [pc, #292]	@ (8000694 <DIO_GPIO_CLK_ENABLE+0x1a0>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d004      	beq.n	800057e <DIO_GPIO_CLK_ENABLE+0x8a>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4a48      	ldr	r2, [pc, #288]	@ (8000698 <DIO_GPIO_CLK_ENABLE+0x1a4>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d00f      	beq.n	800059c <DIO_GPIO_CLK_ENABLE+0xa8>
		break;
	case (uint32_t)GPIOH:
		  __HAL_RCC_GPIOH_CLK_ENABLE();
		break;
	}
}
 800057c:	e077      	b.n	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	627b      	str	r3, [r7, #36]	@ 0x24
 8000582:	4b46      	ldr	r3, [pc, #280]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	4a45      	ldr	r2, [pc, #276]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6313      	str	r3, [r2, #48]	@ 0x30
 800058e:	4b43      	ldr	r3, [pc, #268]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	627b      	str	r3, [r7, #36]	@ 0x24
 8000598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
		break;
 800059a:	e068      	b.n	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	623b      	str	r3, [r7, #32]
 80005a0:	4b3e      	ldr	r3, [pc, #248]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 80005a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a4:	4a3d      	ldr	r2, [pc, #244]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 80005a6:	f043 0302 	orr.w	r3, r3, #2
 80005aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ac:	4b3b      	ldr	r3, [pc, #236]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 80005ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b0:	f003 0302 	and.w	r3, r3, #2
 80005b4:	623b      	str	r3, [r7, #32]
 80005b6:	6a3b      	ldr	r3, [r7, #32]
		break;
 80005b8:	e059      	b.n	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
 80005be:	4b37      	ldr	r3, [pc, #220]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	4a36      	ldr	r2, [pc, #216]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ca:	4b34      	ldr	r3, [pc, #208]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	f003 0304 	and.w	r3, r3, #4
 80005d2:	61fb      	str	r3, [r7, #28]
 80005d4:	69fb      	ldr	r3, [r7, #28]
		break;
 80005d6:	e04a      	b.n	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	61bb      	str	r3, [r7, #24]
 80005dc:	4b2f      	ldr	r3, [pc, #188]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e0:	4a2e      	ldr	r2, [pc, #184]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 80005e2:	f043 0308 	orr.w	r3, r3, #8
 80005e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e8:	4b2c      	ldr	r3, [pc, #176]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 80005ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ec:	f003 0308 	and.w	r3, r3, #8
 80005f0:	61bb      	str	r3, [r7, #24]
 80005f2:	69bb      	ldr	r3, [r7, #24]
		break;
 80005f4:	e03b      	b.n	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	4b28      	ldr	r3, [pc, #160]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	4a27      	ldr	r2, [pc, #156]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000600:	f043 0310 	orr.w	r3, r3, #16
 8000604:	6313      	str	r3, [r2, #48]	@ 0x30
 8000606:	4b25      	ldr	r3, [pc, #148]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	f003 0310 	and.w	r3, r3, #16
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	697b      	ldr	r3, [r7, #20]
		break;
 8000612:	e02c      	b.n	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	4b20      	ldr	r3, [pc, #128]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061c:	4a1f      	ldr	r2, [pc, #124]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 800061e:	f043 0320 	orr.w	r3, r3, #32
 8000622:	6313      	str	r3, [r2, #48]	@ 0x30
 8000624:	4b1d      	ldr	r3, [pc, #116]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000628:	f003 0320 	and.w	r3, r3, #32
 800062c:	613b      	str	r3, [r7, #16]
 800062e:	693b      	ldr	r3, [r7, #16]
		break;
 8000630:	e01d      	b.n	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	4b19      	ldr	r3, [pc, #100]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	4a18      	ldr	r2, [pc, #96]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 800063c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000640:	6313      	str	r3, [r2, #48]	@ 0x30
 8000642:	4b16      	ldr	r3, [pc, #88]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
		break;
 800064e:	e00e      	b.n	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b11      	ldr	r3, [pc, #68]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000658:	4a10      	ldr	r2, [pc, #64]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 800065a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800065e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000660:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
		break;
 800066c:	bf00      	nop
}
 800066e:	bf00      	nop
 8000670:	372c      	adds	r7, #44	@ 0x2c
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40021c00 	.word	0x40021c00
 8000680:	40021800 	.word	0x40021800
 8000684:	40021400 	.word	0x40021400
 8000688:	40021000 	.word	0x40021000
 800068c:	40020c00 	.word	0x40020c00
 8000690:	40020800 	.word	0x40020800
 8000694:	40020000 	.word	0x40020000
 8000698:	40020400 	.word	0x40020400
 800069c:	40023800 	.word	0x40023800

080006a0 <DIO_Init>:

bool DIO_Init(void){
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b087      	sub	sp, #28
 80006a4:	af00      	add	r7, sp, #0
	for(int i = 0;i < eID_DIO_MAX ;i++){
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
 80006aa:	e079      	b.n	80007a0 <DIO_Init+0x100>
		  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	463b      	mov	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]
		  GPIO_InitStruct.Pin = sDIOTable[i].pin;
 80006ba:	4a3d      	ldr	r2, [pc, #244]	@ (80007b0 <DIO_Init+0x110>)
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	2134      	movs	r1, #52	@ 0x34
 80006c0:	fb01 f303 	mul.w	r3, r1, r3
 80006c4:	4413      	add	r3, r2
 80006c6:	331c      	adds	r3, #28
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	603b      	str	r3, [r7, #0]
		  GPIO_InitStruct.Mode = sDIOTable[i].mode;
 80006cc:	4a38      	ldr	r2, [pc, #224]	@ (80007b0 <DIO_Init+0x110>)
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	2134      	movs	r1, #52	@ 0x34
 80006d2:	fb01 f303 	mul.w	r3, r1, r3
 80006d6:	4413      	add	r3, r2
 80006d8:	3320      	adds	r3, #32
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	607b      	str	r3, [r7, #4]
		  GPIO_InitStruct.Pull = sDIOTable[i].pull;
 80006de:	4a34      	ldr	r2, [pc, #208]	@ (80007b0 <DIO_Init+0x110>)
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	2134      	movs	r1, #52	@ 0x34
 80006e4:	fb01 f303 	mul.w	r3, r1, r3
 80006e8:	4413      	add	r3, r2
 80006ea:	3324      	adds	r3, #36	@ 0x24
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStruct.Alternate = sDIOTable[i].alternate;
 80006f0:	4a2f      	ldr	r2, [pc, #188]	@ (80007b0 <DIO_Init+0x110>)
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	2134      	movs	r1, #52	@ 0x34
 80006f6:	fb01 f303 	mul.w	r3, r1, r3
 80006fa:	4413      	add	r3, r2
 80006fc:	332c      	adds	r3, #44	@ 0x2c
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	613b      	str	r3, [r7, #16]
		  GPIO_InitStruct.Speed = sDIOTable[i].speed;
 8000702:	4a2b      	ldr	r2, [pc, #172]	@ (80007b0 <DIO_Init+0x110>)
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	2134      	movs	r1, #52	@ 0x34
 8000708:	fb01 f303 	mul.w	r3, r1, r3
 800070c:	4413      	add	r3, r2
 800070e:	3328      	adds	r3, #40	@ 0x28
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	60fb      	str	r3, [r7, #12]

		  DIO_GPIO_CLK_ENABLE(sDIOTable[i].gpio);
 8000714:	4a26      	ldr	r2, [pc, #152]	@ (80007b0 <DIO_Init+0x110>)
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	2134      	movs	r1, #52	@ 0x34
 800071a:	fb01 f303 	mul.w	r3, r1, r3
 800071e:	4413      	add	r3, r2
 8000720:	3318      	adds	r3, #24
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff fee5 	bl	80004f4 <DIO_GPIO_CLK_ENABLE>

		  HAL_GPIO_Init(sDIOTable[i].gpio, &GPIO_InitStruct);
 800072a:	4a21      	ldr	r2, [pc, #132]	@ (80007b0 <DIO_Init+0x110>)
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	2134      	movs	r1, #52	@ 0x34
 8000730:	fb01 f303 	mul.w	r3, r1, r3
 8000734:	4413      	add	r3, r2
 8000736:	3318      	adds	r3, #24
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	461a      	mov	r2, r3
 800073c:	463b      	mov	r3, r7
 800073e:	4619      	mov	r1, r3
 8000740:	4610      	mov	r0, r2
 8000742:	f000 fc31 	bl	8000fa8 <HAL_GPIO_Init>
		  if(sDIOTable[i].default_value != -1)
 8000746:	4a1a      	ldr	r2, [pc, #104]	@ (80007b0 <DIO_Init+0x110>)
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	2134      	movs	r1, #52	@ 0x34
 800074c:	fb01 f303 	mul.w	r3, r1, r3
 8000750:	4413      	add	r3, r2
 8000752:	3330      	adds	r3, #48	@ 0x30
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800075a:	d01e      	beq.n	800079a <DIO_Init+0xfa>
			  HAL_GPIO_WritePin(sDIOTable[i].gpio, sDIOTable[i].pin, sDIOTable[i].default_value);
 800075c:	4a14      	ldr	r2, [pc, #80]	@ (80007b0 <DIO_Init+0x110>)
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	2134      	movs	r1, #52	@ 0x34
 8000762:	fb01 f303 	mul.w	r3, r1, r3
 8000766:	4413      	add	r3, r2
 8000768:	3318      	adds	r3, #24
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	461c      	mov	r4, r3
 800076e:	4a10      	ldr	r2, [pc, #64]	@ (80007b0 <DIO_Init+0x110>)
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	2134      	movs	r1, #52	@ 0x34
 8000774:	fb01 f303 	mul.w	r3, r1, r3
 8000778:	4413      	add	r3, r2
 800077a:	331c      	adds	r3, #28
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	b299      	uxth	r1, r3
 8000780:	4a0b      	ldr	r2, [pc, #44]	@ (80007b0 <DIO_Init+0x110>)
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	2034      	movs	r0, #52	@ 0x34
 8000786:	fb00 f303 	mul.w	r3, r0, r3
 800078a:	4413      	add	r3, r2
 800078c:	3330      	adds	r3, #48	@ 0x30
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	b2db      	uxtb	r3, r3
 8000792:	461a      	mov	r2, r3
 8000794:	4620      	mov	r0, r4
 8000796:	f000 fdbb 	bl	8001310 <HAL_GPIO_WritePin>
	for(int i = 0;i < eID_DIO_MAX ;i++){
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	3301      	adds	r3, #1
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	2b05      	cmp	r3, #5
 80007a4:	dd82      	ble.n	80006ac <DIO_Init+0xc>
	}
}
 80007a6:	bf00      	nop
 80007a8:	4618      	mov	r0, r3
 80007aa:	371c      	adds	r7, #28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd90      	pop	{r4, r7, pc}
 80007b0:	20000000 	.word	0x20000000

080007b4 <DI_Read>:
bool DI_Read(eDIO_ID input_index){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
	if(input_index > eID_DIO_MAX) return false;
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b06      	cmp	r3, #6
 80007c2:	d901      	bls.n	80007c8 <DI_Read+0x14>
 80007c4:	2300      	movs	r3, #0
 80007c6:	e01a      	b.n	80007fe <DI_Read+0x4a>
	return (HAL_GPIO_ReadPin(sDIOTable[input_index].gpio ,sDIOTable[input_index].pin ) == GPIO_PIN_SET);
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000808 <DI_Read+0x54>)
 80007cc:	2134      	movs	r1, #52	@ 0x34
 80007ce:	fb01 f303 	mul.w	r3, r1, r3
 80007d2:	4413      	add	r3, r2
 80007d4:	3318      	adds	r3, #24
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4618      	mov	r0, r3
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000808 <DI_Read+0x54>)
 80007de:	2134      	movs	r1, #52	@ 0x34
 80007e0:	fb01 f303 	mul.w	r3, r1, r3
 80007e4:	4413      	add	r3, r2
 80007e6:	331c      	adds	r3, #28
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	4619      	mov	r1, r3
 80007ee:	f000 fd77 	bl	80012e0 <HAL_GPIO_ReadPin>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	bf0c      	ite	eq
 80007f8:	2301      	moveq	r3, #1
 80007fa:	2300      	movne	r3, #0
 80007fc:	b2db      	uxtb	r3, r3
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000000 	.word	0x20000000

0800080c <DO_Write>:

bool DO_Write(eDIO_ID output_index,uint32_t value){
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	6039      	str	r1, [r7, #0]
 8000816:	71fb      	strb	r3, [r7, #7]

	if(output_index > eID_DIO_MAX) return false;
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	2b06      	cmp	r3, #6
 800081c:	d901      	bls.n	8000822 <DO_Write+0x16>
 800081e:	2300      	movs	r3, #0
 8000820:	e016      	b.n	8000850 <DO_Write+0x44>
	  HAL_GPIO_WritePin(sDIOTable[output_index].gpio , sDIOTable[output_index].pin , value);
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	4a0c      	ldr	r2, [pc, #48]	@ (8000858 <DO_Write+0x4c>)
 8000826:	2134      	movs	r1, #52	@ 0x34
 8000828:	fb01 f303 	mul.w	r3, r1, r3
 800082c:	4413      	add	r3, r2
 800082e:	3318      	adds	r3, #24
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4618      	mov	r0, r3
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	4a08      	ldr	r2, [pc, #32]	@ (8000858 <DO_Write+0x4c>)
 8000838:	2134      	movs	r1, #52	@ 0x34
 800083a:	fb01 f303 	mul.w	r3, r1, r3
 800083e:	4413      	add	r3, r2
 8000840:	331c      	adds	r3, #28
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	b29b      	uxth	r3, r3
 8000846:	683a      	ldr	r2, [r7, #0]
 8000848:	b2d2      	uxtb	r2, r2
 800084a:	4619      	mov	r1, r3
 800084c:	f000 fd60 	bl	8001310 <HAL_GPIO_WritePin>
}
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000000 	.word	0x20000000

0800085c <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	DIO_Init();
 8000860:	f7ff ff1e 	bl	80006a0 <DIO_Init>

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b087      	sub	sp, #28
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

    bool data_sent = false;
 800086e:	2300      	movs	r3, #0
 8000870:	75fb      	strb	r3, [r7, #23]
    char data[20] = "hello world\n\r";
 8000872:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <main+0x74>)
 8000874:	463c      	mov	r4, r7
 8000876:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000878:	c407      	stmia	r4!, {r0, r1, r2}
 800087a:	8023      	strh	r3, [r4, #0]
 800087c:	f107 030e 	add.w	r3, r7, #14
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	809a      	strh	r2, [r3, #4]
    char cntr = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	75bb      	strb	r3, [r7, #22]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088a:	f000 fa35 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088e:	f000 f827 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000892:	f7ff ffe3 	bl	800085c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000896:	f000 f9af 	bl	8000bf8 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(DI_Read(eID_btn_blue)){
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff ff8a 	bl	80007b4 <DI_Read>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d012      	beq.n	80008cc <main+0x64>
    	DO_Write(eID_LED4,GPIO_PIN_SET);
 80008a6:	2101      	movs	r1, #1
 80008a8:	2002      	movs	r0, #2
 80008aa:	f7ff ffaf 	bl	800080c <DO_Write>
  	  if(data_sent == false){
 80008ae:	7dfb      	ldrb	r3, [r7, #23]
 80008b0:	f083 0301 	eor.w	r3, r3, #1
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d0ef      	beq.n	800089a <main+0x32>
  		UART_Send(eID_UART2,data,20);
 80008ba:	463b      	mov	r3, r7
 80008bc:	2214      	movs	r2, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	2000      	movs	r0, #0
 80008c2:	f000 f973 	bl	8000bac <UART_Send>
  	  	data_sent = true;
 80008c6:	2301      	movs	r3, #1
 80008c8:	75fb      	strb	r3, [r7, #23]
 80008ca:	e7e6      	b.n	800089a <main+0x32>
  	  }

    }
    else{
    	DO_Write(eID_LED4,GPIO_PIN_RESET);
 80008cc:	2100      	movs	r1, #0
 80008ce:	2002      	movs	r0, #2
 80008d0:	f7ff ff9c 	bl	800080c <DO_Write>
    	data_sent = false;
 80008d4:	2300      	movs	r3, #0
 80008d6:	75fb      	strb	r3, [r7, #23]
    if(DI_Read(eID_btn_blue)){
 80008d8:	e7df      	b.n	800089a <main+0x32>
 80008da:	bf00      	nop
 80008dc:	080048fc 	.word	0x080048fc

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b094      	sub	sp, #80	@ 0x50
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0320 	add.w	r3, r7, #32
 80008ea:	2230      	movs	r2, #48	@ 0x30
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f003 ffcc 	bl	800488c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	4b28      	ldr	r3, [pc, #160]	@ (80009ac <SystemClock_Config+0xcc>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090c:	4a27      	ldr	r2, [pc, #156]	@ (80009ac <SystemClock_Config+0xcc>)
 800090e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000912:	6413      	str	r3, [r2, #64]	@ 0x40
 8000914:	4b25      	ldr	r3, [pc, #148]	@ (80009ac <SystemClock_Config+0xcc>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000920:	2300      	movs	r3, #0
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	4b22      	ldr	r3, [pc, #136]	@ (80009b0 <SystemClock_Config+0xd0>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a21      	ldr	r2, [pc, #132]	@ (80009b0 <SystemClock_Config+0xd0>)
 800092a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800092e:	6013      	str	r3, [r2, #0]
 8000930:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <SystemClock_Config+0xd0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800093c:	2301      	movs	r3, #1
 800093e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000940:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000946:	2302      	movs	r3, #2
 8000948:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800094a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800094e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000950:	2308      	movs	r3, #8
 8000952:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000954:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000958:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800095a:	2302      	movs	r3, #2
 800095c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800095e:	2307      	movs	r3, #7
 8000960:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000962:	f107 0320 	add.w	r3, r7, #32
 8000966:	4618      	mov	r0, r3
 8000968:	f002 fa92 	bl	8002e90 <HAL_RCC_OscConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000972:	f000 f81f 	bl	80009b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000976:	230f      	movs	r3, #15
 8000978:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097a:	2302      	movs	r3, #2
 800097c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000982:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000986:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000988:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800098c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800098e:	f107 030c 	add.w	r3, r7, #12
 8000992:	2105      	movs	r1, #5
 8000994:	4618      	mov	r0, r3
 8000996:	f002 fcf3 	bl	8003380 <HAL_RCC_ClockConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009a0:	f000 f808 	bl	80009b4 <Error_Handler>
  }
}
 80009a4:	bf00      	nop
 80009a6:	3750      	adds	r7, #80	@ 0x50
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40007000 	.word	0x40007000

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <Error_Handler+0x8>

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ce:	4a0f      	ldr	r2, [pc, #60]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009d6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ea:	4a08      	ldr	r2, [pc, #32]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009fe:	2007      	movs	r0, #7
 8000a00:	f000 fa9e 	bl	8000f40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <NMI_Handler+0x4>

08000a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <MemManage_Handler+0x4>

08000a28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a66:	f000 f999 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000a74:	4802      	ldr	r0, [pc, #8]	@ (8000a80 <OTG_FS_IRQHandler+0x10>)
 8000a76:	f000 fc64 	bl	8001342 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200001d0 	.word	0x200001d0

08000a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a88:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <SystemInit+0x20>)
 8000a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a8e:	4a05      	ldr	r2, [pc, #20]	@ (8000aa4 <SystemInit+0x20>)
 8000a90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <UART_Init>:

static tUART_Infos sUARTTable[] = {
		{.id = eID_UART2,.name = "UART2",.instance=USART2,.baud_rate = 115200,.oversimpling = UART_OVERSAMPLING_16}
};

bool UART_Init(void){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0

	for(int i = 0;i < eID_UART_MAX ;i++){
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	e070      	b.n	8000b96 <UART_Init+0xee>

		  sUARTTable[i].handle.Instance = sUARTTable[i].instance;
 8000ab4:	4a3c      	ldr	r2, [pc, #240]	@ (8000ba8 <UART_Init+0x100>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	216c      	movs	r1, #108	@ 0x6c
 8000aba:	fb01 f303 	mul.w	r3, r1, r3
 8000abe:	4413      	add	r3, r2
 8000ac0:	3318      	adds	r3, #24
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	4a38      	ldr	r2, [pc, #224]	@ (8000ba8 <UART_Init+0x100>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	216c      	movs	r1, #108	@ 0x6c
 8000acc:	fb01 f303 	mul.w	r3, r1, r3
 8000ad0:	4413      	add	r3, r2
 8000ad2:	3324      	adds	r3, #36	@ 0x24
 8000ad4:	6018      	str	r0, [r3, #0]
		  sUARTTable[i].handle.Init.BaudRate =  sUARTTable[i].baud_rate;
 8000ad6:	4a34      	ldr	r2, [pc, #208]	@ (8000ba8 <UART_Init+0x100>)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	216c      	movs	r1, #108	@ 0x6c
 8000adc:	fb01 f303 	mul.w	r3, r1, r3
 8000ae0:	4413      	add	r3, r2
 8000ae2:	331c      	adds	r3, #28
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	4930      	ldr	r1, [pc, #192]	@ (8000ba8 <UART_Init+0x100>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	206c      	movs	r0, #108	@ 0x6c
 8000aec:	fb00 f303 	mul.w	r3, r0, r3
 8000af0:	440b      	add	r3, r1
 8000af2:	3328      	adds	r3, #40	@ 0x28
 8000af4:	601a      	str	r2, [r3, #0]
		  sUARTTable[i].handle.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4a2c      	ldr	r2, [pc, #176]	@ (8000ba8 <UART_Init+0x100>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	216c      	movs	r1, #108	@ 0x6c
 8000afc:	fb01 f303 	mul.w	r3, r1, r3
 8000b00:	4413      	add	r3, r2
 8000b02:	332c      	adds	r3, #44	@ 0x2c
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
		  sUARTTable[i].handle.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4a27      	ldr	r2, [pc, #156]	@ (8000ba8 <UART_Init+0x100>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	216c      	movs	r1, #108	@ 0x6c
 8000b0e:	fb01 f303 	mul.w	r3, r1, r3
 8000b12:	4413      	add	r3, r2
 8000b14:	3330      	adds	r3, #48	@ 0x30
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
		  sUARTTable[i].handle.Init.Parity = UART_PARITY_NONE;
 8000b1a:	4a23      	ldr	r2, [pc, #140]	@ (8000ba8 <UART_Init+0x100>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	216c      	movs	r1, #108	@ 0x6c
 8000b20:	fb01 f303 	mul.w	r3, r1, r3
 8000b24:	4413      	add	r3, r2
 8000b26:	3334      	adds	r3, #52	@ 0x34
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
		  sUARTTable[i].handle.Init.Mode = UART_MODE_TX_RX;
 8000b2c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ba8 <UART_Init+0x100>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	216c      	movs	r1, #108	@ 0x6c
 8000b32:	fb01 f303 	mul.w	r3, r1, r3
 8000b36:	4413      	add	r3, r2
 8000b38:	3338      	adds	r3, #56	@ 0x38
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	601a      	str	r2, [r3, #0]
		  sUARTTable[i].handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ba8 <UART_Init+0x100>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	216c      	movs	r1, #108	@ 0x6c
 8000b44:	fb01 f303 	mul.w	r3, r1, r3
 8000b48:	4413      	add	r3, r2
 8000b4a:	333c      	adds	r3, #60	@ 0x3c
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
		  sUARTTable[i].handle.Init.OverSampling =  sUARTTable[i].oversimpling;
 8000b50:	4a15      	ldr	r2, [pc, #84]	@ (8000ba8 <UART_Init+0x100>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	216c      	movs	r1, #108	@ 0x6c
 8000b56:	fb01 f303 	mul.w	r3, r1, r3
 8000b5a:	4413      	add	r3, r2
 8000b5c:	3320      	adds	r3, #32
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4911      	ldr	r1, [pc, #68]	@ (8000ba8 <UART_Init+0x100>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	206c      	movs	r0, #108	@ 0x6c
 8000b66:	fb00 f303 	mul.w	r3, r0, r3
 8000b6a:	440b      	add	r3, r1
 8000b6c:	3340      	adds	r3, #64	@ 0x40
 8000b6e:	601a      	str	r2, [r3, #0]
		  if (HAL_UART_Init(&sUARTTable[i].handle) != HAL_OK)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	226c      	movs	r2, #108	@ 0x6c
 8000b74:	fb02 f303 	mul.w	r3, r2, r3
 8000b78:	3320      	adds	r3, #32
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ba8 <UART_Init+0x100>)
 8000b7c:	4413      	add	r3, r2
 8000b7e:	3304      	adds	r3, #4
 8000b80:	4618      	mov	r0, r3
 8000b82:	f002 fe1d 	bl	80037c0 <HAL_UART_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <UART_Init+0xe8>
		  {
		    return false;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	e006      	b.n	8000b9e <UART_Init+0xf6>
	for(int i = 0;i < eID_UART_MAX ;i++){
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3301      	adds	r3, #1
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	dd8b      	ble.n	8000ab4 <UART_Init+0xc>
		  }
	}
	return true;
 8000b9c:	2301      	movs	r3, #1
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2000013c 	.word	0x2000013c

08000bac <UART_Send>:

bool UART_Send(eUART_ID id,char * data,uint32_t len){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
 8000bb8:	73fb      	strb	r3, [r7, #15]
	if(id > eID_UART_MAX) return false;
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d901      	bls.n	8000bc4 <UART_Send+0x18>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	e013      	b.n	8000bec <UART_Send+0x40>
	return (HAL_UART_Transmit(&sUARTTable[id].handle,data,len,UART_TIMEOUT) == HAL_OK);
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	226c      	movs	r2, #108	@ 0x6c
 8000bc8:	fb02 f303 	mul.w	r3, r2, r3
 8000bcc:	3320      	adds	r3, #32
 8000bce:	4a09      	ldr	r2, [pc, #36]	@ (8000bf4 <UART_Send+0x48>)
 8000bd0:	4413      	add	r3, r2
 8000bd2:	1d18      	adds	r0, r3, #4
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	2303      	movs	r3, #3
 8000bda:	68b9      	ldr	r1, [r7, #8]
 8000bdc:	f002 fe40 	bl	8003860 <HAL_UART_Transmit>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	bf0c      	ite	eq
 8000be6:	2301      	moveq	r3, #1
 8000be8:	2300      	movne	r3, #0
 8000bea:	b2db      	uxtb	r3, r3
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	2000013c 	.word	0x2000013c

08000bf8 <MX_USART2_UART_Init>:


/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
	if(UART_Init() == false){
 8000bfc:	f7ff ff54 	bl	8000aa8 <UART_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	f083 0301 	eor.w	r3, r3, #1
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_USART2_UART_Init+0x18>
		Error_Handler();
 8000c0c:	f7ff fed2 	bl	80009b4 <Error_Handler>
  /* USER CODE END USART2_Init 1 */
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	@ 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a19      	ldr	r2, [pc, #100]	@ (8000c98 <HAL_UART_MspInit+0x84>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d12b      	bne.n	8000c8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b18      	ldr	r3, [pc, #96]	@ (8000c9c <HAL_UART_MspInit+0x88>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3e:	4a17      	ldr	r2, [pc, #92]	@ (8000c9c <HAL_UART_MspInit+0x88>)
 8000c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c46:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <HAL_UART_MspInit+0x88>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <HAL_UART_MspInit+0x88>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a10      	ldr	r2, [pc, #64]	@ (8000c9c <HAL_UART_MspInit+0x88>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <HAL_UART_MspInit+0x88>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c6e:	230c      	movs	r3, #12
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c7e:	2307      	movs	r3, #7
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <HAL_UART_MspInit+0x8c>)
 8000c8a:	f000 f98d 	bl	8000fa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c8e:	bf00      	nop
 8000c90:	3728      	adds	r7, #40	@ 0x28
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40004400 	.word	0x40004400
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020000 	.word	0x40020000

08000ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cdc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ca8:	f7ff feec 	bl	8000a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cac:	480c      	ldr	r0, [pc, #48]	@ (8000ce0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cae:	490d      	ldr	r1, [pc, #52]	@ (8000ce4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000cf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f003 fde3 	bl	800489c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd6:	f7ff fdc7 	bl	8000868 <main>
  bx  lr    
 8000cda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 8000ce8:	08004938 	.word	0x08004938
  ldr r2, =_sbss
 8000cec:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8000cf0:	200005b0 	.word	0x200005b0

08000cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0d      	ldr	r2, [pc, #52]	@ (8000d38 <HAL_Init+0x40>)
 8000d02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d08:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d38 <HAL_Init+0x40>)
 8000d0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d14:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a07      	ldr	r2, [pc, #28]	@ (8000d38 <HAL_Init+0x40>)
 8000d1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 f90d 	bl	8000f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d26:	2000      	movs	r0, #0
 8000d28:	f000 f808 	bl	8000d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2c:	f7ff fe48 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023c00 	.word	0x40023c00

08000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d44:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <HAL_InitTick+0x54>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <HAL_InitTick+0x58>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 f917 	bl	8000f8e <HAL_SYSTICK_Config>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00e      	b.n	8000d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d80a      	bhi.n	8000d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f000 f8ed 	bl	8000f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d7c:	4a06      	ldr	r2, [pc, #24]	@ (8000d98 <HAL_InitTick+0x5c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e000      	b.n	8000d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000138 	.word	0x20000138
 8000d94:	200001ac 	.word	0x200001ac
 8000d98:	200001a8 	.word	0x200001a8

08000d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	@ (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	200001ac 	.word	0x200001ac
 8000dc0:	200001cc 	.word	0x200001cc

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	@ (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	200001cc 	.word	0x200001cc

08000ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dec:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <__NVIC_SetPriorityGrouping+0x44>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0e:	4a04      	ldr	r2, [pc, #16]	@ (8000e20 <__NVIC_SetPriorityGrouping+0x44>)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	60d3      	str	r3, [r2, #12]
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e28:	4b04      	ldr	r3, [pc, #16]	@ (8000e3c <__NVIC_GetPriorityGrouping+0x18>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	f003 0307 	and.w	r3, r3, #7
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	490c      	ldr	r1, [pc, #48]	@ (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4908      	ldr	r1, [pc, #32]	@ (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	@ 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
         );
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	@ 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f0c:	d301      	bcc.n	8000f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00f      	b.n	8000f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f12:	4a0a      	ldr	r2, [pc, #40]	@ (8000f3c <SysTick_Config+0x40>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f7ff ff8e 	bl	8000e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f24:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <SysTick_Config+0x40>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2a:	4b04      	ldr	r3, [pc, #16]	@ (8000f3c <SysTick_Config+0x40>)
 8000f2c:	2207      	movs	r2, #7
 8000f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	e000e010 	.word	0xe000e010

08000f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff47 	bl	8000ddc <__NVIC_SetPriorityGrouping>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f68:	f7ff ff5c 	bl	8000e24 <__NVIC_GetPriorityGrouping>
 8000f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	6978      	ldr	r0, [r7, #20]
 8000f74:	f7ff ff8e 	bl	8000e94 <NVIC_EncodePriority>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff5d 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f86:	bf00      	nop
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ffb0 	bl	8000efc <SysTick_Config>
 8000f9c:	4603      	mov	r3, r0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	@ 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
 8000fc2:	e16b      	b.n	800129c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	f040 815a 	bne.w	8001296 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d005      	beq.n	8000ffa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d130      	bne.n	800105c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	2203      	movs	r2, #3
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001030:	2201      	movs	r2, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	091b      	lsrs	r3, r3, #4
 8001046:	f003 0201 	and.w	r2, r3, #1
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b03      	cmp	r3, #3
 8001066:	d017      	beq.n	8001098 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d123      	bne.n	80010ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	08da      	lsrs	r2, r3, #3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3208      	adds	r2, #8
 80010ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	f003 0307 	and.w	r3, r3, #7
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	220f      	movs	r2, #15
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	691a      	ldr	r2, [r3, #16]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	08da      	lsrs	r2, r3, #3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3208      	adds	r2, #8
 80010e6:	69b9      	ldr	r1, [r7, #24]
 80010e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	2203      	movs	r2, #3
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0203 	and.w	r2, r3, #3
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 80b4 	beq.w	8001296 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b60      	ldr	r3, [pc, #384]	@ (80012b4 <HAL_GPIO_Init+0x30c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	4a5f      	ldr	r2, [pc, #380]	@ (80012b4 <HAL_GPIO_Init+0x30c>)
 8001138:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800113c:	6453      	str	r3, [r2, #68]	@ 0x44
 800113e:	4b5d      	ldr	r3, [pc, #372]	@ (80012b4 <HAL_GPIO_Init+0x30c>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800114a:	4a5b      	ldr	r2, [pc, #364]	@ (80012b8 <HAL_GPIO_Init+0x310>)
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	3302      	adds	r3, #2
 8001152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	220f      	movs	r2, #15
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a52      	ldr	r2, [pc, #328]	@ (80012bc <HAL_GPIO_Init+0x314>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d02b      	beq.n	80011ce <HAL_GPIO_Init+0x226>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a51      	ldr	r2, [pc, #324]	@ (80012c0 <HAL_GPIO_Init+0x318>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d025      	beq.n	80011ca <HAL_GPIO_Init+0x222>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a50      	ldr	r2, [pc, #320]	@ (80012c4 <HAL_GPIO_Init+0x31c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d01f      	beq.n	80011c6 <HAL_GPIO_Init+0x21e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4f      	ldr	r2, [pc, #316]	@ (80012c8 <HAL_GPIO_Init+0x320>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d019      	beq.n	80011c2 <HAL_GPIO_Init+0x21a>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4e      	ldr	r2, [pc, #312]	@ (80012cc <HAL_GPIO_Init+0x324>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d013      	beq.n	80011be <HAL_GPIO_Init+0x216>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4d      	ldr	r2, [pc, #308]	@ (80012d0 <HAL_GPIO_Init+0x328>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d00d      	beq.n	80011ba <HAL_GPIO_Init+0x212>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4c      	ldr	r2, [pc, #304]	@ (80012d4 <HAL_GPIO_Init+0x32c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d007      	beq.n	80011b6 <HAL_GPIO_Init+0x20e>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4b      	ldr	r2, [pc, #300]	@ (80012d8 <HAL_GPIO_Init+0x330>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d101      	bne.n	80011b2 <HAL_GPIO_Init+0x20a>
 80011ae:	2307      	movs	r3, #7
 80011b0:	e00e      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011b2:	2308      	movs	r3, #8
 80011b4:	e00c      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011b6:	2306      	movs	r3, #6
 80011b8:	e00a      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011ba:	2305      	movs	r3, #5
 80011bc:	e008      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011be:	2304      	movs	r3, #4
 80011c0:	e006      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011c2:	2303      	movs	r3, #3
 80011c4:	e004      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011c6:	2302      	movs	r3, #2
 80011c8:	e002      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011ca:	2301      	movs	r3, #1
 80011cc:	e000      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011ce:	2300      	movs	r3, #0
 80011d0:	69fa      	ldr	r2, [r7, #28]
 80011d2:	f002 0203 	and.w	r2, r2, #3
 80011d6:	0092      	lsls	r2, r2, #2
 80011d8:	4093      	lsls	r3, r2
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e0:	4935      	ldr	r1, [pc, #212]	@ (80012b8 <HAL_GPIO_Init+0x310>)
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	3302      	adds	r3, #2
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ee:	4b3b      	ldr	r3, [pc, #236]	@ (80012dc <HAL_GPIO_Init+0x334>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001212:	4a32      	ldr	r2, [pc, #200]	@ (80012dc <HAL_GPIO_Init+0x334>)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001218:	4b30      	ldr	r3, [pc, #192]	@ (80012dc <HAL_GPIO_Init+0x334>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800123c:	4a27      	ldr	r2, [pc, #156]	@ (80012dc <HAL_GPIO_Init+0x334>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001242:	4b26      	ldr	r3, [pc, #152]	@ (80012dc <HAL_GPIO_Init+0x334>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001266:	4a1d      	ldr	r2, [pc, #116]	@ (80012dc <HAL_GPIO_Init+0x334>)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800126c:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <HAL_GPIO_Init+0x334>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001290:	4a12      	ldr	r2, [pc, #72]	@ (80012dc <HAL_GPIO_Init+0x334>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3301      	adds	r3, #1
 800129a:	61fb      	str	r3, [r7, #28]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	2b0f      	cmp	r3, #15
 80012a0:	f67f ae90 	bls.w	8000fc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	3724      	adds	r7, #36	@ 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40013800 	.word	0x40013800
 80012bc:	40020000 	.word	0x40020000
 80012c0:	40020400 	.word	0x40020400
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40020c00 	.word	0x40020c00
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40021400 	.word	0x40021400
 80012d4:	40021800 	.word	0x40021800
 80012d8:	40021c00 	.word	0x40021c00
 80012dc:	40013c00 	.word	0x40013c00

080012e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691a      	ldr	r2, [r3, #16]
 80012f0:	887b      	ldrh	r3, [r7, #2]
 80012f2:	4013      	ands	r3, r2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012f8:	2301      	movs	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	e001      	b.n	8001302 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001302:	7bfb      	ldrb	r3, [r7, #15]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
 800131c:	4613      	mov	r3, r2
 800131e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001320:	787b      	ldrb	r3, [r7, #1]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800132c:	e003      	b.n	8001336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	041a      	lsls	r2, r3, #16
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	619a      	str	r2, [r3, #24]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f002 ff4b 	bl	80041f4 <USB_GetMode>
 800135e:	4603      	mov	r3, r0
 8001360:	2b01      	cmp	r3, #1
 8001362:	f040 80fb 	bne.w	800155c <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f002 ff0e 	bl	800418c <USB_ReadInterrupts>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 80f1 	beq.w	800155a <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f002 ff05 	bl	800418c <USB_ReadInterrupts>
 8001382:	4603      	mov	r3, r0
 8001384:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001388:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800138c:	d104      	bne.n	8001398 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001396:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f002 fef5 	bl	800418c <USB_ReadInterrupts>
 80013a2:	4603      	mov	r3, r0
 80013a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80013ac:	d104      	bne.n	80013b8 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80013b6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f002 fee5 	bl	800418c <USB_ReadInterrupts>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80013cc:	d104      	bne.n	80013d8 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013d6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 fed5 	bl	800418c <USB_ReadInterrupts>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d103      	bne.n	80013f4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2202      	movs	r2, #2
 80013f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 fec7 	bl	800418c <USB_ReadInterrupts>
 80013fe:	4603      	mov	r3, r0
 8001400:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001404:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001408:	d120      	bne.n	800144c <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001412:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b00      	cmp	r3, #0
 8001422:	d113      	bne.n	800144c <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001424:	2110      	movs	r1, #16
 8001426:	6938      	ldr	r0, [r7, #16]
 8001428:	f002 fdf8 	bl	800401c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800142c:	6938      	ldr	r0, [r7, #16]
 800142e:	f002 fe27 	bl	8004080 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7a5b      	ldrb	r3, [r3, #9]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d105      	bne.n	8001446 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2101      	movs	r1, #1
 8001440:	4618      	mov	r0, r3
 8001442:	f002 fee5 	bl	8004210 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f003 f9a1 	bl	800478e <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f002 fe9b 	bl	800418c <USB_ReadInterrupts>
 8001456:	4603      	mov	r3, r0
 8001458:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800145c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001460:	d102      	bne.n	8001468 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f001 fca1 	bl	8002daa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f002 fe8d 	bl	800418c <USB_ReadInterrupts>
 8001472:	4603      	mov	r3, r0
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	2b08      	cmp	r3, #8
 800147a:	d106      	bne.n	800148a <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f003 f96a 	bl	8004756 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2208      	movs	r2, #8
 8001488:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f002 fe7c 	bl	800418c <USB_ReadInterrupts>
 8001494:	4603      	mov	r3, r0
 8001496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800149a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800149e:	d139      	bne.n	8001514 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f002 fef0 	bl	800428a <USB_HC_ReadInterrupt>
 80014aa:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	e025      	b.n	80014fe <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f003 030f 	and.w	r3, r3, #15
 80014b8:	68ba      	ldr	r2, [r7, #8]
 80014ba:	fa22 f303 	lsr.w	r3, r2, r3
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d018      	beq.n	80014f8 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	015a      	lsls	r2, r3, #5
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4413      	add	r3, r2
 80014ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80014dc:	d106      	bne.n	80014ec <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	4619      	mov	r1, r3
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 f859 	bl	800159c <HCD_HC_IN_IRQHandler>
 80014ea:	e005      	b.n	80014f8 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4619      	mov	r1, r3
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 febb 	bl	800226e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	3301      	adds	r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	795b      	ldrb	r3, [r3, #5]
 8001502:	461a      	mov	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	4293      	cmp	r3, r2
 8001508:	d3d3      	bcc.n	80014b2 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001512:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f002 fe37 	bl	800418c <USB_ReadInterrupts>
 800151e:	4603      	mov	r3, r0
 8001520:	f003 0310 	and.w	r3, r3, #16
 8001524:	2b10      	cmp	r3, #16
 8001526:	d101      	bne.n	800152c <HAL_HCD_IRQHandler+0x1ea>
 8001528:	2301      	movs	r3, #1
 800152a:	e000      	b.n	800152e <HAL_HCD_IRQHandler+0x1ec>
 800152c:	2300      	movs	r3, #0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d014      	beq.n	800155c <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	699a      	ldr	r2, [r3, #24]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0210 	bic.w	r2, r2, #16
 8001540:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f001 fb52 	bl	8002bec <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	699a      	ldr	r2, [r3, #24]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0210 	orr.w	r2, r2, #16
 8001556:	619a      	str	r2, [r3, #24]
 8001558:	e000      	b.n	800155c <HAL_HCD_IRQHandler+0x21a>
      return;
 800155a:	bf00      	nop
    }
  }
}
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <HAL_HCD_Stop+0x16>
 8001574:	2302      	movs	r3, #2
 8001576:	e00d      	b.n	8001594 <HAL_HCD_Stop+0x32>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f002 ffb1 	bl	80044ec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	78fa      	ldrb	r2, [r7, #3]
 80015b8:	4611      	mov	r1, r2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f002 fdf9 	bl	80041b2 <USB_ReadChInterrupts>
 80015c0:	4603      	mov	r3, r0
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d11a      	bne.n	8001600 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80015ca:	78fb      	ldrb	r3, [r7, #3]
 80015cc:	015a      	lsls	r2, r3, #5
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4413      	add	r3, r2
 80015d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80015d6:	461a      	mov	r2, r3
 80015d8:	2304      	movs	r3, #4
 80015da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80015dc:	78fa      	ldrb	r2, [r7, #3]
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	1a9b      	subs	r3, r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	334d      	adds	r3, #77	@ 0x4d
 80015ec:	2207      	movs	r2, #7
 80015ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	78fa      	ldrb	r2, [r7, #3]
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f002 fe57 	bl	80042ac <USB_HC_Halt>
 80015fe:	e09e      	b.n	800173e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	78fa      	ldrb	r2, [r7, #3]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f002 fdd2 	bl	80041b2 <USB_ReadChInterrupts>
 800160e:	4603      	mov	r3, r0
 8001610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001614:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001618:	d11b      	bne.n	8001652 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	015a      	lsls	r2, r3, #5
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	4413      	add	r3, r2
 8001622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001626:	461a      	mov	r2, r3
 8001628:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800162c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800162e:	78fa      	ldrb	r2, [r7, #3]
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	1a9b      	subs	r3, r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	440b      	add	r3, r1
 800163c:	334d      	adds	r3, #77	@ 0x4d
 800163e:	2208      	movs	r2, #8
 8001640:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	78fa      	ldrb	r2, [r7, #3]
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f002 fe2e 	bl	80042ac <USB_HC_Halt>
 8001650:	e075      	b.n	800173e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	78fa      	ldrb	r2, [r7, #3]
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f002 fda9 	bl	80041b2 <USB_ReadChInterrupts>
 8001660:	4603      	mov	r3, r0
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b08      	cmp	r3, #8
 8001668:	d11a      	bne.n	80016a0 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800166a:	78fb      	ldrb	r3, [r7, #3]
 800166c:	015a      	lsls	r2, r3, #5
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4413      	add	r3, r2
 8001672:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001676:	461a      	mov	r2, r3
 8001678:	2308      	movs	r3, #8
 800167a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800167c:	78fa      	ldrb	r2, [r7, #3]
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	1a9b      	subs	r3, r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	334d      	adds	r3, #77	@ 0x4d
 800168c:	2206      	movs	r2, #6
 800168e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	78fa      	ldrb	r2, [r7, #3]
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f002 fe07 	bl	80042ac <USB_HC_Halt>
 800169e:	e04e      	b.n	800173e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	78fa      	ldrb	r2, [r7, #3]
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f002 fd82 	bl	80041b2 <USB_ReadChInterrupts>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016b8:	d11b      	bne.n	80016f2 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80016ba:	78fb      	ldrb	r3, [r7, #3]
 80016bc:	015a      	lsls	r2, r3, #5
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4413      	add	r3, r2
 80016c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80016c6:	461a      	mov	r2, r3
 80016c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80016ce:	78fa      	ldrb	r2, [r7, #3]
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	1a9b      	subs	r3, r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	334d      	adds	r3, #77	@ 0x4d
 80016de:	2209      	movs	r2, #9
 80016e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	78fa      	ldrb	r2, [r7, #3]
 80016e8:	4611      	mov	r1, r2
 80016ea:	4618      	mov	r0, r3
 80016ec:	f002 fdde 	bl	80042ac <USB_HC_Halt>
 80016f0:	e025      	b.n	800173e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	78fa      	ldrb	r2, [r7, #3]
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 fd59 	bl	80041b2 <USB_ReadChInterrupts>
 8001700:	4603      	mov	r3, r0
 8001702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001706:	2b80      	cmp	r3, #128	@ 0x80
 8001708:	d119      	bne.n	800173e <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	015a      	lsls	r2, r3, #5
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	4413      	add	r3, r2
 8001712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001716:	461a      	mov	r2, r3
 8001718:	2380      	movs	r3, #128	@ 0x80
 800171a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800171c:	78fa      	ldrb	r2, [r7, #3]
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	1a9b      	subs	r3, r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	334d      	adds	r3, #77	@ 0x4d
 800172c:	2207      	movs	r2, #7
 800172e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	78fa      	ldrb	r2, [r7, #3]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f002 fdb7 	bl	80042ac <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	78fa      	ldrb	r2, [r7, #3]
 8001744:	4611      	mov	r1, r2
 8001746:	4618      	mov	r0, r3
 8001748:	f002 fd33 	bl	80041b2 <USB_ReadChInterrupts>
 800174c:	4603      	mov	r3, r0
 800174e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001752:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001756:	d112      	bne.n	800177e <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	78fa      	ldrb	r2, [r7, #3]
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f002 fda3 	bl	80042ac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	015a      	lsls	r2, r3, #5
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	4413      	add	r3, r2
 800176e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001772:	461a      	mov	r2, r3
 8001774:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001778:	6093      	str	r3, [r2, #8]
 800177a:	f000 bd75 	b.w	8002268 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	78fa      	ldrb	r2, [r7, #3]
 8001784:	4611      	mov	r1, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f002 fd13 	bl	80041b2 <USB_ReadChInterrupts>
 800178c:	4603      	mov	r3, r0
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b01      	cmp	r3, #1
 8001794:	f040 8128 	bne.w	80019e8 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	015a      	lsls	r2, r3, #5
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4413      	add	r3, r2
 80017a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80017a4:	461a      	mov	r2, r3
 80017a6:	2320      	movs	r3, #32
 80017a8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80017aa:	78fa      	ldrb	r2, [r7, #3]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	1a9b      	subs	r3, r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	440b      	add	r3, r1
 80017b8:	331b      	adds	r3, #27
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d119      	bne.n	80017f4 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80017c0:	78fa      	ldrb	r2, [r7, #3]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	1a9b      	subs	r3, r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	331b      	adds	r3, #27
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	015a      	lsls	r2, r3, #5
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4413      	add	r3, r2
 80017dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	78fa      	ldrb	r2, [r7, #3]
 80017e4:	0151      	lsls	r1, r2, #5
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	440a      	add	r2, r1
 80017ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80017ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017f2:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	799b      	ldrb	r3, [r3, #6]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d01b      	beq.n	8001834 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80017fc:	78fa      	ldrb	r2, [r7, #3]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	3330      	adds	r3, #48	@ 0x30
 800180c:	6819      	ldr	r1, [r3, #0]
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	015a      	lsls	r2, r3, #5
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4413      	add	r3, r2
 8001816:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	1ac9      	subs	r1, r1, r3
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	1a9b      	subs	r3, r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4403      	add	r3, r0
 8001830:	3338      	adds	r3, #56	@ 0x38
 8001832:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001834:	78fa      	ldrb	r2, [r7, #3]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	334d      	adds	r3, #77	@ 0x4d
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001848:	78fa      	ldrb	r2, [r7, #3]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	1a9b      	subs	r3, r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	3344      	adds	r3, #68	@ 0x44
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800185c:	78fb      	ldrb	r3, [r7, #3]
 800185e:	015a      	lsls	r2, r3, #5
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4413      	add	r3, r2
 8001864:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001868:	461a      	mov	r2, r3
 800186a:	2301      	movs	r3, #1
 800186c:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800186e:	78fa      	ldrb	r2, [r7, #3]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	011b      	lsls	r3, r3, #4
 8001876:	1a9b      	subs	r3, r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	3326      	adds	r3, #38	@ 0x26
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00a      	beq.n	800189a <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001884:	78fa      	ldrb	r2, [r7, #3]
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	1a9b      	subs	r3, r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	3326      	adds	r3, #38	@ 0x26
 8001894:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001896:	2b02      	cmp	r3, #2
 8001898:	d110      	bne.n	80018bc <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	78fa      	ldrb	r2, [r7, #3]
 80018a0:	4611      	mov	r1, r2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f002 fd02 	bl	80042ac <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	015a      	lsls	r2, r3, #5
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	4413      	add	r3, r2
 80018b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80018b4:	461a      	mov	r2, r3
 80018b6:	2310      	movs	r3, #16
 80018b8:	6093      	str	r3, [r2, #8]
 80018ba:	e03d      	b.n	8001938 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80018bc:	78fa      	ldrb	r2, [r7, #3]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	1a9b      	subs	r3, r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	3326      	adds	r3, #38	@ 0x26
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d00a      	beq.n	80018e8 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80018d2:	78fa      	ldrb	r2, [r7, #3]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	1a9b      	subs	r3, r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	3326      	adds	r3, #38	@ 0x26
 80018e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d127      	bne.n	8001938 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	015a      	lsls	r2, r3, #5
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	4413      	add	r3, r2
 80018f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	78fa      	ldrb	r2, [r7, #3]
 80018f8:	0151      	lsls	r1, r2, #5
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	440a      	add	r2, r1
 80018fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001902:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001906:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001908:	78fa      	ldrb	r2, [r7, #3]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	1a9b      	subs	r3, r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	334c      	adds	r3, #76	@ 0x4c
 8001918:	2201      	movs	r2, #1
 800191a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800191c:	78fa      	ldrb	r2, [r7, #3]
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	1a9b      	subs	r3, r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	334c      	adds	r3, #76	@ 0x4c
 800192c:	781a      	ldrb	r2, [r3, #0]
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	4619      	mov	r1, r3
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f002 ff39 	bl	80047aa <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	799b      	ldrb	r3, [r3, #6]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d13b      	bne.n	80019b8 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	1a9b      	subs	r3, r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	3338      	adds	r3, #56	@ 0x38
 8001950:	6819      	ldr	r1, [r3, #0]
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	1a9b      	subs	r3, r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4403      	add	r3, r0
 8001960:	3328      	adds	r3, #40	@ 0x28
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	440b      	add	r3, r1
 8001966:	1e59      	subs	r1, r3, #1
 8001968:	78fa      	ldrb	r2, [r7, #3]
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	011b      	lsls	r3, r3, #4
 8001970:	1a9b      	subs	r3, r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4403      	add	r3, r0
 8001976:	3328      	adds	r3, #40	@ 0x28
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	fbb1 f3f3 	udiv	r3, r1, r3
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 8470 	beq.w	8002268 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001988:	78fa      	ldrb	r2, [r7, #3]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	333c      	adds	r3, #60	@ 0x3c
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	78fa      	ldrb	r2, [r7, #3]
 800199c:	f083 0301 	eor.w	r3, r3, #1
 80019a0:	b2d8      	uxtb	r0, r3
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	1a9b      	subs	r3, r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	333c      	adds	r3, #60	@ 0x3c
 80019b0:	4602      	mov	r2, r0
 80019b2:	701a      	strb	r2, [r3, #0]
 80019b4:	f000 bc58 	b.w	8002268 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80019b8:	78fa      	ldrb	r2, [r7, #3]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	333c      	adds	r3, #60	@ 0x3c
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	78fa      	ldrb	r2, [r7, #3]
 80019cc:	f083 0301 	eor.w	r3, r3, #1
 80019d0:	b2d8      	uxtb	r0, r3
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	333c      	adds	r3, #60	@ 0x3c
 80019e0:	4602      	mov	r2, r0
 80019e2:	701a      	strb	r2, [r3, #0]
 80019e4:	f000 bc40 	b.w	8002268 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	78fa      	ldrb	r2, [r7, #3]
 80019ee:	4611      	mov	r1, r2
 80019f0:	4618      	mov	r0, r3
 80019f2:	f002 fbde 	bl	80041b2 <USB_ReadChInterrupts>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f003 0320 	and.w	r3, r3, #32
 80019fc:	2b20      	cmp	r3, #32
 80019fe:	d131      	bne.n	8001a64 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001a00:	78fb      	ldrb	r3, [r7, #3]
 8001a02:	015a      	lsls	r2, r3, #5
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4413      	add	r3, r2
 8001a08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	2320      	movs	r3, #32
 8001a10:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8001a12:	78fa      	ldrb	r2, [r7, #3]
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	1a9b      	subs	r3, r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	440b      	add	r3, r1
 8001a20:	331a      	adds	r3, #26
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	f040 841f 	bne.w	8002268 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8001a2a:	78fa      	ldrb	r2, [r7, #3]
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	1a9b      	subs	r3, r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	331b      	adds	r3, #27
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001a3e:	78fa      	ldrb	r2, [r7, #3]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	1a9b      	subs	r3, r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	334d      	adds	r3, #77	@ 0x4d
 8001a4e:	2203      	movs	r2, #3
 8001a50:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	78fa      	ldrb	r2, [r7, #3]
 8001a58:	4611      	mov	r1, r2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 fc26 	bl	80042ac <USB_HC_Halt>
 8001a60:	f000 bc02 	b.w	8002268 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	78fa      	ldrb	r2, [r7, #3]
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f002 fba0 	bl	80041b2 <USB_ReadChInterrupts>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	f040 8305 	bne.w	8002088 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	015a      	lsls	r2, r3, #5
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4413      	add	r3, r2
 8001a86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001a90:	78fa      	ldrb	r2, [r7, #3]
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	1a9b      	subs	r3, r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	334d      	adds	r3, #77	@ 0x4d
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d114      	bne.n	8001ad0 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001aa6:	78fa      	ldrb	r2, [r7, #3]
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	1a9b      	subs	r3, r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	334d      	adds	r3, #77	@ 0x4d
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001aba:	78fa      	ldrb	r2, [r7, #3]
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	1a9b      	subs	r3, r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	334c      	adds	r3, #76	@ 0x4c
 8001aca:	2201      	movs	r2, #1
 8001acc:	701a      	strb	r2, [r3, #0]
 8001ace:	e2cc      	b.n	800206a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001ad0:	78fa      	ldrb	r2, [r7, #3]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	1a9b      	subs	r3, r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	334d      	adds	r3, #77	@ 0x4d
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	d114      	bne.n	8001b10 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001ae6:	78fa      	ldrb	r2, [r7, #3]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	1a9b      	subs	r3, r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	334d      	adds	r3, #77	@ 0x4d
 8001af6:	2202      	movs	r2, #2
 8001af8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8001afa:	78fa      	ldrb	r2, [r7, #3]
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	1a9b      	subs	r3, r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	440b      	add	r3, r1
 8001b08:	334c      	adds	r3, #76	@ 0x4c
 8001b0a:	2205      	movs	r2, #5
 8001b0c:	701a      	strb	r2, [r3, #0]
 8001b0e:	e2ac      	b.n	800206a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001b10:	78fa      	ldrb	r2, [r7, #3]
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	011b      	lsls	r3, r3, #4
 8001b18:	1a9b      	subs	r3, r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	334d      	adds	r3, #77	@ 0x4d
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b07      	cmp	r3, #7
 8001b24:	d00b      	beq.n	8001b3e <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001b26:	78fa      	ldrb	r2, [r7, #3]
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	1a9b      	subs	r3, r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	440b      	add	r3, r1
 8001b34:	334d      	adds	r3, #77	@ 0x4d
 8001b36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001b38:	2b09      	cmp	r3, #9
 8001b3a:	f040 80a6 	bne.w	8001c8a <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001b3e:	78fa      	ldrb	r2, [r7, #3]
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	1a9b      	subs	r3, r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	334d      	adds	r3, #77	@ 0x4d
 8001b4e:	2202      	movs	r2, #2
 8001b50:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001b52:	78fa      	ldrb	r2, [r7, #3]
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	011b      	lsls	r3, r3, #4
 8001b5a:	1a9b      	subs	r3, r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	440b      	add	r3, r1
 8001b60:	3344      	adds	r3, #68	@ 0x44
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	1c59      	adds	r1, r3, #1
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	1a9b      	subs	r3, r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4403      	add	r3, r0
 8001b72:	3344      	adds	r3, #68	@ 0x44
 8001b74:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001b76:	78fa      	ldrb	r2, [r7, #3]
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	1a9b      	subs	r3, r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	3344      	adds	r3, #68	@ 0x44
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d943      	bls.n	8001c14 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001b8c:	78fa      	ldrb	r2, [r7, #3]
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	1a9b      	subs	r3, r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	3344      	adds	r3, #68	@ 0x44
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001ba0:	78fa      	ldrb	r2, [r7, #3]
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	1a9b      	subs	r3, r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	331a      	adds	r3, #26
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d123      	bne.n	8001bfe <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8001bb6:	78fa      	ldrb	r2, [r7, #3]
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	1a9b      	subs	r3, r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	331b      	adds	r3, #27
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8001bca:	78fa      	ldrb	r2, [r7, #3]
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	011b      	lsls	r3, r3, #4
 8001bd2:	1a9b      	subs	r3, r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	331c      	adds	r3, #28
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001bde:	78fb      	ldrb	r3, [r7, #3]
 8001be0:	015a      	lsls	r2, r3, #5
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	4413      	add	r3, r2
 8001be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	0151      	lsls	r1, r2, #5
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	440a      	add	r2, r1
 8001bf4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001bf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bfc:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001bfe:	78fa      	ldrb	r2, [r7, #3]
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	1a9b      	subs	r3, r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	334c      	adds	r3, #76	@ 0x4c
 8001c0e:	2204      	movs	r2, #4
 8001c10:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001c12:	e229      	b.n	8002068 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001c14:	78fa      	ldrb	r2, [r7, #3]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	1a9b      	subs	r3, r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	334c      	adds	r3, #76	@ 0x4c
 8001c24:	2202      	movs	r2, #2
 8001c26:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001c28:	78fa      	ldrb	r2, [r7, #3]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	1a9b      	subs	r3, r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	3326      	adds	r3, #38	@ 0x26
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00b      	beq.n	8001c56 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001c3e:	78fa      	ldrb	r2, [r7, #3]
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	4613      	mov	r3, r2
 8001c44:	011b      	lsls	r3, r3, #4
 8001c46:	1a9b      	subs	r3, r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	3326      	adds	r3, #38	@ 0x26
 8001c4e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	f040 8209 	bne.w	8002068 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	015a      	lsls	r2, r3, #5
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001c6c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001c74:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001c76:	78fb      	ldrb	r3, [r7, #3]
 8001c78:	015a      	lsls	r2, r3, #5
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c82:	461a      	mov	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001c88:	e1ee      	b.n	8002068 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001c8a:	78fa      	ldrb	r2, [r7, #3]
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	011b      	lsls	r3, r3, #4
 8001c92:	1a9b      	subs	r3, r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	440b      	add	r3, r1
 8001c98:	334d      	adds	r3, #77	@ 0x4d
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b05      	cmp	r3, #5
 8001c9e:	f040 80c8 	bne.w	8001e32 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001ca2:	78fa      	ldrb	r2, [r7, #3]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	1a9b      	subs	r3, r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	334d      	adds	r3, #77	@ 0x4d
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001cb6:	78fa      	ldrb	r2, [r7, #3]
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	011b      	lsls	r3, r3, #4
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	331b      	adds	r3, #27
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	f040 81ce 	bne.w	800206a <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001cce:	78fa      	ldrb	r2, [r7, #3]
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	1a9b      	subs	r3, r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	3326      	adds	r3, #38	@ 0x26
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d16b      	bne.n	8001dbc <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8001ce4:	78fa      	ldrb	r2, [r7, #3]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	1a9b      	subs	r3, r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	3348      	adds	r3, #72	@ 0x48
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	1c59      	adds	r1, r3, #1
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	1a9b      	subs	r3, r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4403      	add	r3, r0
 8001d04:	3348      	adds	r3, #72	@ 0x48
 8001d06:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8001d08:	78fa      	ldrb	r2, [r7, #3]
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	1a9b      	subs	r3, r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	3348      	adds	r3, #72	@ 0x48
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d943      	bls.n	8001da6 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8001d1e:	78fa      	ldrb	r2, [r7, #3]
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	1a9b      	subs	r3, r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	3348      	adds	r3, #72	@ 0x48
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8001d32:	78fa      	ldrb	r2, [r7, #3]
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	1a9b      	subs	r3, r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	440b      	add	r3, r1
 8001d40:	331b      	adds	r3, #27
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8001d46:	78fa      	ldrb	r2, [r7, #3]
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	011b      	lsls	r3, r3, #4
 8001d4e:	1a9b      	subs	r3, r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	3344      	adds	r3, #68	@ 0x44
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d809      	bhi.n	8001d70 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8001d5c:	78fa      	ldrb	r2, [r7, #3]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	1a9b      	subs	r3, r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	331c      	adds	r3, #28
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	015a      	lsls	r2, r3, #5
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4413      	add	r3, r2
 8001d78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	78fa      	ldrb	r2, [r7, #3]
 8001d80:	0151      	lsls	r1, r2, #5
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	440a      	add	r2, r1
 8001d86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d8e:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8001d90:	78fa      	ldrb	r2, [r7, #3]
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	011b      	lsls	r3, r3, #4
 8001d98:	1a9b      	subs	r3, r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	334c      	adds	r3, #76	@ 0x4c
 8001da0:	2204      	movs	r2, #4
 8001da2:	701a      	strb	r2, [r3, #0]
 8001da4:	e014      	b.n	8001dd0 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001da6:	78fa      	ldrb	r2, [r7, #3]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	011b      	lsls	r3, r3, #4
 8001dae:	1a9b      	subs	r3, r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	334c      	adds	r3, #76	@ 0x4c
 8001db6:	2202      	movs	r2, #2
 8001db8:	701a      	strb	r2, [r3, #0]
 8001dba:	e009      	b.n	8001dd0 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001dbc:	78fa      	ldrb	r2, [r7, #3]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	1a9b      	subs	r3, r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	334c      	adds	r3, #76	@ 0x4c
 8001dcc:	2202      	movs	r2, #2
 8001dce:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001dd0:	78fa      	ldrb	r2, [r7, #3]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	1a9b      	subs	r3, r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	3326      	adds	r3, #38	@ 0x26
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00b      	beq.n	8001dfe <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001de6:	78fa      	ldrb	r2, [r7, #3]
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	1a9b      	subs	r3, r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	440b      	add	r3, r1
 8001df4:	3326      	adds	r3, #38	@ 0x26
 8001df6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	f040 8136 	bne.w	800206a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001dfe:	78fb      	ldrb	r3, [r7, #3]
 8001e00:	015a      	lsls	r2, r3, #5
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001e14:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001e1c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	015a      	lsls	r2, r3, #5
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4413      	add	r3, r2
 8001e26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	e11b      	b.n	800206a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8001e32:	78fa      	ldrb	r2, [r7, #3]
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	1a9b      	subs	r3, r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	334d      	adds	r3, #77	@ 0x4d
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	f040 8081 	bne.w	8001f4c <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001e4a:	78fa      	ldrb	r2, [r7, #3]
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	1a9b      	subs	r3, r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	334d      	adds	r3, #77	@ 0x4d
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001e5e:	78fa      	ldrb	r2, [r7, #3]
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	1a9b      	subs	r3, r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	331b      	adds	r3, #27
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	f040 80fa 	bne.w	800206a <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001e76:	78fa      	ldrb	r2, [r7, #3]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	1a9b      	subs	r3, r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	334c      	adds	r3, #76	@ 0x4c
 8001e86:	2202      	movs	r2, #2
 8001e88:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	015a      	lsls	r2, r3, #5
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4413      	add	r3, r2
 8001e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	78fa      	ldrb	r2, [r7, #3]
 8001e9a:	0151      	lsls	r1, r2, #5
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	440a      	add	r2, r1
 8001ea0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001ea4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea8:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	015a      	lsls	r2, r3, #5
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	78fa      	ldrb	r2, [r7, #3]
 8001eba:	0151      	lsls	r1, r2, #5
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	440a      	add	r2, r1
 8001ec0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001ec4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ec8:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	78fa      	ldrb	r2, [r7, #3]
 8001eda:	0151      	lsls	r1, r2, #5
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	440a      	add	r2, r1
 8001ee0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001ee4:	f023 0320 	bic.w	r3, r3, #32
 8001ee8:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001eea:	78fa      	ldrb	r2, [r7, #3]
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	011b      	lsls	r3, r3, #4
 8001ef2:	1a9b      	subs	r3, r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	3326      	adds	r3, #38	@ 0x26
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00b      	beq.n	8001f18 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001f00:	78fa      	ldrb	r2, [r7, #3]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	3326      	adds	r3, #38	@ 0x26
 8001f10:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	f040 80a9 	bne.w	800206a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	015a      	lsls	r2, r3, #5
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001f2e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001f36:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f44:	461a      	mov	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	e08e      	b.n	800206a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8001f4c:	78fa      	ldrb	r2, [r7, #3]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	1a9b      	subs	r3, r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	334d      	adds	r3, #77	@ 0x4d
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d143      	bne.n	8001fea <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001f62:	78fa      	ldrb	r2, [r7, #3]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	1a9b      	subs	r3, r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	334d      	adds	r3, #77	@ 0x4d
 8001f72:	2202      	movs	r2, #2
 8001f74:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001f76:	78fa      	ldrb	r2, [r7, #3]
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	1a9b      	subs	r3, r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	334c      	adds	r3, #76	@ 0x4c
 8001f86:	2202      	movs	r2, #2
 8001f88:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f8a:	78fa      	ldrb	r2, [r7, #3]
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	1a9b      	subs	r3, r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	3326      	adds	r3, #38	@ 0x26
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00a      	beq.n	8001fb6 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001fa0:	78fa      	ldrb	r2, [r7, #3]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	1a9b      	subs	r3, r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	3326      	adds	r3, #38	@ 0x26
 8001fb0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d159      	bne.n	800206a <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	015a      	lsls	r2, r3, #5
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001fcc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001fd4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	015a      	lsls	r2, r3, #5
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	e03f      	b.n	800206a <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8001fea:	78fa      	ldrb	r2, [r7, #3]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	334d      	adds	r3, #77	@ 0x4d
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d126      	bne.n	800204e <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002000:	78fa      	ldrb	r2, [r7, #3]
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	334d      	adds	r3, #77	@ 0x4d
 8002010:	2202      	movs	r2, #2
 8002012:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002014:	78fa      	ldrb	r2, [r7, #3]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	3344      	adds	r3, #68	@ 0x44
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	1c59      	adds	r1, r3, #1
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	1a9b      	subs	r3, r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4403      	add	r3, r0
 8002034:	3344      	adds	r3, #68	@ 0x44
 8002036:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002038:	78fa      	ldrb	r2, [r7, #3]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	1a9b      	subs	r3, r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	334c      	adds	r3, #76	@ 0x4c
 8002048:	2204      	movs	r2, #4
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	e00d      	b.n	800206a <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800204e:	78fa      	ldrb	r2, [r7, #3]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	1a9b      	subs	r3, r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	334d      	adds	r3, #77	@ 0x4d
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b02      	cmp	r3, #2
 8002062:	f000 8100 	beq.w	8002266 <HCD_HC_IN_IRQHandler+0xcca>
 8002066:	e000      	b.n	800206a <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002068:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800206a:	78fa      	ldrb	r2, [r7, #3]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	1a9b      	subs	r3, r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	334c      	adds	r3, #76	@ 0x4c
 800207a:	781a      	ldrb	r2, [r3, #0]
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	4619      	mov	r1, r3
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f002 fb92 	bl	80047aa <HAL_HCD_HC_NotifyURBChange_Callback>
 8002086:	e0ef      	b.n	8002268 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	78fa      	ldrb	r2, [r7, #3]
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f002 f88e 	bl	80041b2 <USB_ReadChInterrupts>
 8002096:	4603      	mov	r3, r0
 8002098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800209c:	2b40      	cmp	r3, #64	@ 0x40
 800209e:	d12f      	bne.n	8002100 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	015a      	lsls	r2, r3, #5
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020ac:	461a      	mov	r2, r3
 80020ae:	2340      	movs	r3, #64	@ 0x40
 80020b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80020b2:	78fa      	ldrb	r2, [r7, #3]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	1a9b      	subs	r3, r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	334d      	adds	r3, #77	@ 0x4d
 80020c2:	2205      	movs	r2, #5
 80020c4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80020c6:	78fa      	ldrb	r2, [r7, #3]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	1a9b      	subs	r3, r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	331a      	adds	r3, #26
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d109      	bne.n	80020f0 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80020dc:	78fa      	ldrb	r2, [r7, #3]
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	011b      	lsls	r3, r3, #4
 80020e4:	1a9b      	subs	r3, r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	3344      	adds	r3, #68	@ 0x44
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	78fa      	ldrb	r2, [r7, #3]
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f002 f8d7 	bl	80042ac <USB_HC_Halt>
 80020fe:	e0b3      	b.n	8002268 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	78fa      	ldrb	r2, [r7, #3]
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f002 f852 	bl	80041b2 <USB_ReadChInterrupts>
 800210e:	4603      	mov	r3, r0
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b10      	cmp	r3, #16
 8002116:	f040 80a7 	bne.w	8002268 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800211a:	78fa      	ldrb	r2, [r7, #3]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	3326      	adds	r3, #38	@ 0x26
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d11b      	bne.n	8002168 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002130:	78fa      	ldrb	r2, [r7, #3]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	1a9b      	subs	r3, r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	3344      	adds	r3, #68	@ 0x44
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002144:	78fa      	ldrb	r2, [r7, #3]
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	1a9b      	subs	r3, r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	334d      	adds	r3, #77	@ 0x4d
 8002154:	2204      	movs	r2, #4
 8002156:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	78fa      	ldrb	r2, [r7, #3]
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f002 f8a3 	bl	80042ac <USB_HC_Halt>
 8002166:	e03f      	b.n	80021e8 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002168:	78fa      	ldrb	r2, [r7, #3]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	3326      	adds	r3, #38	@ 0x26
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800217e:	78fa      	ldrb	r2, [r7, #3]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	1a9b      	subs	r3, r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	3326      	adds	r3, #38	@ 0x26
 800218e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002190:	2b02      	cmp	r3, #2
 8002192:	d129      	bne.n	80021e8 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002194:	78fa      	ldrb	r2, [r7, #3]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	011b      	lsls	r3, r3, #4
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	3344      	adds	r3, #68	@ 0x44
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	799b      	ldrb	r3, [r3, #6]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00a      	beq.n	80021c6 <HCD_HC_IN_IRQHandler+0xc2a>
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	331b      	adds	r3, #27
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d110      	bne.n	80021e8 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80021c6:	78fa      	ldrb	r2, [r7, #3]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	1a9b      	subs	r3, r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	334d      	adds	r3, #77	@ 0x4d
 80021d6:	2204      	movs	r2, #4
 80021d8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	78fa      	ldrb	r2, [r7, #3]
 80021e0:	4611      	mov	r1, r2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f002 f862 	bl	80042ac <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80021e8:	78fa      	ldrb	r2, [r7, #3]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	331b      	adds	r3, #27
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d129      	bne.n	8002252 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80021fe:	78fa      	ldrb	r2, [r7, #3]
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	331b      	adds	r3, #27
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002212:	78fb      	ldrb	r3, [r7, #3]
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4413      	add	r3, r2
 800221a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	78fa      	ldrb	r2, [r7, #3]
 8002222:	0151      	lsls	r1, r2, #5
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	440a      	add	r2, r1
 8002228:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800222c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002230:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002232:	78fb      	ldrb	r3, [r7, #3]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4413      	add	r3, r2
 800223a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	78fa      	ldrb	r2, [r7, #3]
 8002242:	0151      	lsls	r1, r2, #5
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	440a      	add	r2, r1
 8002248:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800224c:	f043 0320 	orr.w	r3, r3, #32
 8002250:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	015a      	lsls	r2, r3, #5
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4413      	add	r3, r2
 800225a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800225e:	461a      	mov	r2, r3
 8002260:	2310      	movs	r3, #16
 8002262:	6093      	str	r3, [r2, #8]
 8002264:	e000      	b.n	8002268 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002266:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	460b      	mov	r3, r1
 8002278:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	78fa      	ldrb	r2, [r7, #3]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f001 ff90 	bl	80041b2 <USB_ReadChInterrupts>
 8002292:	4603      	mov	r3, r0
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b04      	cmp	r3, #4
 800229a:	d11b      	bne.n	80022d4 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022a8:	461a      	mov	r2, r3
 80022aa:	2304      	movs	r3, #4
 80022ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80022ae:	78fa      	ldrb	r2, [r7, #3]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	1a9b      	subs	r3, r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	440b      	add	r3, r1
 80022bc:	334d      	adds	r3, #77	@ 0x4d
 80022be:	2207      	movs	r2, #7
 80022c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	78fa      	ldrb	r2, [r7, #3]
 80022c8:	4611      	mov	r1, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f001 ffee 	bl	80042ac <USB_HC_Halt>
 80022d0:	f000 bc89 	b.w	8002be6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	78fa      	ldrb	r2, [r7, #3]
 80022da:	4611      	mov	r1, r2
 80022dc:	4618      	mov	r0, r3
 80022de:	f001 ff68 	bl	80041b2 <USB_ReadChInterrupts>
 80022e2:	4603      	mov	r3, r0
 80022e4:	f003 0320 	and.w	r3, r3, #32
 80022e8:	2b20      	cmp	r3, #32
 80022ea:	f040 8082 	bne.w	80023f2 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022fa:	461a      	mov	r2, r3
 80022fc:	2320      	movs	r3, #32
 80022fe:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002300:	78fa      	ldrb	r2, [r7, #3]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	3319      	adds	r3, #25
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d124      	bne.n	8002360 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002316:	78fa      	ldrb	r2, [r7, #3]
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	1a9b      	subs	r3, r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	440b      	add	r3, r1
 8002324:	3319      	adds	r3, #25
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800232a:	78fa      	ldrb	r2, [r7, #3]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	440b      	add	r3, r1
 8002338:	334c      	adds	r3, #76	@ 0x4c
 800233a:	2202      	movs	r2, #2
 800233c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800233e:	78fa      	ldrb	r2, [r7, #3]
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	334d      	adds	r3, #77	@ 0x4d
 800234e:	2203      	movs	r2, #3
 8002350:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	78fa      	ldrb	r2, [r7, #3]
 8002358:	4611      	mov	r1, r2
 800235a:	4618      	mov	r0, r3
 800235c:	f001 ffa6 	bl	80042ac <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002360:	78fa      	ldrb	r2, [r7, #3]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	331a      	adds	r3, #26
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b01      	cmp	r3, #1
 8002374:	f040 8437 	bne.w	8002be6 <HCD_HC_OUT_IRQHandler+0x978>
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	331b      	adds	r3, #27
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	f040 842b 	bne.w	8002be6 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002390:	78fa      	ldrb	r2, [r7, #3]
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	1a9b      	subs	r3, r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	3326      	adds	r3, #38	@ 0x26
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d009      	beq.n	80023ba <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	331b      	adds	r3, #27
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80023ba:	78fa      	ldrb	r2, [r7, #3]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	1a9b      	subs	r3, r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	334d      	adds	r3, #77	@ 0x4d
 80023ca:	2203      	movs	r2, #3
 80023cc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	78fa      	ldrb	r2, [r7, #3]
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f001 ff68 	bl	80042ac <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	3344      	adds	r3, #68	@ 0x44
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	e3f9      	b.n	8002be6 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	4611      	mov	r1, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f001 fed9 	bl	80041b2 <USB_ReadChInterrupts>
 8002400:	4603      	mov	r3, r0
 8002402:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002406:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800240a:	d111      	bne.n	8002430 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4413      	add	r3, r2
 8002414:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002418:	461a      	mov	r2, r3
 800241a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800241e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f001 ff3f 	bl	80042ac <USB_HC_Halt>
 800242e:	e3da      	b.n	8002be6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f001 feba 	bl	80041b2 <USB_ReadChInterrupts>
 800243e:	4603      	mov	r3, r0
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b01      	cmp	r3, #1
 8002446:	d168      	bne.n	800251a <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002448:	78fa      	ldrb	r2, [r7, #3]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	1a9b      	subs	r3, r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	3344      	adds	r3, #68	@ 0x44
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f001 fea4 	bl	80041b2 <USB_ReadChInterrupts>
 800246a:	4603      	mov	r3, r0
 800246c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002470:	2b40      	cmp	r3, #64	@ 0x40
 8002472:	d112      	bne.n	800249a <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	1a9b      	subs	r3, r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	3319      	adds	r3, #25
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	015a      	lsls	r2, r3, #5
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4413      	add	r3, r2
 8002490:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002494:	461a      	mov	r2, r3
 8002496:	2340      	movs	r3, #64	@ 0x40
 8002498:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	331b      	adds	r3, #27
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d019      	beq.n	80024e4 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	331b      	adds	r3, #27
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	78fa      	ldrb	r2, [r7, #3]
 80024d4:	0151      	lsls	r1, r2, #5
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	440a      	add	r2, r1
 80024da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024e2:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024f0:	461a      	mov	r2, r3
 80024f2:	2301      	movs	r3, #1
 80024f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80024f6:	78fa      	ldrb	r2, [r7, #3]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	334d      	adds	r3, #77	@ 0x4d
 8002506:	2201      	movs	r2, #1
 8002508:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	4611      	mov	r1, r2
 8002512:	4618      	mov	r0, r3
 8002514:	f001 feca 	bl	80042ac <USB_HC_Halt>
 8002518:	e365      	b.n	8002be6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	78fa      	ldrb	r2, [r7, #3]
 8002520:	4611      	mov	r1, r2
 8002522:	4618      	mov	r0, r3
 8002524:	f001 fe45 	bl	80041b2 <USB_ReadChInterrupts>
 8002528:	4603      	mov	r3, r0
 800252a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800252e:	2b40      	cmp	r3, #64	@ 0x40
 8002530:	d139      	bne.n	80025a6 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002532:	78fa      	ldrb	r2, [r7, #3]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	1a9b      	subs	r3, r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	334d      	adds	r3, #77	@ 0x4d
 8002542:	2205      	movs	r2, #5
 8002544:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002546:	78fa      	ldrb	r2, [r7, #3]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	1a9b      	subs	r3, r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	331a      	adds	r3, #26
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d109      	bne.n	8002570 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800255c:	78fa      	ldrb	r2, [r7, #3]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	3319      	adds	r3, #25
 800256c:	2201      	movs	r2, #1
 800256e:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	3344      	adds	r3, #68	@ 0x44
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f001 fe8d 	bl	80042ac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4413      	add	r3, r2
 800259a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800259e:	461a      	mov	r2, r3
 80025a0:	2340      	movs	r3, #64	@ 0x40
 80025a2:	6093      	str	r3, [r2, #8]
 80025a4:	e31f      	b.n	8002be6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	78fa      	ldrb	r2, [r7, #3]
 80025ac:	4611      	mov	r1, r2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f001 fdff 	bl	80041b2 <USB_ReadChInterrupts>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d11a      	bne.n	80025f4 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80025be:	78fb      	ldrb	r3, [r7, #3]
 80025c0:	015a      	lsls	r2, r3, #5
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025ca:	461a      	mov	r2, r3
 80025cc:	2308      	movs	r3, #8
 80025ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80025d0:	78fa      	ldrb	r2, [r7, #3]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	334d      	adds	r3, #77	@ 0x4d
 80025e0:	2206      	movs	r2, #6
 80025e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	78fa      	ldrb	r2, [r7, #3]
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f001 fe5d 	bl	80042ac <USB_HC_Halt>
 80025f2:	e2f8      	b.n	8002be6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f001 fdd8 	bl	80041b2 <USB_ReadChInterrupts>
 8002602:	4603      	mov	r3, r0
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	2b10      	cmp	r3, #16
 800260a:	d144      	bne.n	8002696 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	3344      	adds	r3, #68	@ 0x44
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002620:	78fa      	ldrb	r2, [r7, #3]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	334d      	adds	r3, #77	@ 0x4d
 8002630:	2204      	movs	r2, #4
 8002632:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	3319      	adds	r3, #25
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d114      	bne.n	8002674 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	1a9b      	subs	r3, r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	3318      	adds	r3, #24
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d109      	bne.n	8002674 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	3319      	adds	r3, #25
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f001 fe15 	bl	80042ac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4413      	add	r3, r2
 800268a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800268e:	461a      	mov	r2, r3
 8002690:	2310      	movs	r3, #16
 8002692:	6093      	str	r3, [r2, #8]
 8002694:	e2a7      	b.n	8002be6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	4611      	mov	r1, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	f001 fd87 	bl	80041b2 <USB_ReadChInterrupts>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026aa:	2b80      	cmp	r3, #128	@ 0x80
 80026ac:	f040 8083 	bne.w	80027b6 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	799b      	ldrb	r3, [r3, #6]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d111      	bne.n	80026dc <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80026b8:	78fa      	ldrb	r2, [r7, #3]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	1a9b      	subs	r3, r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	334d      	adds	r3, #77	@ 0x4d
 80026c8:	2207      	movs	r2, #7
 80026ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f001 fde9 	bl	80042ac <USB_HC_Halt>
 80026da:	e062      	b.n	80027a2 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80026dc:	78fa      	ldrb	r2, [r7, #3]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	1a9b      	subs	r3, r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	3344      	adds	r3, #68	@ 0x44
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	1c59      	adds	r1, r3, #1
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4403      	add	r3, r0
 80026fc:	3344      	adds	r3, #68	@ 0x44
 80026fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002700:	78fa      	ldrb	r2, [r7, #3]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	3344      	adds	r3, #68	@ 0x44
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d922      	bls.n	800275c <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002716:	78fa      	ldrb	r2, [r7, #3]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	3344      	adds	r3, #68	@ 0x44
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	334c      	adds	r3, #76	@ 0x4c
 800273a:	2204      	movs	r2, #4
 800273c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800273e:	78fa      	ldrb	r2, [r7, #3]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	1a9b      	subs	r3, r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	334c      	adds	r3, #76	@ 0x4c
 800274e:	781a      	ldrb	r2, [r3, #0]
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	4619      	mov	r1, r3
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f002 f828 	bl	80047aa <HAL_HCD_HC_NotifyURBChange_Callback>
 800275a:	e022      	b.n	80027a2 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	334c      	adds	r3, #76	@ 0x4c
 800276c:	2202      	movs	r2, #2
 800276e:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002786:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800278e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800279c:	461a      	mov	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80027a2:	78fb      	ldrb	r3, [r7, #3]
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ae:	461a      	mov	r2, r3
 80027b0:	2380      	movs	r3, #128	@ 0x80
 80027b2:	6093      	str	r3, [r2, #8]
 80027b4:	e217      	b.n	8002be6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f001 fcf7 	bl	80041b2 <USB_ReadChInterrupts>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ce:	d11b      	bne.n	8002808 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80027d0:	78fa      	ldrb	r2, [r7, #3]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	334d      	adds	r3, #77	@ 0x4d
 80027e0:	2209      	movs	r2, #9
 80027e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	78fa      	ldrb	r2, [r7, #3]
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f001 fd5d 	bl	80042ac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80027f2:	78fb      	ldrb	r3, [r7, #3]
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027fe:	461a      	mov	r2, r3
 8002800:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002804:	6093      	str	r3, [r2, #8]
 8002806:	e1ee      	b.n	8002be6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f001 fcce 	bl	80041b2 <USB_ReadChInterrupts>
 8002816:	4603      	mov	r3, r0
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b02      	cmp	r3, #2
 800281e:	f040 81df 	bne.w	8002be0 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002822:	78fb      	ldrb	r3, [r7, #3]
 8002824:	015a      	lsls	r2, r3, #5
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4413      	add	r3, r2
 800282a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800282e:	461a      	mov	r2, r3
 8002830:	2302      	movs	r3, #2
 8002832:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002834:	78fa      	ldrb	r2, [r7, #3]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	334d      	adds	r3, #77	@ 0x4d
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b01      	cmp	r3, #1
 8002848:	f040 8093 	bne.w	8002972 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800284c:	78fa      	ldrb	r2, [r7, #3]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	1a9b      	subs	r3, r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	334d      	adds	r3, #77	@ 0x4d
 800285c:	2202      	movs	r2, #2
 800285e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002860:	78fa      	ldrb	r2, [r7, #3]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	1a9b      	subs	r3, r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	334c      	adds	r3, #76	@ 0x4c
 8002870:	2201      	movs	r2, #1
 8002872:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	3326      	adds	r3, #38	@ 0x26
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d00b      	beq.n	80028a2 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800288a:	78fa      	ldrb	r2, [r7, #3]
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	1a9b      	subs	r3, r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	3326      	adds	r3, #38	@ 0x26
 800289a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800289c:	2b03      	cmp	r3, #3
 800289e:	f040 8190 	bne.w	8002bc2 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	799b      	ldrb	r3, [r3, #6]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d115      	bne.n	80028d6 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80028aa:	78fa      	ldrb	r2, [r7, #3]
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	1a9b      	subs	r3, r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	333d      	adds	r3, #61	@ 0x3d
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	f083 0301 	eor.w	r3, r3, #1
 80028c2:	b2d8      	uxtb	r0, r3
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	1a9b      	subs	r3, r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	440b      	add	r3, r1
 80028d0:	333d      	adds	r3, #61	@ 0x3d
 80028d2:	4602      	mov	r2, r0
 80028d4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	799b      	ldrb	r3, [r3, #6]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	f040 8171 	bne.w	8002bc2 <HCD_HC_OUT_IRQHandler+0x954>
 80028e0:	78fa      	ldrb	r2, [r7, #3]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	3334      	adds	r3, #52	@ 0x34
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 8165 	beq.w	8002bc2 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80028f8:	78fa      	ldrb	r2, [r7, #3]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	1a9b      	subs	r3, r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	3334      	adds	r3, #52	@ 0x34
 8002908:	6819      	ldr	r1, [r3, #0]
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	1a9b      	subs	r3, r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4403      	add	r3, r0
 8002918:	3328      	adds	r3, #40	@ 0x28
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	440b      	add	r3, r1
 800291e:	1e59      	subs	r1, r3, #1
 8002920:	78fa      	ldrb	r2, [r7, #3]
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4403      	add	r3, r0
 800292e:	3328      	adds	r3, #40	@ 0x28
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	fbb1 f3f3 	udiv	r3, r1, r3
 8002936:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 813f 	beq.w	8002bc2 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	333d      	adds	r3, #61	@ 0x3d
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	f083 0301 	eor.w	r3, r3, #1
 800295c:	b2d8      	uxtb	r0, r3
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	333d      	adds	r3, #61	@ 0x3d
 800296c:	4602      	mov	r2, r0
 800296e:	701a      	strb	r2, [r3, #0]
 8002970:	e127      	b.n	8002bc2 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002972:	78fa      	ldrb	r2, [r7, #3]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	334d      	adds	r3, #77	@ 0x4d
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d120      	bne.n	80029ca <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	334d      	adds	r3, #77	@ 0x4d
 8002998:	2202      	movs	r2, #2
 800299a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800299c:	78fa      	ldrb	r2, [r7, #3]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	331b      	adds	r3, #27
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	f040 8107 	bne.w	8002bc2 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	334c      	adds	r3, #76	@ 0x4c
 80029c4:	2202      	movs	r2, #2
 80029c6:	701a      	strb	r2, [r3, #0]
 80029c8:	e0fb      	b.n	8002bc2 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80029ca:	78fa      	ldrb	r2, [r7, #3]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	1a9b      	subs	r3, r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	334d      	adds	r3, #77	@ 0x4d
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d13a      	bne.n	8002a56 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029e0:	78fa      	ldrb	r2, [r7, #3]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	334d      	adds	r3, #77	@ 0x4d
 80029f0:	2202      	movs	r2, #2
 80029f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029f4:	78fa      	ldrb	r2, [r7, #3]
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	1a9b      	subs	r3, r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	334c      	adds	r3, #76	@ 0x4c
 8002a04:	2202      	movs	r2, #2
 8002a06:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002a08:	78fa      	ldrb	r2, [r7, #3]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	331b      	adds	r3, #27
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	f040 80d1 	bne.w	8002bc2 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	331b      	adds	r3, #27
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	0151      	lsls	r1, r2, #5
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	440a      	add	r2, r1
 8002a4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a52:	6053      	str	r3, [r2, #4]
 8002a54:	e0b5      	b.n	8002bc2 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	334d      	adds	r3, #77	@ 0x4d
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b05      	cmp	r3, #5
 8002a6a:	d114      	bne.n	8002a96 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a6c:	78fa      	ldrb	r2, [r7, #3]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	334d      	adds	r3, #77	@ 0x4d
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	334c      	adds	r3, #76	@ 0x4c
 8002a90:	2202      	movs	r2, #2
 8002a92:	701a      	strb	r2, [r3, #0]
 8002a94:	e095      	b.n	8002bc2 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	1a9b      	subs	r3, r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	334d      	adds	r3, #77	@ 0x4d
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b06      	cmp	r3, #6
 8002aaa:	d114      	bne.n	8002ad6 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002aac:	78fa      	ldrb	r2, [r7, #3]
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	334d      	adds	r3, #77	@ 0x4d
 8002abc:	2202      	movs	r2, #2
 8002abe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002ac0:	78fa      	ldrb	r2, [r7, #3]
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	334c      	adds	r3, #76	@ 0x4c
 8002ad0:	2205      	movs	r2, #5
 8002ad2:	701a      	strb	r2, [r3, #0]
 8002ad4:	e075      	b.n	8002bc2 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002ad6:	78fa      	ldrb	r2, [r7, #3]
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	1a9b      	subs	r3, r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	334d      	adds	r3, #77	@ 0x4d
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b07      	cmp	r3, #7
 8002aea:	d00a      	beq.n	8002b02 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002aec:	78fa      	ldrb	r2, [r7, #3]
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	334d      	adds	r3, #77	@ 0x4d
 8002afc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002afe:	2b09      	cmp	r3, #9
 8002b00:	d170      	bne.n	8002be4 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b02:	78fa      	ldrb	r2, [r7, #3]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	334d      	adds	r3, #77	@ 0x4d
 8002b12:	2202      	movs	r2, #2
 8002b14:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002b16:	78fa      	ldrb	r2, [r7, #3]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	1a9b      	subs	r3, r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	3344      	adds	r3, #68	@ 0x44
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	1c59      	adds	r1, r3, #1
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4403      	add	r3, r0
 8002b36:	3344      	adds	r3, #68	@ 0x44
 8002b38:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b3a:	78fa      	ldrb	r2, [r7, #3]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	1a9b      	subs	r3, r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	3344      	adds	r3, #68	@ 0x44
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d914      	bls.n	8002b7a <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002b50:	78fa      	ldrb	r2, [r7, #3]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	1a9b      	subs	r3, r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	3344      	adds	r3, #68	@ 0x44
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	334c      	adds	r3, #76	@ 0x4c
 8002b74:	2204      	movs	r2, #4
 8002b76:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b78:	e022      	b.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b7a:	78fa      	ldrb	r2, [r7, #3]
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	1a9b      	subs	r3, r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	334c      	adds	r3, #76	@ 0x4c
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b8e:	78fb      	ldrb	r3, [r7, #3]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002ba4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002bac:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002bae:	78fb      	ldrb	r3, [r7, #3]
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002bc0:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	334c      	adds	r3, #76	@ 0x4c
 8002bd2:	781a      	ldrb	r2, [r3, #0]
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f001 fde6 	bl	80047aa <HAL_HCD_HC_NotifyURBChange_Callback>
 8002bde:	e002      	b.n	8002be6 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8002be0:	bf00      	nop
 8002be2:	e000      	b.n	8002be6 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8002be4:	bf00      	nop
  }
}
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	@ 0x28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f003 030f 	and.w	r3, r3, #15
 8002c0c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	0c5b      	lsrs	r3, r3, #17
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	091b      	lsrs	r3, r3, #4
 8002c1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c20:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d004      	beq.n	8002c32 <HCD_RXQLVL_IRQHandler+0x46>
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2b05      	cmp	r3, #5
 8002c2c:	f000 80b6 	beq.w	8002d9c <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c30:	e0b7      	b.n	8002da2 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80b3 	beq.w	8002da0 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	1a9b      	subs	r3, r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	332c      	adds	r3, #44	@ 0x2c
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 80a7 	beq.w	8002da0 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4613      	mov	r3, r2
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	3338      	adds	r3, #56	@ 0x38
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	18d1      	adds	r1, r2, r3
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4403      	add	r3, r0
 8002c76:	3334      	adds	r3, #52	@ 0x34
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4299      	cmp	r1, r3
 8002c7c:	f200 8083 	bhi.w	8002d86 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	332c      	adds	r3, #44	@ 0x2c
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	b292      	uxth	r2, r2
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	f001 fa1e 	bl	80040dc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	1a9b      	subs	r3, r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	332c      	adds	r3, #44	@ 0x2c
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	18d1      	adds	r1, r2, r3
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	1a9b      	subs	r3, r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4403      	add	r3, r0
 8002cc4:	332c      	adds	r3, #44	@ 0x2c
 8002cc6:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	1a9b      	subs	r3, r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	3338      	adds	r3, #56	@ 0x38
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	18d1      	adds	r1, r2, r3
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	1a9b      	subs	r3, r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4403      	add	r3, r0
 8002cec:	3338      	adds	r3, #56	@ 0x38
 8002cee:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	0cdb      	lsrs	r3, r3, #19
 8002d00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d04:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	1a9b      	subs	r3, r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	3328      	adds	r3, #40	@ 0x28
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d13f      	bne.n	8002da0 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d03c      	beq.n	8002da0 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002d3c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d44:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d52:	461a      	mov	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	333c      	adds	r3, #60	@ 0x3c
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	f083 0301 	eor.w	r3, r3, #1
 8002d6e:	b2d8      	uxtb	r0, r3
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4613      	mov	r3, r2
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	333c      	adds	r3, #60	@ 0x3c
 8002d80:	4602      	mov	r2, r0
 8002d82:	701a      	strb	r2, [r3, #0]
      break;
 8002d84:	e00c      	b.n	8002da0 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	334c      	adds	r3, #76	@ 0x4c
 8002d96:	2204      	movs	r2, #4
 8002d98:	701a      	strb	r2, [r3, #0]
      break;
 8002d9a:	e001      	b.n	8002da0 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8002d9c:	bf00      	nop
 8002d9e:	e000      	b.n	8002da2 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8002da0:	bf00      	nop
  }
}
 8002da2:	bf00      	nop
 8002da4:	3728      	adds	r7, #40	@ 0x28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b086      	sub	sp, #24
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8002dd6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d10b      	bne.n	8002dfa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d102      	bne.n	8002df2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f001 fcc0 	bl	8004772 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f043 0302 	orr.w	r3, r3, #2
 8002df8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d132      	bne.n	8002e6a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f043 0308 	orr.w	r3, r3, #8
 8002e0a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d126      	bne.n	8002e64 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	7a5b      	ldrb	r3, [r3, #9]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d113      	bne.n	8002e46 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8002e24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e28:	d106      	bne.n	8002e38 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2102      	movs	r1, #2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f001 f9ed 	bl	8004210 <USB_InitFSLSPClkSel>
 8002e36:	e011      	b.n	8002e5c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f001 f9e6 	bl	8004210 <USB_InitFSLSPClkSel>
 8002e44:	e00a      	b.n	8002e5c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	79db      	ldrb	r3, [r3, #7]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d106      	bne.n	8002e5c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e54:	461a      	mov	r2, r3
 8002e56:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002e5a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f001 fcb2 	bl	80047c6 <HAL_HCD_PortEnabled_Callback>
 8002e62:	e002      	b.n	8002e6a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f001 fcbc 	bl	80047e2 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f003 0320 	and.w	r3, r3, #32
 8002e70:	2b20      	cmp	r3, #32
 8002e72:	d103      	bne.n	8002e7c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f043 0320 	orr.w	r3, r3, #32
 8002e7a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002e82:	461a      	mov	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	6013      	str	r3, [r2, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e267      	b.n	8003372 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d075      	beq.n	8002f9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002eae:	4b88      	ldr	r3, [pc, #544]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d00c      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eba:	4b85      	ldr	r3, [pc, #532]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d112      	bne.n	8002eec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ec6:	4b82      	ldr	r3, [pc, #520]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ece:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ed2:	d10b      	bne.n	8002eec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed4:	4b7e      	ldr	r3, [pc, #504]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d05b      	beq.n	8002f98 <HAL_RCC_OscConfig+0x108>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d157      	bne.n	8002f98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e242      	b.n	8003372 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ef4:	d106      	bne.n	8002f04 <HAL_RCC_OscConfig+0x74>
 8002ef6:	4b76      	ldr	r3, [pc, #472]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a75      	ldr	r2, [pc, #468]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 8002efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	e01d      	b.n	8002f40 <HAL_RCC_OscConfig+0xb0>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f0c:	d10c      	bne.n	8002f28 <HAL_RCC_OscConfig+0x98>
 8002f0e:	4b70      	ldr	r3, [pc, #448]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a6f      	ldr	r2, [pc, #444]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 8002f14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	4b6d      	ldr	r3, [pc, #436]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a6c      	ldr	r2, [pc, #432]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 8002f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	e00b      	b.n	8002f40 <HAL_RCC_OscConfig+0xb0>
 8002f28:	4b69      	ldr	r3, [pc, #420]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a68      	ldr	r2, [pc, #416]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 8002f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	4b66      	ldr	r3, [pc, #408]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a65      	ldr	r2, [pc, #404]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 8002f3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d013      	beq.n	8002f70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7fd ff3c 	bl	8000dc4 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f50:	f7fd ff38 	bl	8000dc4 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b64      	cmp	r3, #100	@ 0x64
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e207      	b.n	8003372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f62:	4b5b      	ldr	r3, [pc, #364]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0xc0>
 8002f6e:	e014      	b.n	8002f9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f70:	f7fd ff28 	bl	8000dc4 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f78:	f7fd ff24 	bl	8000dc4 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	@ 0x64
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e1f3      	b.n	8003372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8a:	4b51      	ldr	r3, [pc, #324]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0xe8>
 8002f96:	e000      	b.n	8002f9a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d063      	beq.n	800306e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00b      	beq.n	8002fca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fb2:	4b47      	ldr	r3, [pc, #284]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d11c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fbe:	4b44      	ldr	r3, [pc, #272]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d116      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fca:	4b41      	ldr	r3, [pc, #260]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d005      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x152>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d001      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e1c7      	b.n	8003372 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4937      	ldr	r1, [pc, #220]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff6:	e03a      	b.n	800306e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d020      	beq.n	8003042 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003000:	4b34      	ldr	r3, [pc, #208]	@ (80030d4 <HAL_RCC_OscConfig+0x244>)
 8003002:	2201      	movs	r2, #1
 8003004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003006:	f7fd fedd 	bl	8000dc4 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800300e:	f7fd fed9 	bl	8000dc4 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e1a8      	b.n	8003372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003020:	4b2b      	ldr	r3, [pc, #172]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0f0      	beq.n	800300e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302c:	4b28      	ldr	r3, [pc, #160]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4925      	ldr	r1, [pc, #148]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 800303c:	4313      	orrs	r3, r2
 800303e:	600b      	str	r3, [r1, #0]
 8003040:	e015      	b.n	800306e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003042:	4b24      	ldr	r3, [pc, #144]	@ (80030d4 <HAL_RCC_OscConfig+0x244>)
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003048:	f7fd febc 	bl	8000dc4 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003050:	f7fd feb8 	bl	8000dc4 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e187      	b.n	8003372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003062:	4b1b      	ldr	r3, [pc, #108]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f0      	bne.n	8003050 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d036      	beq.n	80030e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d016      	beq.n	80030b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003082:	4b15      	ldr	r3, [pc, #84]	@ (80030d8 <HAL_RCC_OscConfig+0x248>)
 8003084:	2201      	movs	r2, #1
 8003086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003088:	f7fd fe9c 	bl	8000dc4 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003090:	f7fd fe98 	bl	8000dc4 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e167      	b.n	8003372 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a2:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <HAL_RCC_OscConfig+0x240>)
 80030a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0f0      	beq.n	8003090 <HAL_RCC_OscConfig+0x200>
 80030ae:	e01b      	b.n	80030e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030b0:	4b09      	ldr	r3, [pc, #36]	@ (80030d8 <HAL_RCC_OscConfig+0x248>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b6:	f7fd fe85 	bl	8000dc4 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030bc:	e00e      	b.n	80030dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030be:	f7fd fe81 	bl	8000dc4 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d907      	bls.n	80030dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e150      	b.n	8003372 <HAL_RCC_OscConfig+0x4e2>
 80030d0:	40023800 	.word	0x40023800
 80030d4:	42470000 	.word	0x42470000
 80030d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030dc:	4b88      	ldr	r3, [pc, #544]	@ (8003300 <HAL_RCC_OscConfig+0x470>)
 80030de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1ea      	bne.n	80030be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 8097 	beq.w	8003224 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f6:	2300      	movs	r3, #0
 80030f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030fa:	4b81      	ldr	r3, [pc, #516]	@ (8003300 <HAL_RCC_OscConfig+0x470>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10f      	bne.n	8003126 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	4b7d      	ldr	r3, [pc, #500]	@ (8003300 <HAL_RCC_OscConfig+0x470>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	4a7c      	ldr	r2, [pc, #496]	@ (8003300 <HAL_RCC_OscConfig+0x470>)
 8003110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003114:	6413      	str	r3, [r2, #64]	@ 0x40
 8003116:	4b7a      	ldr	r3, [pc, #488]	@ (8003300 <HAL_RCC_OscConfig+0x470>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800311e:	60bb      	str	r3, [r7, #8]
 8003120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003122:	2301      	movs	r3, #1
 8003124:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003126:	4b77      	ldr	r3, [pc, #476]	@ (8003304 <HAL_RCC_OscConfig+0x474>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800312e:	2b00      	cmp	r3, #0
 8003130:	d118      	bne.n	8003164 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003132:	4b74      	ldr	r3, [pc, #464]	@ (8003304 <HAL_RCC_OscConfig+0x474>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a73      	ldr	r2, [pc, #460]	@ (8003304 <HAL_RCC_OscConfig+0x474>)
 8003138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800313c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800313e:	f7fd fe41 	bl	8000dc4 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003146:	f7fd fe3d 	bl	8000dc4 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e10c      	b.n	8003372 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003158:	4b6a      	ldr	r3, [pc, #424]	@ (8003304 <HAL_RCC_OscConfig+0x474>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0f0      	beq.n	8003146 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d106      	bne.n	800317a <HAL_RCC_OscConfig+0x2ea>
 800316c:	4b64      	ldr	r3, [pc, #400]	@ (8003300 <HAL_RCC_OscConfig+0x470>)
 800316e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003170:	4a63      	ldr	r2, [pc, #396]	@ (8003300 <HAL_RCC_OscConfig+0x470>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	6713      	str	r3, [r2, #112]	@ 0x70
 8003178:	e01c      	b.n	80031b4 <HAL_RCC_OscConfig+0x324>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b05      	cmp	r3, #5
 8003180:	d10c      	bne.n	800319c <HAL_RCC_OscConfig+0x30c>
 8003182:	4b5f      	ldr	r3, [pc, #380]	@ (8003300 <HAL_RCC_OscConfig+0x470>)
 8003184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003186:	4a5e      	ldr	r2, [pc, #376]	@ (8003300 <HAL_RCC_OscConfig+0x470>)
 8003188:	f043 0304 	orr.w	r3, r3, #4
 800318c:	6713      	str	r3, [r2, #112]	@ 0x70
 800318e:	4b5c      	ldr	r3, [pc, #368]	@ (8003300 <HAL_RCC_OscConfig+0x470>)
 8003190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003192:	4a5b      	ldr	r2, [pc, #364]	@ (8003300 <HAL_RCC_OscConfig+0x470>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	6713      	str	r3, [r2, #112]	@ 0x70
 800319a:	e00b      	b.n	80031b4 <HAL_RCC_OscConfig+0x324>
 800319c:	4b58      	ldr	r3, [pc, #352]	@ (8003300 <HAL_RCC_OscConfig+0x470>)
 800319e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a0:	4a57      	ldr	r2, [pc, #348]	@ (8003300 <HAL_RCC_OscConfig+0x470>)
 80031a2:	f023 0301 	bic.w	r3, r3, #1
 80031a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80031a8:	4b55      	ldr	r3, [pc, #340]	@ (8003300 <HAL_RCC_OscConfig+0x470>)
 80031aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ac:	4a54      	ldr	r2, [pc, #336]	@ (8003300 <HAL_RCC_OscConfig+0x470>)
 80031ae:	f023 0304 	bic.w	r3, r3, #4
 80031b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d015      	beq.n	80031e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031bc:	f7fd fe02 	bl	8000dc4 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c2:	e00a      	b.n	80031da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c4:	f7fd fdfe 	bl	8000dc4 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e0cb      	b.n	8003372 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031da:	4b49      	ldr	r3, [pc, #292]	@ (8003300 <HAL_RCC_OscConfig+0x470>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0ee      	beq.n	80031c4 <HAL_RCC_OscConfig+0x334>
 80031e6:	e014      	b.n	8003212 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e8:	f7fd fdec 	bl	8000dc4 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ee:	e00a      	b.n	8003206 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f0:	f7fd fde8 	bl	8000dc4 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031fe:	4293      	cmp	r3, r2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e0b5      	b.n	8003372 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003206:	4b3e      	ldr	r3, [pc, #248]	@ (8003300 <HAL_RCC_OscConfig+0x470>)
 8003208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1ee      	bne.n	80031f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003212:	7dfb      	ldrb	r3, [r7, #23]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d105      	bne.n	8003224 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003218:	4b39      	ldr	r3, [pc, #228]	@ (8003300 <HAL_RCC_OscConfig+0x470>)
 800321a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321c:	4a38      	ldr	r2, [pc, #224]	@ (8003300 <HAL_RCC_OscConfig+0x470>)
 800321e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003222:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 80a1 	beq.w	8003370 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800322e:	4b34      	ldr	r3, [pc, #208]	@ (8003300 <HAL_RCC_OscConfig+0x470>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 030c 	and.w	r3, r3, #12
 8003236:	2b08      	cmp	r3, #8
 8003238:	d05c      	beq.n	80032f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d141      	bne.n	80032c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003242:	4b31      	ldr	r3, [pc, #196]	@ (8003308 <HAL_RCC_OscConfig+0x478>)
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003248:	f7fd fdbc 	bl	8000dc4 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003250:	f7fd fdb8 	bl	8000dc4 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e087      	b.n	8003372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003262:	4b27      	ldr	r3, [pc, #156]	@ (8003300 <HAL_RCC_OscConfig+0x470>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f0      	bne.n	8003250 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69da      	ldr	r2, [r3, #28]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327c:	019b      	lsls	r3, r3, #6
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003284:	085b      	lsrs	r3, r3, #1
 8003286:	3b01      	subs	r3, #1
 8003288:	041b      	lsls	r3, r3, #16
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003290:	061b      	lsls	r3, r3, #24
 8003292:	491b      	ldr	r1, [pc, #108]	@ (8003300 <HAL_RCC_OscConfig+0x470>)
 8003294:	4313      	orrs	r3, r2
 8003296:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003298:	4b1b      	ldr	r3, [pc, #108]	@ (8003308 <HAL_RCC_OscConfig+0x478>)
 800329a:	2201      	movs	r2, #1
 800329c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329e:	f7fd fd91 	bl	8000dc4 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a6:	f7fd fd8d 	bl	8000dc4 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e05c      	b.n	8003372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b8:	4b11      	ldr	r3, [pc, #68]	@ (8003300 <HAL_RCC_OscConfig+0x470>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0f0      	beq.n	80032a6 <HAL_RCC_OscConfig+0x416>
 80032c4:	e054      	b.n	8003370 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c6:	4b10      	ldr	r3, [pc, #64]	@ (8003308 <HAL_RCC_OscConfig+0x478>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032cc:	f7fd fd7a 	bl	8000dc4 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d4:	f7fd fd76 	bl	8000dc4 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e045      	b.n	8003372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e6:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <HAL_RCC_OscConfig+0x470>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x444>
 80032f2:	e03d      	b.n	8003370 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d107      	bne.n	800330c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e038      	b.n	8003372 <HAL_RCC_OscConfig+0x4e2>
 8003300:	40023800 	.word	0x40023800
 8003304:	40007000 	.word	0x40007000
 8003308:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800330c:	4b1b      	ldr	r3, [pc, #108]	@ (800337c <HAL_RCC_OscConfig+0x4ec>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d028      	beq.n	800336c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003324:	429a      	cmp	r2, r3
 8003326:	d121      	bne.n	800336c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003332:	429a      	cmp	r2, r3
 8003334:	d11a      	bne.n	800336c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800333c:	4013      	ands	r3, r2
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003342:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003344:	4293      	cmp	r3, r2
 8003346:	d111      	bne.n	800336c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003352:	085b      	lsrs	r3, r3, #1
 8003354:	3b01      	subs	r3, #1
 8003356:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003358:	429a      	cmp	r2, r3
 800335a:	d107      	bne.n	800336c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003366:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003368:	429a      	cmp	r2, r3
 800336a:	d001      	beq.n	8003370 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800

08003380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e0cc      	b.n	800352e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003394:	4b68      	ldr	r3, [pc, #416]	@ (8003538 <HAL_RCC_ClockConfig+0x1b8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d90c      	bls.n	80033bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a2:	4b65      	ldr	r3, [pc, #404]	@ (8003538 <HAL_RCC_ClockConfig+0x1b8>)
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033aa:	4b63      	ldr	r3, [pc, #396]	@ (8003538 <HAL_RCC_ClockConfig+0x1b8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d001      	beq.n	80033bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0b8      	b.n	800352e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d020      	beq.n	800340a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033d4:	4b59      	ldr	r3, [pc, #356]	@ (800353c <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	4a58      	ldr	r2, [pc, #352]	@ (800353c <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033ec:	4b53      	ldr	r3, [pc, #332]	@ (800353c <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	4a52      	ldr	r2, [pc, #328]	@ (800353c <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f8:	4b50      	ldr	r3, [pc, #320]	@ (800353c <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	494d      	ldr	r1, [pc, #308]	@ (800353c <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	4313      	orrs	r3, r2
 8003408:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d044      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d107      	bne.n	800342e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341e:	4b47      	ldr	r3, [pc, #284]	@ (800353c <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d119      	bne.n	800345e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e07f      	b.n	800352e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d003      	beq.n	800343e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800343a:	2b03      	cmp	r3, #3
 800343c:	d107      	bne.n	800344e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343e:	4b3f      	ldr	r3, [pc, #252]	@ (800353c <HAL_RCC_ClockConfig+0x1bc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e06f      	b.n	800352e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344e:	4b3b      	ldr	r3, [pc, #236]	@ (800353c <HAL_RCC_ClockConfig+0x1bc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e067      	b.n	800352e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800345e:	4b37      	ldr	r3, [pc, #220]	@ (800353c <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f023 0203 	bic.w	r2, r3, #3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4934      	ldr	r1, [pc, #208]	@ (800353c <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	4313      	orrs	r3, r2
 800346e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003470:	f7fd fca8 	bl	8000dc4 <HAL_GetTick>
 8003474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003476:	e00a      	b.n	800348e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003478:	f7fd fca4 	bl	8000dc4 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003486:	4293      	cmp	r3, r2
 8003488:	d901      	bls.n	800348e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e04f      	b.n	800352e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348e:	4b2b      	ldr	r3, [pc, #172]	@ (800353c <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 020c 	and.w	r2, r3, #12
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	429a      	cmp	r2, r3
 800349e:	d1eb      	bne.n	8003478 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034a0:	4b25      	ldr	r3, [pc, #148]	@ (8003538 <HAL_RCC_ClockConfig+0x1b8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d20c      	bcs.n	80034c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ae:	4b22      	ldr	r3, [pc, #136]	@ (8003538 <HAL_RCC_ClockConfig+0x1b8>)
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b6:	4b20      	ldr	r3, [pc, #128]	@ (8003538 <HAL_RCC_ClockConfig+0x1b8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d001      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e032      	b.n	800352e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d4:	4b19      	ldr	r3, [pc, #100]	@ (800353c <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	4916      	ldr	r1, [pc, #88]	@ (800353c <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d009      	beq.n	8003506 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034f2:	4b12      	ldr	r3, [pc, #72]	@ (800353c <HAL_RCC_ClockConfig+0x1bc>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	490e      	ldr	r1, [pc, #56]	@ (800353c <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	4313      	orrs	r3, r2
 8003504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003506:	f000 f821 	bl	800354c <HAL_RCC_GetSysClockFreq>
 800350a:	4602      	mov	r2, r0
 800350c:	4b0b      	ldr	r3, [pc, #44]	@ (800353c <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	490a      	ldr	r1, [pc, #40]	@ (8003540 <HAL_RCC_ClockConfig+0x1c0>)
 8003518:	5ccb      	ldrb	r3, [r1, r3]
 800351a:	fa22 f303 	lsr.w	r3, r2, r3
 800351e:	4a09      	ldr	r2, [pc, #36]	@ (8003544 <HAL_RCC_ClockConfig+0x1c4>)
 8003520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003522:	4b09      	ldr	r3, [pc, #36]	@ (8003548 <HAL_RCC_ClockConfig+0x1c8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f7fd fc08 	bl	8000d3c <HAL_InitTick>

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40023c00 	.word	0x40023c00
 800353c:	40023800 	.word	0x40023800
 8003540:	08004910 	.word	0x08004910
 8003544:	20000138 	.word	0x20000138
 8003548:	200001a8 	.word	0x200001a8

0800354c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800354c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003550:	b094      	sub	sp, #80	@ 0x50
 8003552:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003564:	4b79      	ldr	r3, [pc, #484]	@ (800374c <HAL_RCC_GetSysClockFreq+0x200>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 030c 	and.w	r3, r3, #12
 800356c:	2b08      	cmp	r3, #8
 800356e:	d00d      	beq.n	800358c <HAL_RCC_GetSysClockFreq+0x40>
 8003570:	2b08      	cmp	r3, #8
 8003572:	f200 80e1 	bhi.w	8003738 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <HAL_RCC_GetSysClockFreq+0x34>
 800357a:	2b04      	cmp	r3, #4
 800357c:	d003      	beq.n	8003586 <HAL_RCC_GetSysClockFreq+0x3a>
 800357e:	e0db      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003580:	4b73      	ldr	r3, [pc, #460]	@ (8003750 <HAL_RCC_GetSysClockFreq+0x204>)
 8003582:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003584:	e0db      	b.n	800373e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003586:	4b73      	ldr	r3, [pc, #460]	@ (8003754 <HAL_RCC_GetSysClockFreq+0x208>)
 8003588:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800358a:	e0d8      	b.n	800373e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800358c:	4b6f      	ldr	r3, [pc, #444]	@ (800374c <HAL_RCC_GetSysClockFreq+0x200>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003594:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003596:	4b6d      	ldr	r3, [pc, #436]	@ (800374c <HAL_RCC_GetSysClockFreq+0x200>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d063      	beq.n	800366a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a2:	4b6a      	ldr	r3, [pc, #424]	@ (800374c <HAL_RCC_GetSysClockFreq+0x200>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	099b      	lsrs	r3, r3, #6
 80035a8:	2200      	movs	r2, #0
 80035aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80035ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80035b6:	2300      	movs	r3, #0
 80035b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80035ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80035be:	4622      	mov	r2, r4
 80035c0:	462b      	mov	r3, r5
 80035c2:	f04f 0000 	mov.w	r0, #0
 80035c6:	f04f 0100 	mov.w	r1, #0
 80035ca:	0159      	lsls	r1, r3, #5
 80035cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035d0:	0150      	lsls	r0, r2, #5
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4621      	mov	r1, r4
 80035d8:	1a51      	subs	r1, r2, r1
 80035da:	6139      	str	r1, [r7, #16]
 80035dc:	4629      	mov	r1, r5
 80035de:	eb63 0301 	sbc.w	r3, r3, r1
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035f0:	4659      	mov	r1, fp
 80035f2:	018b      	lsls	r3, r1, #6
 80035f4:	4651      	mov	r1, sl
 80035f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035fa:	4651      	mov	r1, sl
 80035fc:	018a      	lsls	r2, r1, #6
 80035fe:	4651      	mov	r1, sl
 8003600:	ebb2 0801 	subs.w	r8, r2, r1
 8003604:	4659      	mov	r1, fp
 8003606:	eb63 0901 	sbc.w	r9, r3, r1
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003616:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800361a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800361e:	4690      	mov	r8, r2
 8003620:	4699      	mov	r9, r3
 8003622:	4623      	mov	r3, r4
 8003624:	eb18 0303 	adds.w	r3, r8, r3
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	462b      	mov	r3, r5
 800362c:	eb49 0303 	adc.w	r3, r9, r3
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800363e:	4629      	mov	r1, r5
 8003640:	024b      	lsls	r3, r1, #9
 8003642:	4621      	mov	r1, r4
 8003644:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003648:	4621      	mov	r1, r4
 800364a:	024a      	lsls	r2, r1, #9
 800364c:	4610      	mov	r0, r2
 800364e:	4619      	mov	r1, r3
 8003650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003652:	2200      	movs	r2, #0
 8003654:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003656:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003658:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800365c:	f7fc fdb4 	bl	80001c8 <__aeabi_uldivmod>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4613      	mov	r3, r2
 8003666:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003668:	e058      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800366a:	4b38      	ldr	r3, [pc, #224]	@ (800374c <HAL_RCC_GetSysClockFreq+0x200>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	099b      	lsrs	r3, r3, #6
 8003670:	2200      	movs	r2, #0
 8003672:	4618      	mov	r0, r3
 8003674:	4611      	mov	r1, r2
 8003676:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800367a:	623b      	str	r3, [r7, #32]
 800367c:	2300      	movs	r3, #0
 800367e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003680:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003684:	4642      	mov	r2, r8
 8003686:	464b      	mov	r3, r9
 8003688:	f04f 0000 	mov.w	r0, #0
 800368c:	f04f 0100 	mov.w	r1, #0
 8003690:	0159      	lsls	r1, r3, #5
 8003692:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003696:	0150      	lsls	r0, r2, #5
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4641      	mov	r1, r8
 800369e:	ebb2 0a01 	subs.w	sl, r2, r1
 80036a2:	4649      	mov	r1, r9
 80036a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036bc:	ebb2 040a 	subs.w	r4, r2, sl
 80036c0:	eb63 050b 	sbc.w	r5, r3, fp
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	00eb      	lsls	r3, r5, #3
 80036ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036d2:	00e2      	lsls	r2, r4, #3
 80036d4:	4614      	mov	r4, r2
 80036d6:	461d      	mov	r5, r3
 80036d8:	4643      	mov	r3, r8
 80036da:	18e3      	adds	r3, r4, r3
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	464b      	mov	r3, r9
 80036e0:	eb45 0303 	adc.w	r3, r5, r3
 80036e4:	607b      	str	r3, [r7, #4]
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036f2:	4629      	mov	r1, r5
 80036f4:	028b      	lsls	r3, r1, #10
 80036f6:	4621      	mov	r1, r4
 80036f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036fc:	4621      	mov	r1, r4
 80036fe:	028a      	lsls	r2, r1, #10
 8003700:	4610      	mov	r0, r2
 8003702:	4619      	mov	r1, r3
 8003704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003706:	2200      	movs	r2, #0
 8003708:	61bb      	str	r3, [r7, #24]
 800370a:	61fa      	str	r2, [r7, #28]
 800370c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003710:	f7fc fd5a 	bl	80001c8 <__aeabi_uldivmod>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	4613      	mov	r3, r2
 800371a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800371c:	4b0b      	ldr	r3, [pc, #44]	@ (800374c <HAL_RCC_GetSysClockFreq+0x200>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	0c1b      	lsrs	r3, r3, #16
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	3301      	adds	r3, #1
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800372c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800372e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003730:	fbb2 f3f3 	udiv	r3, r2, r3
 8003734:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003736:	e002      	b.n	800373e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003738:	4b05      	ldr	r3, [pc, #20]	@ (8003750 <HAL_RCC_GetSysClockFreq+0x204>)
 800373a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800373c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800373e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003740:	4618      	mov	r0, r3
 8003742:	3750      	adds	r7, #80	@ 0x50
 8003744:	46bd      	mov	sp, r7
 8003746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800374a:	bf00      	nop
 800374c:	40023800 	.word	0x40023800
 8003750:	00f42400 	.word	0x00f42400
 8003754:	007a1200 	.word	0x007a1200

08003758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800375c:	4b03      	ldr	r3, [pc, #12]	@ (800376c <HAL_RCC_GetHCLKFreq+0x14>)
 800375e:	681b      	ldr	r3, [r3, #0]
}
 8003760:	4618      	mov	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	20000138 	.word	0x20000138

08003770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003774:	f7ff fff0 	bl	8003758 <HAL_RCC_GetHCLKFreq>
 8003778:	4602      	mov	r2, r0
 800377a:	4b05      	ldr	r3, [pc, #20]	@ (8003790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	0a9b      	lsrs	r3, r3, #10
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	4903      	ldr	r1, [pc, #12]	@ (8003794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003786:	5ccb      	ldrb	r3, [r1, r3]
 8003788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800378c:	4618      	mov	r0, r3
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40023800 	.word	0x40023800
 8003794:	08004920 	.word	0x08004920

08003798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800379c:	f7ff ffdc 	bl	8003758 <HAL_RCC_GetHCLKFreq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4b05      	ldr	r3, [pc, #20]	@ (80037b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	0b5b      	lsrs	r3, r3, #13
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	4903      	ldr	r1, [pc, #12]	@ (80037bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ae:	5ccb      	ldrb	r3, [r1, r3]
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40023800 	.word	0x40023800
 80037bc:	08004920 	.word	0x08004920

080037c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e042      	b.n	8003858 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fd fa14 	bl	8000c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2224      	movs	r2, #36	@ 0x24
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003802:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f973 	bl	8003af0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003818:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003828:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003838:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	@ 0x28
 8003864:	af02      	add	r7, sp, #8
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b20      	cmp	r3, #32
 800387e:	d175      	bne.n	800396c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <HAL_UART_Transmit+0x2c>
 8003886:	88fb      	ldrh	r3, [r7, #6]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e06e      	b.n	800396e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2221      	movs	r2, #33	@ 0x21
 800389a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800389e:	f7fd fa91 	bl	8000dc4 <HAL_GetTick>
 80038a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	88fa      	ldrh	r2, [r7, #6]
 80038a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	88fa      	ldrh	r2, [r7, #6]
 80038ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b8:	d108      	bne.n	80038cc <HAL_UART_Transmit+0x6c>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d104      	bne.n	80038cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	e003      	b.n	80038d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038d4:	e02e      	b.n	8003934 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2200      	movs	r2, #0
 80038de:	2180      	movs	r1, #128	@ 0x80
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 f848 	bl	8003976 <UART_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e03a      	b.n	800396e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10b      	bne.n	8003916 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800390c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	3302      	adds	r3, #2
 8003912:	61bb      	str	r3, [r7, #24]
 8003914:	e007      	b.n	8003926 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	781a      	ldrb	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	3301      	adds	r3, #1
 8003924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1cb      	bne.n	80038d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2200      	movs	r2, #0
 8003946:	2140      	movs	r1, #64	@ 0x40
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f814 	bl	8003976 <UART_WaitOnFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e006      	b.n	800396e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	e000      	b.n	800396e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800396c:	2302      	movs	r3, #2
  }
}
 800396e:	4618      	mov	r0, r3
 8003970:	3720      	adds	r7, #32
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b086      	sub	sp, #24
 800397a:	af00      	add	r7, sp, #0
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	603b      	str	r3, [r7, #0]
 8003982:	4613      	mov	r3, r2
 8003984:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003986:	e03b      	b.n	8003a00 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398e:	d037      	beq.n	8003a00 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003990:	f7fd fa18 	bl	8000dc4 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	6a3a      	ldr	r2, [r7, #32]
 800399c:	429a      	cmp	r2, r3
 800399e:	d302      	bcc.n	80039a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e03a      	b.n	8003a20 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d023      	beq.n	8003a00 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b80      	cmp	r3, #128	@ 0x80
 80039bc:	d020      	beq.n	8003a00 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b40      	cmp	r3, #64	@ 0x40
 80039c2:	d01d      	beq.n	8003a00 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d116      	bne.n	8003a00 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 f81d 	bl	8003a28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2208      	movs	r2, #8
 80039f2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e00f      	b.n	8003a20 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	bf0c      	ite	eq
 8003a10:	2301      	moveq	r3, #1
 8003a12:	2300      	movne	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	461a      	mov	r2, r3
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d0b4      	beq.n	8003988 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b095      	sub	sp, #84	@ 0x54
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	330c      	adds	r3, #12
 8003a36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a3a:	e853 3f00 	ldrex	r3, [r3]
 8003a3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	330c      	adds	r3, #12
 8003a4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a50:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a58:	e841 2300 	strex	r3, r2, [r1]
 8003a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1e5      	bne.n	8003a30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3314      	adds	r3, #20
 8003a6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	e853 3f00 	ldrex	r3, [r3]
 8003a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f023 0301 	bic.w	r3, r3, #1
 8003a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3314      	adds	r3, #20
 8003a82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e5      	bne.n	8003a64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d119      	bne.n	8003ad4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	330c      	adds	r3, #12
 8003aa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	e853 3f00 	ldrex	r3, [r3]
 8003aae:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f023 0310 	bic.w	r3, r3, #16
 8003ab6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	330c      	adds	r3, #12
 8003abe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ac0:	61ba      	str	r2, [r7, #24]
 8003ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac4:	6979      	ldr	r1, [r7, #20]
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	e841 2300 	strex	r3, r2, [r1]
 8003acc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e5      	bne.n	8003aa0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ae2:	bf00      	nop
 8003ae4:	3754      	adds	r7, #84	@ 0x54
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
	...

08003af0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af4:	b0c0      	sub	sp, #256	@ 0x100
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b0c:	68d9      	ldr	r1, [r3, #12]
 8003b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	ea40 0301 	orr.w	r3, r0, r1
 8003b18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b48:	f021 010c 	bic.w	r1, r1, #12
 8003b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b56:	430b      	orrs	r3, r1
 8003b58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b6a:	6999      	ldr	r1, [r3, #24]
 8003b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	ea40 0301 	orr.w	r3, r0, r1
 8003b76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	4b8f      	ldr	r3, [pc, #572]	@ (8003dbc <UART_SetConfig+0x2cc>)
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d005      	beq.n	8003b90 <UART_SetConfig+0xa0>
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	4b8d      	ldr	r3, [pc, #564]	@ (8003dc0 <UART_SetConfig+0x2d0>)
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d104      	bne.n	8003b9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b90:	f7ff fe02 	bl	8003798 <HAL_RCC_GetPCLK2Freq>
 8003b94:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b98:	e003      	b.n	8003ba2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b9a:	f7ff fde9 	bl	8003770 <HAL_RCC_GetPCLK1Freq>
 8003b9e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bac:	f040 810c 	bne.w	8003dc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003bba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003bbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003bc2:	4622      	mov	r2, r4
 8003bc4:	462b      	mov	r3, r5
 8003bc6:	1891      	adds	r1, r2, r2
 8003bc8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003bca:	415b      	adcs	r3, r3
 8003bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	eb12 0801 	adds.w	r8, r2, r1
 8003bd8:	4629      	mov	r1, r5
 8003bda:	eb43 0901 	adc.w	r9, r3, r1
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bf2:	4690      	mov	r8, r2
 8003bf4:	4699      	mov	r9, r3
 8003bf6:	4623      	mov	r3, r4
 8003bf8:	eb18 0303 	adds.w	r3, r8, r3
 8003bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c00:	462b      	mov	r3, r5
 8003c02:	eb49 0303 	adc.w	r3, r9, r3
 8003c06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c1e:	460b      	mov	r3, r1
 8003c20:	18db      	adds	r3, r3, r3
 8003c22:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c24:	4613      	mov	r3, r2
 8003c26:	eb42 0303 	adc.w	r3, r2, r3
 8003c2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c34:	f7fc fac8 	bl	80001c8 <__aeabi_uldivmod>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4b61      	ldr	r3, [pc, #388]	@ (8003dc4 <UART_SetConfig+0x2d4>)
 8003c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	011c      	lsls	r4, r3, #4
 8003c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c58:	4642      	mov	r2, r8
 8003c5a:	464b      	mov	r3, r9
 8003c5c:	1891      	adds	r1, r2, r2
 8003c5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c60:	415b      	adcs	r3, r3
 8003c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c68:	4641      	mov	r1, r8
 8003c6a:	eb12 0a01 	adds.w	sl, r2, r1
 8003c6e:	4649      	mov	r1, r9
 8003c70:	eb43 0b01 	adc.w	fp, r3, r1
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c88:	4692      	mov	sl, r2
 8003c8a:	469b      	mov	fp, r3
 8003c8c:	4643      	mov	r3, r8
 8003c8e:	eb1a 0303 	adds.w	r3, sl, r3
 8003c92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c96:	464b      	mov	r3, r9
 8003c98:	eb4b 0303 	adc.w	r3, fp, r3
 8003c9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003cb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	18db      	adds	r3, r3, r3
 8003cb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cba:	4613      	mov	r3, r2
 8003cbc:	eb42 0303 	adc.w	r3, r2, r3
 8003cc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003cc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003cca:	f7fc fa7d 	bl	80001c8 <__aeabi_uldivmod>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	4b3b      	ldr	r3, [pc, #236]	@ (8003dc4 <UART_SetConfig+0x2d4>)
 8003cd6:	fba3 2301 	umull	r2, r3, r3, r1
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	2264      	movs	r2, #100	@ 0x64
 8003cde:	fb02 f303 	mul.w	r3, r2, r3
 8003ce2:	1acb      	subs	r3, r1, r3
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003cea:	4b36      	ldr	r3, [pc, #216]	@ (8003dc4 <UART_SetConfig+0x2d4>)
 8003cec:	fba3 2302 	umull	r2, r3, r3, r2
 8003cf0:	095b      	lsrs	r3, r3, #5
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003cf8:	441c      	add	r4, r3
 8003cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d04:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d0c:	4642      	mov	r2, r8
 8003d0e:	464b      	mov	r3, r9
 8003d10:	1891      	adds	r1, r2, r2
 8003d12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d14:	415b      	adcs	r3, r3
 8003d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d1c:	4641      	mov	r1, r8
 8003d1e:	1851      	adds	r1, r2, r1
 8003d20:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d22:	4649      	mov	r1, r9
 8003d24:	414b      	adcs	r3, r1
 8003d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d34:	4659      	mov	r1, fp
 8003d36:	00cb      	lsls	r3, r1, #3
 8003d38:	4651      	mov	r1, sl
 8003d3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d3e:	4651      	mov	r1, sl
 8003d40:	00ca      	lsls	r2, r1, #3
 8003d42:	4610      	mov	r0, r2
 8003d44:	4619      	mov	r1, r3
 8003d46:	4603      	mov	r3, r0
 8003d48:	4642      	mov	r2, r8
 8003d4a:	189b      	adds	r3, r3, r2
 8003d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d50:	464b      	mov	r3, r9
 8003d52:	460a      	mov	r2, r1
 8003d54:	eb42 0303 	adc.w	r3, r2, r3
 8003d58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d68:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d70:	460b      	mov	r3, r1
 8003d72:	18db      	adds	r3, r3, r3
 8003d74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d76:	4613      	mov	r3, r2
 8003d78:	eb42 0303 	adc.w	r3, r2, r3
 8003d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d86:	f7fc fa1f 	bl	80001c8 <__aeabi_uldivmod>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc4 <UART_SetConfig+0x2d4>)
 8003d90:	fba3 1302 	umull	r1, r3, r3, r2
 8003d94:	095b      	lsrs	r3, r3, #5
 8003d96:	2164      	movs	r1, #100	@ 0x64
 8003d98:	fb01 f303 	mul.w	r3, r1, r3
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	3332      	adds	r3, #50	@ 0x32
 8003da2:	4a08      	ldr	r2, [pc, #32]	@ (8003dc4 <UART_SetConfig+0x2d4>)
 8003da4:	fba2 2303 	umull	r2, r3, r2, r3
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	f003 0207 	and.w	r2, r3, #7
 8003dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4422      	add	r2, r4
 8003db6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003db8:	e106      	b.n	8003fc8 <UART_SetConfig+0x4d8>
 8003dba:	bf00      	nop
 8003dbc:	40011000 	.word	0x40011000
 8003dc0:	40011400 	.word	0x40011400
 8003dc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003dd2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003dd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003dda:	4642      	mov	r2, r8
 8003ddc:	464b      	mov	r3, r9
 8003dde:	1891      	adds	r1, r2, r2
 8003de0:	6239      	str	r1, [r7, #32]
 8003de2:	415b      	adcs	r3, r3
 8003de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003de6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dea:	4641      	mov	r1, r8
 8003dec:	1854      	adds	r4, r2, r1
 8003dee:	4649      	mov	r1, r9
 8003df0:	eb43 0501 	adc.w	r5, r3, r1
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	00eb      	lsls	r3, r5, #3
 8003dfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e02:	00e2      	lsls	r2, r4, #3
 8003e04:	4614      	mov	r4, r2
 8003e06:	461d      	mov	r5, r3
 8003e08:	4643      	mov	r3, r8
 8003e0a:	18e3      	adds	r3, r4, r3
 8003e0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e10:	464b      	mov	r3, r9
 8003e12:	eb45 0303 	adc.w	r3, r5, r3
 8003e16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e36:	4629      	mov	r1, r5
 8003e38:	008b      	lsls	r3, r1, #2
 8003e3a:	4621      	mov	r1, r4
 8003e3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e40:	4621      	mov	r1, r4
 8003e42:	008a      	lsls	r2, r1, #2
 8003e44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e48:	f7fc f9be 	bl	80001c8 <__aeabi_uldivmod>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4b60      	ldr	r3, [pc, #384]	@ (8003fd4 <UART_SetConfig+0x4e4>)
 8003e52:	fba3 2302 	umull	r2, r3, r3, r2
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	011c      	lsls	r4, r3, #4
 8003e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e6c:	4642      	mov	r2, r8
 8003e6e:	464b      	mov	r3, r9
 8003e70:	1891      	adds	r1, r2, r2
 8003e72:	61b9      	str	r1, [r7, #24]
 8003e74:	415b      	adcs	r3, r3
 8003e76:	61fb      	str	r3, [r7, #28]
 8003e78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e7c:	4641      	mov	r1, r8
 8003e7e:	1851      	adds	r1, r2, r1
 8003e80:	6139      	str	r1, [r7, #16]
 8003e82:	4649      	mov	r1, r9
 8003e84:	414b      	adcs	r3, r1
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e94:	4659      	mov	r1, fp
 8003e96:	00cb      	lsls	r3, r1, #3
 8003e98:	4651      	mov	r1, sl
 8003e9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e9e:	4651      	mov	r1, sl
 8003ea0:	00ca      	lsls	r2, r1, #3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	4642      	mov	r2, r8
 8003eaa:	189b      	adds	r3, r3, r2
 8003eac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003eb0:	464b      	mov	r3, r9
 8003eb2:	460a      	mov	r2, r1
 8003eb4:	eb42 0303 	adc.w	r3, r2, r3
 8003eb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ec6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ed4:	4649      	mov	r1, r9
 8003ed6:	008b      	lsls	r3, r1, #2
 8003ed8:	4641      	mov	r1, r8
 8003eda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ede:	4641      	mov	r1, r8
 8003ee0:	008a      	lsls	r2, r1, #2
 8003ee2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003ee6:	f7fc f96f 	bl	80001c8 <__aeabi_uldivmod>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4611      	mov	r1, r2
 8003ef0:	4b38      	ldr	r3, [pc, #224]	@ (8003fd4 <UART_SetConfig+0x4e4>)
 8003ef2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	2264      	movs	r2, #100	@ 0x64
 8003efa:	fb02 f303 	mul.w	r3, r2, r3
 8003efe:	1acb      	subs	r3, r1, r3
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	3332      	adds	r3, #50	@ 0x32
 8003f04:	4a33      	ldr	r2, [pc, #204]	@ (8003fd4 <UART_SetConfig+0x4e4>)
 8003f06:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f10:	441c      	add	r4, r3
 8003f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f16:	2200      	movs	r2, #0
 8003f18:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f1a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f20:	4642      	mov	r2, r8
 8003f22:	464b      	mov	r3, r9
 8003f24:	1891      	adds	r1, r2, r2
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	415b      	adcs	r3, r3
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f30:	4641      	mov	r1, r8
 8003f32:	1851      	adds	r1, r2, r1
 8003f34:	6039      	str	r1, [r7, #0]
 8003f36:	4649      	mov	r1, r9
 8003f38:	414b      	adcs	r3, r1
 8003f3a:	607b      	str	r3, [r7, #4]
 8003f3c:	f04f 0200 	mov.w	r2, #0
 8003f40:	f04f 0300 	mov.w	r3, #0
 8003f44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f48:	4659      	mov	r1, fp
 8003f4a:	00cb      	lsls	r3, r1, #3
 8003f4c:	4651      	mov	r1, sl
 8003f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f52:	4651      	mov	r1, sl
 8003f54:	00ca      	lsls	r2, r1, #3
 8003f56:	4610      	mov	r0, r2
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4642      	mov	r2, r8
 8003f5e:	189b      	adds	r3, r3, r2
 8003f60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f62:	464b      	mov	r3, r9
 8003f64:	460a      	mov	r2, r1
 8003f66:	eb42 0303 	adc.w	r3, r2, r3
 8003f6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f76:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f84:	4649      	mov	r1, r9
 8003f86:	008b      	lsls	r3, r1, #2
 8003f88:	4641      	mov	r1, r8
 8003f8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f8e:	4641      	mov	r1, r8
 8003f90:	008a      	lsls	r2, r1, #2
 8003f92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f96:	f7fc f917 	bl	80001c8 <__aeabi_uldivmod>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd4 <UART_SetConfig+0x4e4>)
 8003fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	2164      	movs	r1, #100	@ 0x64
 8003fa8:	fb01 f303 	mul.w	r3, r1, r3
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	3332      	adds	r3, #50	@ 0x32
 8003fb2:	4a08      	ldr	r2, [pc, #32]	@ (8003fd4 <UART_SetConfig+0x4e4>)
 8003fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb8:	095b      	lsrs	r3, r3, #5
 8003fba:	f003 020f 	and.w	r2, r3, #15
 8003fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4422      	add	r2, r4
 8003fc6:	609a      	str	r2, [r3, #8]
}
 8003fc8:	bf00      	nop
 8003fca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fd4:	51eb851f 	.word	0x51eb851f

08003fd8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f043 0201 	orr.w	r2, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f023 0201 	bic.w	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	3301      	adds	r3, #1
 800402e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004036:	d901      	bls.n	800403c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e01b      	b.n	8004074 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	daf2      	bge.n	800402a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	019b      	lsls	r3, r3, #6
 800404c:	f043 0220 	orr.w	r2, r3, #32
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	3301      	adds	r3, #1
 8004058:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004060:	d901      	bls.n	8004066 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e006      	b.n	8004074 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b20      	cmp	r3, #32
 8004070:	d0f0      	beq.n	8004054 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004088:	2300      	movs	r3, #0
 800408a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3301      	adds	r3, #1
 8004090:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004098:	d901      	bls.n	800409e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e018      	b.n	80040d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	daf2      	bge.n	800408c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2210      	movs	r2, #16
 80040ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	3301      	adds	r3, #1
 80040b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80040bc:	d901      	bls.n	80040c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e006      	b.n	80040d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f003 0310 	and.w	r3, r3, #16
 80040ca:	2b10      	cmp	r3, #16
 80040cc:	d0f0      	beq.n	80040b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80040dc:	b480      	push	{r7}
 80040de:	b08b      	sub	sp, #44	@ 0x2c
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	4613      	mov	r3, r2
 80040e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80040f2:	88fb      	ldrh	r3, [r7, #6]
 80040f4:	089b      	lsrs	r3, r3, #2
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80040fa:	88fb      	ldrh	r3, [r7, #6]
 80040fc:	f003 0303 	and.w	r3, r3, #3
 8004100:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004102:	2300      	movs	r3, #0
 8004104:	623b      	str	r3, [r7, #32]
 8004106:	e014      	b.n	8004132 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004112:	601a      	str	r2, [r3, #0]
    pDest++;
 8004114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004116:	3301      	adds	r3, #1
 8004118:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	3301      	adds	r3, #1
 800411e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004122:	3301      	adds	r3, #1
 8004124:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004128:	3301      	adds	r3, #1
 800412a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	3301      	adds	r3, #1
 8004130:	623b      	str	r3, [r7, #32]
 8004132:	6a3a      	ldr	r2, [r7, #32]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	429a      	cmp	r2, r3
 8004138:	d3e6      	bcc.n	8004108 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800413a:	8bfb      	ldrh	r3, [r7, #30]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d01e      	beq.n	800417e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800414a:	461a      	mov	r2, r3
 800414c:	f107 0310 	add.w	r3, r7, #16
 8004150:	6812      	ldr	r2, [r2, #0]
 8004152:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	b2db      	uxtb	r3, r3
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	fa22 f303 	lsr.w	r3, r2, r3
 8004160:	b2da      	uxtb	r2, r3
 8004162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004164:	701a      	strb	r2, [r3, #0]
      i++;
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	3301      	adds	r3, #1
 800416a:	623b      	str	r3, [r7, #32]
      pDest++;
 800416c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416e:	3301      	adds	r3, #1
 8004170:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004172:	8bfb      	ldrh	r3, [r7, #30]
 8004174:	3b01      	subs	r3, #1
 8004176:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004178:	8bfb      	ldrh	r3, [r7, #30]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1ea      	bne.n	8004154 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800417e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004180:	4618      	mov	r0, r3
 8004182:	372c      	adds	r7, #44	@ 0x2c
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4013      	ands	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80041a4:	68fb      	ldr	r3, [r7, #12]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b085      	sub	sp, #20
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	460b      	mov	r3, r1
 80041bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80041c2:	78fb      	ldrb	r3, [r7, #3]
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	4013      	ands	r3, r2
 80041e4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80041e6:	68bb      	ldr	r3, [r7, #8]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	f003 0301 	and.w	r3, r3, #1
}
 8004204:	4618      	mov	r0, r3
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800422e:	f023 0303 	bic.w	r3, r3, #3
 8004232:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	78fb      	ldrb	r3, [r7, #3]
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	68f9      	ldr	r1, [r7, #12]
 8004244:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004248:	4313      	orrs	r3, r2
 800424a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800424c:	78fb      	ldrb	r3, [r7, #3]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d107      	bne.n	8004262 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004258:	461a      	mov	r2, r3
 800425a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800425e:	6053      	str	r3, [r2, #4]
 8004260:	e00c      	b.n	800427c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	2b02      	cmp	r3, #2
 8004266:	d107      	bne.n	8004278 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800426e:	461a      	mov	r2, r3
 8004270:	f241 7370 	movw	r3, #6000	@ 0x1770
 8004274:	6053      	str	r3, [r2, #4]
 8004276:	e001      	b.n	800427c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e000      	b.n	800427e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800428a:	b480      	push	{r7}
 800428c:	b085      	sub	sp, #20
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	b29b      	uxth	r3, r3
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b089      	sub	sp, #36	@ 0x24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	460b      	mov	r3, r1
 80042b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	0c9b      	lsrs	r3, r3, #18
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	0fdb      	lsrs	r3, r3, #31
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	0fdb      	lsrs	r3, r3, #31
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b20      	cmp	r3, #32
 8004310:	d10d      	bne.n	800432e <USB_HC_Halt+0x82>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10a      	bne.n	800432e <USB_HC_Halt+0x82>
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d005      	beq.n	800432a <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d002      	beq.n	800432a <USB_HC_Halt+0x7e>
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2b03      	cmp	r3, #3
 8004328:	d101      	bne.n	800432e <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	e0d8      	b.n	80044e0 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <USB_HC_Halt+0x8e>
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d173      	bne.n	8004422 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	4413      	add	r3, r2
 8004342:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	0151      	lsls	r1, r2, #5
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	440a      	add	r2, r1
 8004350:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004354:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004358:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 0320 	and.w	r3, r3, #32
 8004362:	2b00      	cmp	r3, #0
 8004364:	d14a      	bne.n	80043fc <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d133      	bne.n	80043da <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	4413      	add	r3, r2
 800437a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	0151      	lsls	r1, r2, #5
 8004384:	69fa      	ldr	r2, [r7, #28]
 8004386:	440a      	add	r2, r1
 8004388:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800438c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004390:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	4413      	add	r3, r2
 800439a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	0151      	lsls	r1, r2, #5
 80043a4:	69fa      	ldr	r2, [r7, #28]
 80043a6:	440a      	add	r2, r1
 80043a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80043b0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	3301      	adds	r3, #1
 80043b6:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80043be:	d82e      	bhi.n	800441e <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043d6:	d0ec      	beq.n	80043b2 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80043d8:	e081      	b.n	80044de <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	0151      	lsls	r1, r2, #5
 80043ec:	69fa      	ldr	r2, [r7, #28]
 80043ee:	440a      	add	r2, r1
 80043f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80043f8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80043fa:	e070      	b.n	80044de <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	4413      	add	r3, r2
 8004404:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	0151      	lsls	r1, r2, #5
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	440a      	add	r2, r1
 8004412:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004416:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800441a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800441c:	e05f      	b.n	80044de <USB_HC_Halt+0x232>
            break;
 800441e:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004420:	e05d      	b.n	80044de <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	4413      	add	r3, r2
 800442a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	0151      	lsls	r1, r2, #5
 8004434:	69fa      	ldr	r2, [r7, #28]
 8004436:	440a      	add	r2, r1
 8004438:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800443c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004440:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d133      	bne.n	80044ba <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	4413      	add	r3, r2
 800445a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	0151      	lsls	r1, r2, #5
 8004464:	69fa      	ldr	r2, [r7, #28]
 8004466:	440a      	add	r2, r1
 8004468:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800446c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004470:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	4413      	add	r3, r2
 800447a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	0151      	lsls	r1, r2, #5
 8004484:	69fa      	ldr	r2, [r7, #28]
 8004486:	440a      	add	r2, r1
 8004488:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800448c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004490:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	3301      	adds	r3, #1
 8004496:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800449e:	d81d      	bhi.n	80044dc <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044b6:	d0ec      	beq.n	8004492 <USB_HC_Halt+0x1e6>
 80044b8:	e011      	b.n	80044de <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	0151      	lsls	r1, r2, #5
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	440a      	add	r2, r1
 80044d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80044d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	e000      	b.n	80044de <USB_HC_Halt+0x232>
          break;
 80044dc:	bf00      	nop
    }
  }

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3724      	adds	r7, #36	@ 0x24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b088      	sub	sp, #32
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff fd7a 	bl	8003ffa <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004506:	2110      	movs	r1, #16
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff fd87 	bl	800401c <USB_FlushTxFifo>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7ff fdb1 	bl	8004080 <USB_FlushRxFifo>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004528:	2300      	movs	r3, #0
 800452a:	61bb      	str	r3, [r7, #24]
 800452c:	e01f      	b.n	800456e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	4413      	add	r3, r2
 8004536:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004544:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800454c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004554:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	4413      	add	r3, r2
 800455e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004562:	461a      	mov	r2, r3
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	3301      	adds	r3, #1
 800456c:	61bb      	str	r3, [r7, #24]
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	2b0f      	cmp	r3, #15
 8004572:	d9dc      	bls.n	800452e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004574:	2300      	movs	r3, #0
 8004576:	61bb      	str	r3, [r7, #24]
 8004578:	e034      	b.n	80045e4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	4413      	add	r3, r2
 8004582:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004590:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004598:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80045a0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045ae:	461a      	mov	r2, r3
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3301      	adds	r3, #1
 80045b8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045c0:	d80c      	bhi.n	80045dc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045d8:	d0ec      	beq.n	80045b4 <USB_StopHost+0xc8>
 80045da:	e000      	b.n	80045de <USB_StopHost+0xf2>
        break;
 80045dc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	3301      	adds	r3, #1
 80045e2:	61bb      	str	r3, [r7, #24]
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	2b0f      	cmp	r3, #15
 80045e8:	d9c7      	bls.n	800457a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045f0:	461a      	mov	r2, r3
 80045f2:	f04f 33ff 	mov.w	r3, #4294967295
 80045f6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f04f 32ff 	mov.w	r2, #4294967295
 80045fe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff fce9 	bl	8003fd8 <USB_EnableGlobalInt>

  return ret;
 8004606:	7ffb      	ldrb	r3, [r7, #31]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3720      	adds	r7, #32
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f804 	bl	8004634 <USBH_HandleSof>
}
 800462c:	bf00      	nop
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b0b      	cmp	r3, #11
 8004644:	d10a      	bne.n	800465c <USBH_HandleSof+0x28>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	4798      	blx	r3
  }
}
 800465c:	bf00      	nop
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8004674:	bf00      	nop
}
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8004698:	bf00      	nop
}
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b082      	sub	sp, #8
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f883 	bl	80047fe <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	791b      	ldrb	r3, [r3, #4]
 80046fc:	4619      	mov	r1, r3
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f80b 	bl	800471a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	795b      	ldrb	r3, [r3, #5]
 8004708:	4619      	mov	r1, r3
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f805 	bl	800471a <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	460b      	mov	r3, r1
 8004724:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8004726:	78fb      	ldrb	r3, [r7, #3]
 8004728:	2b0f      	cmp	r3, #15
 800472a:	d80d      	bhi.n	8004748 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800472c:	78fb      	ldrb	r3, [r7, #3]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	33e0      	adds	r3, #224	@ 0xe0
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	33e0      	adds	r3, #224	@ 0xe0
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	440b      	add	r3, r1
 8004746:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b082      	sub	sp, #8
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff ff53 	bl	8004610 <USBH_LL_IncTimer>
}
 800476a:	bf00      	nop
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b082      	sub	sp, #8
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff ff8f 	bl	80046a4 <USBH_LL_Connect>
}
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b082      	sub	sp, #8
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff ff98 	bl	80046d2 <USBH_LL_Disconnect>
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
 80047b2:	460b      	mov	r3, r1
 80047b4:	70fb      	strb	r3, [r7, #3]
 80047b6:	4613      	mov	r3, r2
 80047b8:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b082      	sub	sp, #8
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff ff45 	bl	8004664 <USBH_LL_PortEnabled>
}
 80047da:	bf00      	nop
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b082      	sub	sp, #8
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff ff45 	bl	8004680 <USBH_LL_PortDisabled>
}
 80047f6:	bf00      	nop
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b084      	sub	sp, #16
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8004814:	4618      	mov	r0, r3
 8004816:	f7fc fea4 	bl	8001562 <HAL_HCD_Stop>
 800481a:	4603      	mov	r3, r0
 800481c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800481e:	7bfb      	ldrb	r3, [r7, #15]
 8004820:	4618      	mov	r0, r3
 8004822:	f000 f807 	bl	8004834 <USBH_Get_USB_Status>
 8004826:	4603      	mov	r3, r0
 8004828:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800482a:	7bbb      	ldrb	r3, [r7, #14]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	4603      	mov	r3, r0
 800483c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	2b03      	cmp	r3, #3
 8004846:	d817      	bhi.n	8004878 <USBH_Get_USB_Status+0x44>
 8004848:	a201      	add	r2, pc, #4	@ (adr r2, 8004850 <USBH_Get_USB_Status+0x1c>)
 800484a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484e:	bf00      	nop
 8004850:	08004861 	.word	0x08004861
 8004854:	08004867 	.word	0x08004867
 8004858:	0800486d 	.word	0x0800486d
 800485c:	08004873 	.word	0x08004873
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8004860:	2300      	movs	r3, #0
 8004862:	73fb      	strb	r3, [r7, #15]
    break;
 8004864:	e00b      	b.n	800487e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8004866:	2302      	movs	r3, #2
 8004868:	73fb      	strb	r3, [r7, #15]
    break;
 800486a:	e008      	b.n	800487e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800486c:	2301      	movs	r3, #1
 800486e:	73fb      	strb	r3, [r7, #15]
    break;
 8004870:	e005      	b.n	800487e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8004872:	2302      	movs	r3, #2
 8004874:	73fb      	strb	r3, [r7, #15]
    break;
 8004876:	e002      	b.n	800487e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8004878:	2302      	movs	r3, #2
 800487a:	73fb      	strb	r3, [r7, #15]
    break;
 800487c:	bf00      	nop
  }
  return usb_status;
 800487e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <memset>:
 800488c:	4402      	add	r2, r0
 800488e:	4603      	mov	r3, r0
 8004890:	4293      	cmp	r3, r2
 8004892:	d100      	bne.n	8004896 <memset+0xa>
 8004894:	4770      	bx	lr
 8004896:	f803 1b01 	strb.w	r1, [r3], #1
 800489a:	e7f9      	b.n	8004890 <memset+0x4>

0800489c <__libc_init_array>:
 800489c:	b570      	push	{r4, r5, r6, lr}
 800489e:	4d0d      	ldr	r5, [pc, #52]	@ (80048d4 <__libc_init_array+0x38>)
 80048a0:	4c0d      	ldr	r4, [pc, #52]	@ (80048d8 <__libc_init_array+0x3c>)
 80048a2:	1b64      	subs	r4, r4, r5
 80048a4:	10a4      	asrs	r4, r4, #2
 80048a6:	2600      	movs	r6, #0
 80048a8:	42a6      	cmp	r6, r4
 80048aa:	d109      	bne.n	80048c0 <__libc_init_array+0x24>
 80048ac:	4d0b      	ldr	r5, [pc, #44]	@ (80048dc <__libc_init_array+0x40>)
 80048ae:	4c0c      	ldr	r4, [pc, #48]	@ (80048e0 <__libc_init_array+0x44>)
 80048b0:	f000 f818 	bl	80048e4 <_init>
 80048b4:	1b64      	subs	r4, r4, r5
 80048b6:	10a4      	asrs	r4, r4, #2
 80048b8:	2600      	movs	r6, #0
 80048ba:	42a6      	cmp	r6, r4
 80048bc:	d105      	bne.n	80048ca <__libc_init_array+0x2e>
 80048be:	bd70      	pop	{r4, r5, r6, pc}
 80048c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c4:	4798      	blx	r3
 80048c6:	3601      	adds	r6, #1
 80048c8:	e7ee      	b.n	80048a8 <__libc_init_array+0xc>
 80048ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ce:	4798      	blx	r3
 80048d0:	3601      	adds	r6, #1
 80048d2:	e7f2      	b.n	80048ba <__libc_init_array+0x1e>
 80048d4:	08004930 	.word	0x08004930
 80048d8:	08004930 	.word	0x08004930
 80048dc:	08004930 	.word	0x08004930
 80048e0:	08004934 	.word	0x08004934

080048e4 <_init>:
 80048e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e6:	bf00      	nop
 80048e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ea:	bc08      	pop	{r3}
 80048ec:	469e      	mov	lr, r3
 80048ee:	4770      	bx	lr

080048f0 <_fini>:
 80048f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f2:	bf00      	nop
 80048f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048f6:	bc08      	pop	{r3}
 80048f8:	469e      	mov	lr, r3
 80048fa:	4770      	bx	lr
