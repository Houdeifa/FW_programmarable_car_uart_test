
UART_programmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045c8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004750  08004750  00005750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800477c  0800477c  00006144  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800477c  0800477c  0000577c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004784  08004784  00006144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004784  08004784  00005784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004788  08004788  00005788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000144  20000000  0800478c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006144  2**0
                  CONTENTS
 10 .bss          00000448  20000144  20000144  00006144  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000058c  2000058c  00006144  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006144  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e03c  00000000  00000000  00006174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000254f  00000000  00000000  000141b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af8  00000000  00000000  00016700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000850  00000000  00000000  000171f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021559  00000000  00000000  00017a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e93f  00000000  00000000  00038fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb0f8  00000000  00000000  000478e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001129d8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002cd0  00000000  00000000  00112a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001156ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000144 	.word	0x20000144
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004738 	.word	0x08004738

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000148 	.word	0x20000148
 80001c4:	08004738 	.word	0x08004738

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <DIO_GPIO_CLK_ENABLE>:
		{.id = eID_LED3,.name = "LED3",.gpio=GPIOD,.pin = LD3_Pin,.mode = GPIO_MODE_OUTPUT_PP,.pull = GPIO_NOPULL,.speed = GPIO_SPEED_FREQ_LOW,.default_value = -1},
		{.id = eID_LED5,.name = "LED5",.gpio=GPIOD,.pin = LD5_Pin,.mode = GPIO_MODE_OUTPUT_PP,.pull = GPIO_NOPULL,.speed = GPIO_SPEED_FREQ_LOW,.default_value = -1},
		{.id = eID_LED6,.name = "LED6",.gpio=GPIOD,.pin = LD6_Pin,.mode = GPIO_MODE_OUTPUT_PP,.pull = GPIO_NOPULL,.speed = GPIO_SPEED_FREQ_LOW,.default_value = -1}
};

void DIO_GPIO_CLK_ENABLE(uint32_t sGPIO){
 80004f4:	b480      	push	{r7}
 80004f6:	b08b      	sub	sp, #44	@ 0x2c
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]

	switch(sGPIO){
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4a5f      	ldr	r2, [pc, #380]	@ (800067c <DIO_GPIO_CLK_ENABLE+0x188>)
 8000500:	4293      	cmp	r3, r2
 8000502:	f000 80a5 	beq.w	8000650 <DIO_GPIO_CLK_ENABLE+0x15c>
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4a5c      	ldr	r2, [pc, #368]	@ (800067c <DIO_GPIO_CLK_ENABLE+0x188>)
 800050a:	4293      	cmp	r3, r2
 800050c:	f200 80af 	bhi.w	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a5b      	ldr	r2, [pc, #364]	@ (8000680 <DIO_GPIO_CLK_ENABLE+0x18c>)
 8000514:	4293      	cmp	r3, r2
 8000516:	f000 808c 	beq.w	8000632 <DIO_GPIO_CLK_ENABLE+0x13e>
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4a58      	ldr	r2, [pc, #352]	@ (8000680 <DIO_GPIO_CLK_ENABLE+0x18c>)
 800051e:	4293      	cmp	r3, r2
 8000520:	f200 80a5 	bhi.w	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a57      	ldr	r2, [pc, #348]	@ (8000684 <DIO_GPIO_CLK_ENABLE+0x190>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d073      	beq.n	8000614 <DIO_GPIO_CLK_ENABLE+0x120>
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4a55      	ldr	r2, [pc, #340]	@ (8000684 <DIO_GPIO_CLK_ENABLE+0x190>)
 8000530:	4293      	cmp	r3, r2
 8000532:	f200 809c 	bhi.w	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4a53      	ldr	r2, [pc, #332]	@ (8000688 <DIO_GPIO_CLK_ENABLE+0x194>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d05b      	beq.n	80005f6 <DIO_GPIO_CLK_ENABLE+0x102>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a51      	ldr	r2, [pc, #324]	@ (8000688 <DIO_GPIO_CLK_ENABLE+0x194>)
 8000542:	4293      	cmp	r3, r2
 8000544:	f200 8093 	bhi.w	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4a50      	ldr	r2, [pc, #320]	@ (800068c <DIO_GPIO_CLK_ENABLE+0x198>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d043      	beq.n	80005d8 <DIO_GPIO_CLK_ENABLE+0xe4>
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a4e      	ldr	r2, [pc, #312]	@ (800068c <DIO_GPIO_CLK_ENABLE+0x198>)
 8000554:	4293      	cmp	r3, r2
 8000556:	f200 808a 	bhi.w	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4a4c      	ldr	r2, [pc, #304]	@ (8000690 <DIO_GPIO_CLK_ENABLE+0x19c>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d02b      	beq.n	80005ba <DIO_GPIO_CLK_ENABLE+0xc6>
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4a4a      	ldr	r2, [pc, #296]	@ (8000690 <DIO_GPIO_CLK_ENABLE+0x19c>)
 8000566:	4293      	cmp	r3, r2
 8000568:	f200 8081 	bhi.w	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4a49      	ldr	r2, [pc, #292]	@ (8000694 <DIO_GPIO_CLK_ENABLE+0x1a0>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d004      	beq.n	800057e <DIO_GPIO_CLK_ENABLE+0x8a>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4a48      	ldr	r2, [pc, #288]	@ (8000698 <DIO_GPIO_CLK_ENABLE+0x1a4>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d00f      	beq.n	800059c <DIO_GPIO_CLK_ENABLE+0xa8>
		break;
	case (uint32_t)GPIOH:
		  __HAL_RCC_GPIOH_CLK_ENABLE();
		break;
	}
}
 800057c:	e077      	b.n	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	627b      	str	r3, [r7, #36]	@ 0x24
 8000582:	4b46      	ldr	r3, [pc, #280]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	4a45      	ldr	r2, [pc, #276]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6313      	str	r3, [r2, #48]	@ 0x30
 800058e:	4b43      	ldr	r3, [pc, #268]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	627b      	str	r3, [r7, #36]	@ 0x24
 8000598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
		break;
 800059a:	e068      	b.n	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	623b      	str	r3, [r7, #32]
 80005a0:	4b3e      	ldr	r3, [pc, #248]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 80005a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a4:	4a3d      	ldr	r2, [pc, #244]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 80005a6:	f043 0302 	orr.w	r3, r3, #2
 80005aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ac:	4b3b      	ldr	r3, [pc, #236]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 80005ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b0:	f003 0302 	and.w	r3, r3, #2
 80005b4:	623b      	str	r3, [r7, #32]
 80005b6:	6a3b      	ldr	r3, [r7, #32]
		break;
 80005b8:	e059      	b.n	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
 80005be:	4b37      	ldr	r3, [pc, #220]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	4a36      	ldr	r2, [pc, #216]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ca:	4b34      	ldr	r3, [pc, #208]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	f003 0304 	and.w	r3, r3, #4
 80005d2:	61fb      	str	r3, [r7, #28]
 80005d4:	69fb      	ldr	r3, [r7, #28]
		break;
 80005d6:	e04a      	b.n	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	61bb      	str	r3, [r7, #24]
 80005dc:	4b2f      	ldr	r3, [pc, #188]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e0:	4a2e      	ldr	r2, [pc, #184]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 80005e2:	f043 0308 	orr.w	r3, r3, #8
 80005e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e8:	4b2c      	ldr	r3, [pc, #176]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 80005ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ec:	f003 0308 	and.w	r3, r3, #8
 80005f0:	61bb      	str	r3, [r7, #24]
 80005f2:	69bb      	ldr	r3, [r7, #24]
		break;
 80005f4:	e03b      	b.n	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	4b28      	ldr	r3, [pc, #160]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	4a27      	ldr	r2, [pc, #156]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000600:	f043 0310 	orr.w	r3, r3, #16
 8000604:	6313      	str	r3, [r2, #48]	@ 0x30
 8000606:	4b25      	ldr	r3, [pc, #148]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	f003 0310 	and.w	r3, r3, #16
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	697b      	ldr	r3, [r7, #20]
		break;
 8000612:	e02c      	b.n	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	4b20      	ldr	r3, [pc, #128]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061c:	4a1f      	ldr	r2, [pc, #124]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 800061e:	f043 0320 	orr.w	r3, r3, #32
 8000622:	6313      	str	r3, [r2, #48]	@ 0x30
 8000624:	4b1d      	ldr	r3, [pc, #116]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000628:	f003 0320 	and.w	r3, r3, #32
 800062c:	613b      	str	r3, [r7, #16]
 800062e:	693b      	ldr	r3, [r7, #16]
		break;
 8000630:	e01d      	b.n	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	4b19      	ldr	r3, [pc, #100]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	4a18      	ldr	r2, [pc, #96]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 800063c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000640:	6313      	str	r3, [r2, #48]	@ 0x30
 8000642:	4b16      	ldr	r3, [pc, #88]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
		break;
 800064e:	e00e      	b.n	800066e <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b11      	ldr	r3, [pc, #68]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000658:	4a10      	ldr	r2, [pc, #64]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 800065a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800065e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000660:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
		break;
 800066c:	bf00      	nop
}
 800066e:	bf00      	nop
 8000670:	372c      	adds	r7, #44	@ 0x2c
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40021c00 	.word	0x40021c00
 8000680:	40021800 	.word	0x40021800
 8000684:	40021400 	.word	0x40021400
 8000688:	40021000 	.word	0x40021000
 800068c:	40020c00 	.word	0x40020c00
 8000690:	40020800 	.word	0x40020800
 8000694:	40020000 	.word	0x40020000
 8000698:	40020400 	.word	0x40020400
 800069c:	40023800 	.word	0x40023800

080006a0 <DIO_Init>:

bool DIO_Init(void){
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b087      	sub	sp, #28
 80006a4:	af00      	add	r7, sp, #0
	for(int i = 0;i < eID_Max ;i++){
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
 80006aa:	e079      	b.n	80007a0 <DIO_Init+0x100>
		  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	463b      	mov	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]
		  GPIO_InitStruct.Pin = sDIOTable[i].pin;
 80006ba:	4a3d      	ldr	r2, [pc, #244]	@ (80007b0 <DIO_Init+0x110>)
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	2134      	movs	r1, #52	@ 0x34
 80006c0:	fb01 f303 	mul.w	r3, r1, r3
 80006c4:	4413      	add	r3, r2
 80006c6:	331c      	adds	r3, #28
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	603b      	str	r3, [r7, #0]
		  GPIO_InitStruct.Mode = sDIOTable[i].mode;
 80006cc:	4a38      	ldr	r2, [pc, #224]	@ (80007b0 <DIO_Init+0x110>)
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	2134      	movs	r1, #52	@ 0x34
 80006d2:	fb01 f303 	mul.w	r3, r1, r3
 80006d6:	4413      	add	r3, r2
 80006d8:	3320      	adds	r3, #32
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	607b      	str	r3, [r7, #4]
		  GPIO_InitStruct.Pull = sDIOTable[i].pull;
 80006de:	4a34      	ldr	r2, [pc, #208]	@ (80007b0 <DIO_Init+0x110>)
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	2134      	movs	r1, #52	@ 0x34
 80006e4:	fb01 f303 	mul.w	r3, r1, r3
 80006e8:	4413      	add	r3, r2
 80006ea:	3324      	adds	r3, #36	@ 0x24
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStruct.Alternate = sDIOTable[i].alternate;
 80006f0:	4a2f      	ldr	r2, [pc, #188]	@ (80007b0 <DIO_Init+0x110>)
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	2134      	movs	r1, #52	@ 0x34
 80006f6:	fb01 f303 	mul.w	r3, r1, r3
 80006fa:	4413      	add	r3, r2
 80006fc:	332c      	adds	r3, #44	@ 0x2c
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	613b      	str	r3, [r7, #16]
		  GPIO_InitStruct.Speed = sDIOTable[i].speed;
 8000702:	4a2b      	ldr	r2, [pc, #172]	@ (80007b0 <DIO_Init+0x110>)
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	2134      	movs	r1, #52	@ 0x34
 8000708:	fb01 f303 	mul.w	r3, r1, r3
 800070c:	4413      	add	r3, r2
 800070e:	3328      	adds	r3, #40	@ 0x28
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	60fb      	str	r3, [r7, #12]

		  DIO_GPIO_CLK_ENABLE(sDIOTable[i].gpio);
 8000714:	4a26      	ldr	r2, [pc, #152]	@ (80007b0 <DIO_Init+0x110>)
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	2134      	movs	r1, #52	@ 0x34
 800071a:	fb01 f303 	mul.w	r3, r1, r3
 800071e:	4413      	add	r3, r2
 8000720:	3318      	adds	r3, #24
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff fee5 	bl	80004f4 <DIO_GPIO_CLK_ENABLE>

		  HAL_GPIO_Init(sDIOTable[i].gpio, &GPIO_InitStruct);
 800072a:	4a21      	ldr	r2, [pc, #132]	@ (80007b0 <DIO_Init+0x110>)
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	2134      	movs	r1, #52	@ 0x34
 8000730:	fb01 f303 	mul.w	r3, r1, r3
 8000734:	4413      	add	r3, r2
 8000736:	3318      	adds	r3, #24
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	461a      	mov	r2, r3
 800073c:	463b      	mov	r3, r7
 800073e:	4619      	mov	r1, r3
 8000740:	4610      	mov	r0, r2
 8000742:	f000 fb5b 	bl	8000dfc <HAL_GPIO_Init>
		  if(sDIOTable[i].default_value != -1)
 8000746:	4a1a      	ldr	r2, [pc, #104]	@ (80007b0 <DIO_Init+0x110>)
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	2134      	movs	r1, #52	@ 0x34
 800074c:	fb01 f303 	mul.w	r3, r1, r3
 8000750:	4413      	add	r3, r2
 8000752:	3330      	adds	r3, #48	@ 0x30
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800075a:	d01e      	beq.n	800079a <DIO_Init+0xfa>
			  HAL_GPIO_WritePin(sDIOTable[i].gpio, sDIOTable[i].pin, sDIOTable[i].default_value);
 800075c:	4a14      	ldr	r2, [pc, #80]	@ (80007b0 <DIO_Init+0x110>)
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	2134      	movs	r1, #52	@ 0x34
 8000762:	fb01 f303 	mul.w	r3, r1, r3
 8000766:	4413      	add	r3, r2
 8000768:	3318      	adds	r3, #24
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	461c      	mov	r4, r3
 800076e:	4a10      	ldr	r2, [pc, #64]	@ (80007b0 <DIO_Init+0x110>)
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	2134      	movs	r1, #52	@ 0x34
 8000774:	fb01 f303 	mul.w	r3, r1, r3
 8000778:	4413      	add	r3, r2
 800077a:	331c      	adds	r3, #28
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	b299      	uxth	r1, r3
 8000780:	4a0b      	ldr	r2, [pc, #44]	@ (80007b0 <DIO_Init+0x110>)
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	2034      	movs	r0, #52	@ 0x34
 8000786:	fb00 f303 	mul.w	r3, r0, r3
 800078a:	4413      	add	r3, r2
 800078c:	3330      	adds	r3, #48	@ 0x30
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	b2db      	uxtb	r3, r3
 8000792:	461a      	mov	r2, r3
 8000794:	4620      	mov	r0, r4
 8000796:	f000 fce5 	bl	8001164 <HAL_GPIO_WritePin>
	for(int i = 0;i < eID_Max ;i++){
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	3301      	adds	r3, #1
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	2b05      	cmp	r3, #5
 80007a4:	dd82      	ble.n	80006ac <DIO_Init+0xc>
	}
}
 80007a6:	bf00      	nop
 80007a8:	4618      	mov	r0, r3
 80007aa:	371c      	adds	r7, #28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd90      	pop	{r4, r7, pc}
 80007b0:	20000000 	.word	0x20000000

080007b4 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	DIO_Init();
 80007b8:	f7ff ff72 	bl	80006a0 <DIO_Init>

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b087      	sub	sp, #28
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

    bool data_sent = false;
 80007c6:	2300      	movs	r3, #0
 80007c8:	75fb      	strb	r3, [r7, #23]
    char data[20] = "hello world\n\r";
 80007ca:	4b1c      	ldr	r3, [pc, #112]	@ (800083c <main+0x7c>)
 80007cc:	463c      	mov	r4, r7
 80007ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007d0:	c407      	stmia	r4!, {r0, r1, r2}
 80007d2:	8023      	strh	r3, [r4, #0]
 80007d4:	f107 030e 	add.w	r3, r7, #14
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	809a      	strh	r2, [r3, #4]
    char cntr = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	75bb      	strb	r3, [r7, #22]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e2:	f000 f9b3 	bl	8000b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e6:	f000 f831 	bl	800084c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ea:	f7ff ffe3 	bl	80007b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007ee:	f000 f911 	bl	8000a14 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(HAL_GPIO_ReadPin(B1_GPIO_Port ,B1_Pin ) == GPIO_PIN_SET){
 80007f2:	2101      	movs	r1, #1
 80007f4:	4812      	ldr	r0, [pc, #72]	@ (8000840 <main+0x80>)
 80007f6:	f000 fc9d 	bl	8001134 <HAL_GPIO_ReadPin>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d114      	bne.n	800082a <main+0x6a>
  	  HAL_GPIO_WritePin(LD4_GPIO_Port , LD4_Pin , GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000806:	480f      	ldr	r0, [pc, #60]	@ (8000844 <main+0x84>)
 8000808:	f000 fcac 	bl	8001164 <HAL_GPIO_WritePin>
  	  if(data_sent == false){
 800080c:	7dfb      	ldrb	r3, [r7, #23]
 800080e:	f083 0301 	eor.w	r3, r3, #1
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2b00      	cmp	r3, #0
 8000816:	d0ec      	beq.n	80007f2 <main+0x32>
  	  	HAL_UART_Transmit(&huart2,data,20,3);
 8000818:	4639      	mov	r1, r7
 800081a:	2303      	movs	r3, #3
 800081c:	2214      	movs	r2, #20
 800081e:	480a      	ldr	r0, [pc, #40]	@ (8000848 <main+0x88>)
 8000820:	f002 ff48 	bl	80036b4 <HAL_UART_Transmit>
  	  	data_sent = true;
 8000824:	2301      	movs	r3, #1
 8000826:	75fb      	strb	r3, [r7, #23]
 8000828:	e7e3      	b.n	80007f2 <main+0x32>
  	  }

    }
    else{
  	  HAL_GPIO_WritePin(LD4_GPIO_Port , LD4_Pin , GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000830:	4804      	ldr	r0, [pc, #16]	@ (8000844 <main+0x84>)
 8000832:	f000 fc97 	bl	8001164 <HAL_GPIO_WritePin>
    	data_sent = false;
 8000836:	2300      	movs	r3, #0
 8000838:	75fb      	strb	r3, [r7, #23]
    if(HAL_GPIO_ReadPin(B1_GPIO_Port ,B1_Pin ) == GPIO_PIN_SET){
 800083a:	e7da      	b.n	80007f2 <main+0x32>
 800083c:	08004750 	.word	0x08004750
 8000840:	40020000 	.word	0x40020000
 8000844:	40020c00 	.word	0x40020c00
 8000848:	20000160 	.word	0x20000160

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b094      	sub	sp, #80	@ 0x50
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	f107 0320 	add.w	r3, r7, #32
 8000856:	2230      	movs	r2, #48	@ 0x30
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f003 ff40 	bl	80046e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	4b28      	ldr	r3, [pc, #160]	@ (8000918 <SystemClock_Config+0xcc>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000878:	4a27      	ldr	r2, [pc, #156]	@ (8000918 <SystemClock_Config+0xcc>)
 800087a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800087e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000880:	4b25      	ldr	r3, [pc, #148]	@ (8000918 <SystemClock_Config+0xcc>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	4b22      	ldr	r3, [pc, #136]	@ (800091c <SystemClock_Config+0xd0>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a21      	ldr	r2, [pc, #132]	@ (800091c <SystemClock_Config+0xd0>)
 8000896:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800089a:	6013      	str	r3, [r2, #0]
 800089c:	4b1f      	ldr	r3, [pc, #124]	@ (800091c <SystemClock_Config+0xd0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a8:	2301      	movs	r3, #1
 80008aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b2:	2302      	movs	r3, #2
 80008b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008bc:	2308      	movs	r3, #8
 80008be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008c0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008ca:	2307      	movs	r3, #7
 80008cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ce:	f107 0320 	add.w	r3, r7, #32
 80008d2:	4618      	mov	r0, r3
 80008d4:	f002 fa06 	bl	8002ce4 <HAL_RCC_OscConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008de:	f000 f81f 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e2:	230f      	movs	r3, #15
 80008e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e6:	2302      	movs	r3, #2
 80008e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	2105      	movs	r1, #5
 8000900:	4618      	mov	r0, r3
 8000902:	f002 fc67 	bl	80031d4 <HAL_RCC_ClockConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800090c:	f000 f808 	bl	8000920 <Error_Handler>
  }
}
 8000910:	bf00      	nop
 8000912:	3750      	adds	r7, #80	@ 0x50
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40023800 	.word	0x40023800
 800091c:	40007000 	.word	0x40007000

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <Error_Handler+0x8>

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093a:	4a0f      	ldr	r2, [pc, #60]	@ (8000978 <HAL_MspInit+0x4c>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000940:	6453      	str	r3, [r2, #68]	@ 0x44
 8000942:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000956:	4a08      	ldr	r2, [pc, #32]	@ (8000978 <HAL_MspInit+0x4c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800095c:	6413      	str	r3, [r2, #64]	@ 0x40
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800096a:	2007      	movs	r0, #7
 800096c:	f000 fa12 	bl	8000d94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <NMI_Handler+0x4>

08000984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <MemManage_Handler+0x4>

08000994 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d2:	f000 f90d 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80009e0:	4802      	ldr	r0, [pc, #8]	@ (80009ec <OTG_FS_IRQHandler+0x10>)
 80009e2:	f000 fbd8 	bl	8001196 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200001ac 	.word	0x200001ac

080009f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <SystemInit+0x20>)
 80009f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009fa:	4a05      	ldr	r2, [pc, #20]	@ (8000a10 <SystemInit+0x20>)
 80009fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a18:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a1a:	4a12      	ldr	r2, [pc, #72]	@ (8000a64 <MX_USART2_UART_Init+0x50>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a1e:	4b10      	ldr	r3, [pc, #64]	@ (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a4a:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a4c:	f002 fde2 	bl	8003614 <HAL_UART_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a56:	f7ff ff63 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000160 	.word	0x20000160
 8000a64:	40004400 	.word	0x40004400

08000a68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	@ 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a19      	ldr	r2, [pc, #100]	@ (8000aec <HAL_UART_MspInit+0x84>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d12b      	bne.n	8000ae2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <HAL_UART_MspInit+0x88>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a92:	4a17      	ldr	r2, [pc, #92]	@ (8000af0 <HAL_UART_MspInit+0x88>)
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <HAL_UART_MspInit+0x88>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <HAL_UART_MspInit+0x88>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a10      	ldr	r2, [pc, #64]	@ (8000af0 <HAL_UART_MspInit+0x88>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <HAL_UART_MspInit+0x88>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ad2:	2307      	movs	r3, #7
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <HAL_UART_MspInit+0x8c>)
 8000ade:	f000 f98d 	bl	8000dfc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	@ 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40004400 	.word	0x40004400
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020000 	.word	0x40020000

08000af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000af8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000afc:	f7ff ff78 	bl	80009f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b00:	480c      	ldr	r0, [pc, #48]	@ (8000b34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b02:	490d      	ldr	r1, [pc, #52]	@ (8000b38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b04:	4a0d      	ldr	r2, [pc, #52]	@ (8000b3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b08:	e002      	b.n	8000b10 <LoopCopyDataInit>

08000b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0e:	3304      	adds	r3, #4

08000b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b14:	d3f9      	bcc.n	8000b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b16:	4a0a      	ldr	r2, [pc, #40]	@ (8000b40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b18:	4c0a      	ldr	r4, [pc, #40]	@ (8000b44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b1c:	e001      	b.n	8000b22 <LoopFillZerobss>

08000b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b20:	3204      	adds	r2, #4

08000b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b24:	d3fb      	bcc.n	8000b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b26:	f003 fde3 	bl	80046f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b2a:	f7ff fe49 	bl	80007c0 <main>
  bx  lr    
 8000b2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b38:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 8000b3c:	0800478c 	.word	0x0800478c
  ldr r2, =_sbss
 8000b40:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 8000b44:	2000058c 	.word	0x2000058c

08000b48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC_IRQHandler>
	...

08000b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b50:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0d      	ldr	r2, [pc, #52]	@ (8000b8c <HAL_Init+0x40>)
 8000b56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <HAL_Init+0x40>)
 8000b62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	@ (8000b8c <HAL_Init+0x40>)
 8000b6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 f90d 	bl	8000d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f000 f808 	bl	8000b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b80:	f7ff fed4 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023c00 	.word	0x40023c00

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <HAL_InitTick+0x54>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <HAL_InitTick+0x58>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 f917 	bl	8000de2 <HAL_SYSTICK_Config>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00e      	b.n	8000bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d80a      	bhi.n	8000bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f000 f8ed 	bl	8000daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd0:	4a06      	ldr	r2, [pc, #24]	@ (8000bec <HAL_InitTick+0x5c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000138 	.word	0x20000138
 8000be8:	20000140 	.word	0x20000140
 8000bec:	2000013c 	.word	0x2000013c

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_IncTick+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <HAL_IncTick+0x24>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a04      	ldr	r2, [pc, #16]	@ (8000c14 <HAL_IncTick+0x24>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000140 	.word	0x20000140
 8000c14:	200001a8 	.word	0x200001a8

08000c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	@ (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	200001a8 	.word	0x200001a8

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	@ (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	db0a      	blt.n	8000cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	490c      	ldr	r1, [pc, #48]	@ (8000ce0 <__NVIC_SetPriority+0x4c>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	0112      	lsls	r2, r2, #4
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cbc:	e00a      	b.n	8000cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4908      	ldr	r1, [pc, #32]	@ (8000ce4 <__NVIC_SetPriority+0x50>)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	3b04      	subs	r3, #4
 8000ccc:	0112      	lsls	r2, r2, #4
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	761a      	strb	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	@ 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f1c3 0307 	rsb	r3, r3, #7
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	bf28      	it	cs
 8000d06:	2304      	movcs	r3, #4
 8000d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d902      	bls.n	8000d18 <NVIC_EncodePriority+0x30>
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3b03      	subs	r3, #3
 8000d16:	e000      	b.n	8000d1a <NVIC_EncodePriority+0x32>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43da      	mvns	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	43d9      	mvns	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	4313      	orrs	r3, r2
         );
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3724      	adds	r7, #36	@ 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d60:	d301      	bcc.n	8000d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00f      	b.n	8000d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d66:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <SysTick_Config+0x40>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6e:	210f      	movs	r1, #15
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f7ff ff8e 	bl	8000c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d78:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <SysTick_Config+0x40>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7e:	4b04      	ldr	r3, [pc, #16]	@ (8000d90 <SysTick_Config+0x40>)
 8000d80:	2207      	movs	r2, #7
 8000d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	e000e010 	.word	0xe000e010

08000d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff47 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dbc:	f7ff ff5c 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	68b9      	ldr	r1, [r7, #8]
 8000dc6:	6978      	ldr	r0, [r7, #20]
 8000dc8:	f7ff ff8e 	bl	8000ce8 <NVIC_EncodePriority>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff5d 	bl	8000c94 <__NVIC_SetPriority>
}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ffb0 	bl	8000d50 <SysTick_Config>
 8000df0:	4603      	mov	r3, r0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	@ 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
 8000e16:	e16b      	b.n	80010f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e18:	2201      	movs	r2, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	f040 815a 	bne.w	80010ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d005      	beq.n	8000e4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d130      	bne.n	8000eb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	2203      	movs	r2, #3
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	68da      	ldr	r2, [r3, #12]
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e84:	2201      	movs	r2, #1
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	091b      	lsrs	r3, r3, #4
 8000e9a:	f003 0201 	and.w	r2, r3, #1
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d017      	beq.n	8000eec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d123      	bne.n	8000f40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	08da      	lsrs	r2, r3, #3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3208      	adds	r2, #8
 8000f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	f003 0307 	and.w	r3, r3, #7
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	220f      	movs	r2, #15
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	691a      	ldr	r2, [r3, #16]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	08da      	lsrs	r2, r3, #3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3208      	adds	r2, #8
 8000f3a:	69b9      	ldr	r1, [r7, #24]
 8000f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0203 	and.w	r2, r3, #3
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 80b4 	beq.w	80010ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b60      	ldr	r3, [pc, #384]	@ (8001108 <HAL_GPIO_Init+0x30c>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8a:	4a5f      	ldr	r2, [pc, #380]	@ (8001108 <HAL_GPIO_Init+0x30c>)
 8000f8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f92:	4b5d      	ldr	r3, [pc, #372]	@ (8001108 <HAL_GPIO_Init+0x30c>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f9e:	4a5b      	ldr	r2, [pc, #364]	@ (800110c <HAL_GPIO_Init+0x310>)
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	220f      	movs	r2, #15
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a52      	ldr	r2, [pc, #328]	@ (8001110 <HAL_GPIO_Init+0x314>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d02b      	beq.n	8001022 <HAL_GPIO_Init+0x226>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a51      	ldr	r2, [pc, #324]	@ (8001114 <HAL_GPIO_Init+0x318>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d025      	beq.n	800101e <HAL_GPIO_Init+0x222>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a50      	ldr	r2, [pc, #320]	@ (8001118 <HAL_GPIO_Init+0x31c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d01f      	beq.n	800101a <HAL_GPIO_Init+0x21e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4f      	ldr	r2, [pc, #316]	@ (800111c <HAL_GPIO_Init+0x320>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d019      	beq.n	8001016 <HAL_GPIO_Init+0x21a>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4e      	ldr	r2, [pc, #312]	@ (8001120 <HAL_GPIO_Init+0x324>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d013      	beq.n	8001012 <HAL_GPIO_Init+0x216>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4d      	ldr	r2, [pc, #308]	@ (8001124 <HAL_GPIO_Init+0x328>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d00d      	beq.n	800100e <HAL_GPIO_Init+0x212>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4c      	ldr	r2, [pc, #304]	@ (8001128 <HAL_GPIO_Init+0x32c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d007      	beq.n	800100a <HAL_GPIO_Init+0x20e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4b      	ldr	r2, [pc, #300]	@ (800112c <HAL_GPIO_Init+0x330>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d101      	bne.n	8001006 <HAL_GPIO_Init+0x20a>
 8001002:	2307      	movs	r3, #7
 8001004:	e00e      	b.n	8001024 <HAL_GPIO_Init+0x228>
 8001006:	2308      	movs	r3, #8
 8001008:	e00c      	b.n	8001024 <HAL_GPIO_Init+0x228>
 800100a:	2306      	movs	r3, #6
 800100c:	e00a      	b.n	8001024 <HAL_GPIO_Init+0x228>
 800100e:	2305      	movs	r3, #5
 8001010:	e008      	b.n	8001024 <HAL_GPIO_Init+0x228>
 8001012:	2304      	movs	r3, #4
 8001014:	e006      	b.n	8001024 <HAL_GPIO_Init+0x228>
 8001016:	2303      	movs	r3, #3
 8001018:	e004      	b.n	8001024 <HAL_GPIO_Init+0x228>
 800101a:	2302      	movs	r3, #2
 800101c:	e002      	b.n	8001024 <HAL_GPIO_Init+0x228>
 800101e:	2301      	movs	r3, #1
 8001020:	e000      	b.n	8001024 <HAL_GPIO_Init+0x228>
 8001022:	2300      	movs	r3, #0
 8001024:	69fa      	ldr	r2, [r7, #28]
 8001026:	f002 0203 	and.w	r2, r2, #3
 800102a:	0092      	lsls	r2, r2, #2
 800102c:	4093      	lsls	r3, r2
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001034:	4935      	ldr	r1, [pc, #212]	@ (800110c <HAL_GPIO_Init+0x310>)
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	3302      	adds	r3, #2
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001042:	4b3b      	ldr	r3, [pc, #236]	@ (8001130 <HAL_GPIO_Init+0x334>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001066:	4a32      	ldr	r2, [pc, #200]	@ (8001130 <HAL_GPIO_Init+0x334>)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800106c:	4b30      	ldr	r3, [pc, #192]	@ (8001130 <HAL_GPIO_Init+0x334>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001090:	4a27      	ldr	r2, [pc, #156]	@ (8001130 <HAL_GPIO_Init+0x334>)
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001096:	4b26      	ldr	r3, [pc, #152]	@ (8001130 <HAL_GPIO_Init+0x334>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001130 <HAL_GPIO_Init+0x334>)
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <HAL_GPIO_Init+0x334>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010e4:	4a12      	ldr	r2, [pc, #72]	@ (8001130 <HAL_GPIO_Init+0x334>)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3301      	adds	r3, #1
 80010ee:	61fb      	str	r3, [r7, #28]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	2b0f      	cmp	r3, #15
 80010f4:	f67f ae90 	bls.w	8000e18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	3724      	adds	r7, #36	@ 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40013800 	.word	0x40013800
 8001110:	40020000 	.word	0x40020000
 8001114:	40020400 	.word	0x40020400
 8001118:	40020800 	.word	0x40020800
 800111c:	40020c00 	.word	0x40020c00
 8001120:	40021000 	.word	0x40021000
 8001124:	40021400 	.word	0x40021400
 8001128:	40021800 	.word	0x40021800
 800112c:	40021c00 	.word	0x40021c00
 8001130:	40013c00 	.word	0x40013c00

08001134 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	691a      	ldr	r2, [r3, #16]
 8001144:	887b      	ldrh	r3, [r7, #2]
 8001146:	4013      	ands	r3, r2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d002      	beq.n	8001152 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800114c:	2301      	movs	r3, #1
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	e001      	b.n	8001156 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001156:	7bfb      	ldrb	r3, [r7, #15]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	807b      	strh	r3, [r7, #2]
 8001170:	4613      	mov	r3, r2
 8001172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001174:	787b      	ldrb	r3, [r7, #1]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800117a:	887a      	ldrh	r2, [r7, #2]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001180:	e003      	b.n	800118a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001182:	887b      	ldrh	r3, [r7, #2]
 8001184:	041a      	lsls	r2, r3, #16
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	619a      	str	r2, [r3, #24]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f002 ff4b 	bl	8004048 <USB_GetMode>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	f040 80fb 	bne.w	80013b0 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f002 ff0e 	bl	8003fe0 <USB_ReadInterrupts>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 80f1 	beq.w	80013ae <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f002 ff05 	bl	8003fe0 <USB_ReadInterrupts>
 80011d6:	4603      	mov	r3, r0
 80011d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80011e0:	d104      	bne.n	80011ec <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80011ea:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f002 fef5 	bl	8003fe0 <USB_ReadInterrupts>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001200:	d104      	bne.n	800120c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800120a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f002 fee5 	bl	8003fe0 <USB_ReadInterrupts>
 8001216:	4603      	mov	r3, r0
 8001218:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800121c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001220:	d104      	bne.n	800122c <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800122a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f002 fed5 	bl	8003fe0 <USB_ReadInterrupts>
 8001236:	4603      	mov	r3, r0
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b02      	cmp	r3, #2
 800123e:	d103      	bne.n	8001248 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2202      	movs	r2, #2
 8001246:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f002 fec7 	bl	8003fe0 <USB_ReadInterrupts>
 8001252:	4603      	mov	r3, r0
 8001254:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800125c:	d120      	bne.n	80012a0 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001266:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	2b00      	cmp	r3, #0
 8001276:	d113      	bne.n	80012a0 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001278:	2110      	movs	r1, #16
 800127a:	6938      	ldr	r0, [r7, #16]
 800127c:	f002 fdf8 	bl	8003e70 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001280:	6938      	ldr	r0, [r7, #16]
 8001282:	f002 fe27 	bl	8003ed4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	7a5b      	ldrb	r3, [r3, #9]
 800128a:	2b02      	cmp	r3, #2
 800128c:	d105      	bne.n	800129a <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2101      	movs	r1, #1
 8001294:	4618      	mov	r0, r3
 8001296:	f002 fee5 	bl	8004064 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f003 f9a1 	bl	80045e2 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 fe9b 	bl	8003fe0 <USB_ReadInterrupts>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80012b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b4:	d102      	bne.n	80012bc <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f001 fca1 	bl	8002bfe <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f002 fe8d 	bl	8003fe0 <USB_ReadInterrupts>
 80012c6:	4603      	mov	r3, r0
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	2b08      	cmp	r3, #8
 80012ce:	d106      	bne.n	80012de <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f003 f96a 	bl	80045aa <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2208      	movs	r2, #8
 80012dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f002 fe7c 	bl	8003fe0 <USB_ReadInterrupts>
 80012e8:	4603      	mov	r3, r0
 80012ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80012f2:	d139      	bne.n	8001368 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 fef0 	bl	80040de <USB_HC_ReadInterrupt>
 80012fe:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	e025      	b.n	8001352 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	f003 030f 	and.w	r3, r3, #15
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	fa22 f303 	lsr.w	r3, r2, r3
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d018      	beq.n	800134c <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	015a      	lsls	r2, r3, #5
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4413      	add	r3, r2
 8001322:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800132c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001330:	d106      	bne.n	8001340 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4619      	mov	r1, r3
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 f859 	bl	80013f0 <HCD_HC_IN_IRQHandler>
 800133e:	e005      	b.n	800134c <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	4619      	mov	r1, r3
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 febb 	bl	80020c2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	3301      	adds	r3, #1
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	795b      	ldrb	r3, [r3, #5]
 8001356:	461a      	mov	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	4293      	cmp	r3, r2
 800135c:	d3d3      	bcc.n	8001306 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001366:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f002 fe37 	bl	8003fe0 <USB_ReadInterrupts>
 8001372:	4603      	mov	r3, r0
 8001374:	f003 0310 	and.w	r3, r3, #16
 8001378:	2b10      	cmp	r3, #16
 800137a:	d101      	bne.n	8001380 <HAL_HCD_IRQHandler+0x1ea>
 800137c:	2301      	movs	r3, #1
 800137e:	e000      	b.n	8001382 <HAL_HCD_IRQHandler+0x1ec>
 8001380:	2300      	movs	r3, #0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d014      	beq.n	80013b0 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	699a      	ldr	r2, [r3, #24]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0210 	bic.w	r2, r2, #16
 8001394:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f001 fb52 	bl	8002a40 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	699a      	ldr	r2, [r3, #24]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0210 	orr.w	r2, r2, #16
 80013aa:	619a      	str	r2, [r3, #24]
 80013ac:	e000      	b.n	80013b0 <HAL_HCD_IRQHandler+0x21a>
      return;
 80013ae:	bf00      	nop
    }
  }
}
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <HAL_HCD_Stop+0x16>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e00d      	b.n	80013e8 <HAL_HCD_Stop+0x32>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f002 ffb1 	bl	8004340 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	78fa      	ldrb	r2, [r7, #3]
 800140c:	4611      	mov	r1, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f002 fdf9 	bl	8004006 <USB_ReadChInterrupts>
 8001414:	4603      	mov	r3, r0
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	2b04      	cmp	r3, #4
 800141c:	d11a      	bne.n	8001454 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800141e:	78fb      	ldrb	r3, [r7, #3]
 8001420:	015a      	lsls	r2, r3, #5
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4413      	add	r3, r2
 8001426:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800142a:	461a      	mov	r2, r3
 800142c:	2304      	movs	r3, #4
 800142e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001430:	78fa      	ldrb	r2, [r7, #3]
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	4613      	mov	r3, r2
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	1a9b      	subs	r3, r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	440b      	add	r3, r1
 800143e:	334d      	adds	r3, #77	@ 0x4d
 8001440:	2207      	movs	r2, #7
 8001442:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	78fa      	ldrb	r2, [r7, #3]
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f002 fe57 	bl	8004100 <USB_HC_Halt>
 8001452:	e09e      	b.n	8001592 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	78fa      	ldrb	r2, [r7, #3]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f002 fdd2 	bl	8004006 <USB_ReadChInterrupts>
 8001462:	4603      	mov	r3, r0
 8001464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001468:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800146c:	d11b      	bne.n	80014a6 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800146e:	78fb      	ldrb	r3, [r7, #3]
 8001470:	015a      	lsls	r2, r3, #5
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4413      	add	r3, r2
 8001476:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800147a:	461a      	mov	r2, r3
 800147c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001480:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001482:	78fa      	ldrb	r2, [r7, #3]
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	1a9b      	subs	r3, r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	440b      	add	r3, r1
 8001490:	334d      	adds	r3, #77	@ 0x4d
 8001492:	2208      	movs	r2, #8
 8001494:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	78fa      	ldrb	r2, [r7, #3]
 800149c:	4611      	mov	r1, r2
 800149e:	4618      	mov	r0, r3
 80014a0:	f002 fe2e 	bl	8004100 <USB_HC_Halt>
 80014a4:	e075      	b.n	8001592 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	78fa      	ldrb	r2, [r7, #3]
 80014ac:	4611      	mov	r1, r2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f002 fda9 	bl	8004006 <USB_ReadChInterrupts>
 80014b4:	4603      	mov	r3, r0
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d11a      	bne.n	80014f4 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80014be:	78fb      	ldrb	r3, [r7, #3]
 80014c0:	015a      	lsls	r2, r3, #5
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4413      	add	r3, r2
 80014c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80014ca:	461a      	mov	r2, r3
 80014cc:	2308      	movs	r3, #8
 80014ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80014d0:	78fa      	ldrb	r2, [r7, #3]
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	1a9b      	subs	r3, r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	334d      	adds	r3, #77	@ 0x4d
 80014e0:	2206      	movs	r2, #6
 80014e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	78fa      	ldrb	r2, [r7, #3]
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f002 fe07 	bl	8004100 <USB_HC_Halt>
 80014f2:	e04e      	b.n	8001592 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	78fa      	ldrb	r2, [r7, #3]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f002 fd82 	bl	8004006 <USB_ReadChInterrupts>
 8001502:	4603      	mov	r3, r0
 8001504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001508:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800150c:	d11b      	bne.n	8001546 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800150e:	78fb      	ldrb	r3, [r7, #3]
 8001510:	015a      	lsls	r2, r3, #5
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4413      	add	r3, r2
 8001516:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800151a:	461a      	mov	r2, r3
 800151c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001520:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001522:	78fa      	ldrb	r2, [r7, #3]
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	011b      	lsls	r3, r3, #4
 800152a:	1a9b      	subs	r3, r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	334d      	adds	r3, #77	@ 0x4d
 8001532:	2209      	movs	r2, #9
 8001534:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	78fa      	ldrb	r2, [r7, #3]
 800153c:	4611      	mov	r1, r2
 800153e:	4618      	mov	r0, r3
 8001540:	f002 fdde 	bl	8004100 <USB_HC_Halt>
 8001544:	e025      	b.n	8001592 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	78fa      	ldrb	r2, [r7, #3]
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f002 fd59 	bl	8004006 <USB_ReadChInterrupts>
 8001554:	4603      	mov	r3, r0
 8001556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800155a:	2b80      	cmp	r3, #128	@ 0x80
 800155c:	d119      	bne.n	8001592 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800155e:	78fb      	ldrb	r3, [r7, #3]
 8001560:	015a      	lsls	r2, r3, #5
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4413      	add	r3, r2
 8001566:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800156a:	461a      	mov	r2, r3
 800156c:	2380      	movs	r3, #128	@ 0x80
 800156e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001570:	78fa      	ldrb	r2, [r7, #3]
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	1a9b      	subs	r3, r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	334d      	adds	r3, #77	@ 0x4d
 8001580:	2207      	movs	r2, #7
 8001582:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	78fa      	ldrb	r2, [r7, #3]
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f002 fdb7 	bl	8004100 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	78fa      	ldrb	r2, [r7, #3]
 8001598:	4611      	mov	r1, r2
 800159a:	4618      	mov	r0, r3
 800159c:	f002 fd33 	bl	8004006 <USB_ReadChInterrupts>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015aa:	d112      	bne.n	80015d2 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	78fa      	ldrb	r2, [r7, #3]
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f002 fda3 	bl	8004100 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80015ba:	78fb      	ldrb	r3, [r7, #3]
 80015bc:	015a      	lsls	r2, r3, #5
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4413      	add	r3, r2
 80015c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80015c6:	461a      	mov	r2, r3
 80015c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015cc:	6093      	str	r3, [r2, #8]
 80015ce:	f000 bd75 	b.w	80020bc <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	78fa      	ldrb	r2, [r7, #3]
 80015d8:	4611      	mov	r1, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 fd13 	bl	8004006 <USB_ReadChInterrupts>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	f040 8128 	bne.w	800183c <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	015a      	lsls	r2, r3, #5
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4413      	add	r3, r2
 80015f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80015f8:	461a      	mov	r2, r3
 80015fa:	2320      	movs	r3, #32
 80015fc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80015fe:	78fa      	ldrb	r2, [r7, #3]
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	1a9b      	subs	r3, r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	331b      	adds	r3, #27
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d119      	bne.n	8001648 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001614:	78fa      	ldrb	r2, [r7, #3]
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	1a9b      	subs	r3, r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	331b      	adds	r3, #27
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	015a      	lsls	r2, r3, #5
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4413      	add	r3, r2
 8001630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	78fa      	ldrb	r2, [r7, #3]
 8001638:	0151      	lsls	r1, r2, #5
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	440a      	add	r2, r1
 800163e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001642:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001646:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	799b      	ldrb	r3, [r3, #6]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d01b      	beq.n	8001688 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001650:	78fa      	ldrb	r2, [r7, #3]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	1a9b      	subs	r3, r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	3330      	adds	r3, #48	@ 0x30
 8001660:	6819      	ldr	r1, [r3, #0]
 8001662:	78fb      	ldrb	r3, [r7, #3]
 8001664:	015a      	lsls	r2, r3, #5
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4413      	add	r3, r2
 800166a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001674:	78fa      	ldrb	r2, [r7, #3]
 8001676:	1ac9      	subs	r1, r1, r3
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	011b      	lsls	r3, r3, #4
 800167e:	1a9b      	subs	r3, r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4403      	add	r3, r0
 8001684:	3338      	adds	r3, #56	@ 0x38
 8001686:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001688:	78fa      	ldrb	r2, [r7, #3]
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	4613      	mov	r3, r2
 800168e:	011b      	lsls	r3, r3, #4
 8001690:	1a9b      	subs	r3, r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	334d      	adds	r3, #77	@ 0x4d
 8001698:	2201      	movs	r2, #1
 800169a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800169c:	78fa      	ldrb	r2, [r7, #3]
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	4613      	mov	r3, r2
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	1a9b      	subs	r3, r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	3344      	adds	r3, #68	@ 0x44
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	015a      	lsls	r2, r3, #5
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	4413      	add	r3, r2
 80016b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80016bc:	461a      	mov	r2, r3
 80016be:	2301      	movs	r3, #1
 80016c0:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80016c2:	78fa      	ldrb	r2, [r7, #3]
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	1a9b      	subs	r3, r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	440b      	add	r3, r1
 80016d0:	3326      	adds	r3, #38	@ 0x26
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d00a      	beq.n	80016ee <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80016d8:	78fa      	ldrb	r2, [r7, #3]
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	4613      	mov	r3, r2
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	1a9b      	subs	r3, r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	3326      	adds	r3, #38	@ 0x26
 80016e8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d110      	bne.n	8001710 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	78fa      	ldrb	r2, [r7, #3]
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f002 fd02 	bl	8004100 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	015a      	lsls	r2, r3, #5
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4413      	add	r3, r2
 8001704:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001708:	461a      	mov	r2, r3
 800170a:	2310      	movs	r3, #16
 800170c:	6093      	str	r3, [r2, #8]
 800170e:	e03d      	b.n	800178c <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001710:	78fa      	ldrb	r2, [r7, #3]
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	1a9b      	subs	r3, r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	3326      	adds	r3, #38	@ 0x26
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b03      	cmp	r3, #3
 8001724:	d00a      	beq.n	800173c <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001726:	78fa      	ldrb	r2, [r7, #3]
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	4613      	mov	r3, r2
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	1a9b      	subs	r3, r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	440b      	add	r3, r1
 8001734:	3326      	adds	r3, #38	@ 0x26
 8001736:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001738:	2b01      	cmp	r3, #1
 800173a:	d127      	bne.n	800178c <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800173c:	78fb      	ldrb	r3, [r7, #3]
 800173e:	015a      	lsls	r2, r3, #5
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4413      	add	r3, r2
 8001744:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	78fa      	ldrb	r2, [r7, #3]
 800174c:	0151      	lsls	r1, r2, #5
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	440a      	add	r2, r1
 8001752:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001756:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800175a:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800175c:	78fa      	ldrb	r2, [r7, #3]
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	4613      	mov	r3, r2
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	1a9b      	subs	r3, r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	334c      	adds	r3, #76	@ 0x4c
 800176c:	2201      	movs	r2, #1
 800176e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001770:	78fa      	ldrb	r2, [r7, #3]
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	011b      	lsls	r3, r3, #4
 8001778:	1a9b      	subs	r3, r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	334c      	adds	r3, #76	@ 0x4c
 8001780:	781a      	ldrb	r2, [r3, #0]
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	4619      	mov	r1, r3
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f002 ff39 	bl	80045fe <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	799b      	ldrb	r3, [r3, #6]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d13b      	bne.n	800180c <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001794:	78fa      	ldrb	r2, [r7, #3]
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	1a9b      	subs	r3, r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	3338      	adds	r3, #56	@ 0x38
 80017a4:	6819      	ldr	r1, [r3, #0]
 80017a6:	78fa      	ldrb	r2, [r7, #3]
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	1a9b      	subs	r3, r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4403      	add	r3, r0
 80017b4:	3328      	adds	r3, #40	@ 0x28
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	440b      	add	r3, r1
 80017ba:	1e59      	subs	r1, r3, #1
 80017bc:	78fa      	ldrb	r2, [r7, #3]
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	1a9b      	subs	r3, r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4403      	add	r3, r0
 80017ca:	3328      	adds	r3, #40	@ 0x28
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 8470 	beq.w	80020bc <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	011b      	lsls	r3, r3, #4
 80017e4:	1a9b      	subs	r3, r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	333c      	adds	r3, #60	@ 0x3c
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	78fa      	ldrb	r2, [r7, #3]
 80017f0:	f083 0301 	eor.w	r3, r3, #1
 80017f4:	b2d8      	uxtb	r0, r3
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	011b      	lsls	r3, r3, #4
 80017fc:	1a9b      	subs	r3, r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	333c      	adds	r3, #60	@ 0x3c
 8001804:	4602      	mov	r2, r0
 8001806:	701a      	strb	r2, [r3, #0]
 8001808:	f000 bc58 	b.w	80020bc <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800180c:	78fa      	ldrb	r2, [r7, #3]
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	333c      	adds	r3, #60	@ 0x3c
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	78fa      	ldrb	r2, [r7, #3]
 8001820:	f083 0301 	eor.w	r3, r3, #1
 8001824:	b2d8      	uxtb	r0, r3
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	1a9b      	subs	r3, r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	333c      	adds	r3, #60	@ 0x3c
 8001834:	4602      	mov	r2, r0
 8001836:	701a      	strb	r2, [r3, #0]
 8001838:	f000 bc40 	b.w	80020bc <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f002 fbde 	bl	8004006 <USB_ReadChInterrupts>
 800184a:	4603      	mov	r3, r0
 800184c:	f003 0320 	and.w	r3, r3, #32
 8001850:	2b20      	cmp	r3, #32
 8001852:	d131      	bne.n	80018b8 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	015a      	lsls	r2, r3, #5
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4413      	add	r3, r2
 800185c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001860:	461a      	mov	r2, r3
 8001862:	2320      	movs	r3, #32
 8001864:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8001866:	78fa      	ldrb	r2, [r7, #3]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	1a9b      	subs	r3, r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	331a      	adds	r3, #26
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	f040 841f 	bne.w	80020bc <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800187e:	78fa      	ldrb	r2, [r7, #3]
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	1a9b      	subs	r3, r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	440b      	add	r3, r1
 800188c:	331b      	adds	r3, #27
 800188e:	2201      	movs	r2, #1
 8001890:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001892:	78fa      	ldrb	r2, [r7, #3]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	011b      	lsls	r3, r3, #4
 800189a:	1a9b      	subs	r3, r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	440b      	add	r3, r1
 80018a0:	334d      	adds	r3, #77	@ 0x4d
 80018a2:	2203      	movs	r2, #3
 80018a4:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	78fa      	ldrb	r2, [r7, #3]
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f002 fc26 	bl	8004100 <USB_HC_Halt>
 80018b4:	f000 bc02 	b.w	80020bc <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	78fa      	ldrb	r2, [r7, #3]
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f002 fba0 	bl	8004006 <USB_ReadChInterrupts>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	f040 8305 	bne.w	8001edc <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	015a      	lsls	r2, r3, #5
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4413      	add	r3, r2
 80018da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80018de:	461a      	mov	r2, r3
 80018e0:	2302      	movs	r3, #2
 80018e2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	1a9b      	subs	r3, r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	334d      	adds	r3, #77	@ 0x4d
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d114      	bne.n	8001924 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80018fa:	78fa      	ldrb	r2, [r7, #3]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	1a9b      	subs	r3, r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	334d      	adds	r3, #77	@ 0x4d
 800190a:	2202      	movs	r2, #2
 800190c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800190e:	78fa      	ldrb	r2, [r7, #3]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	334c      	adds	r3, #76	@ 0x4c
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
 8001922:	e2cc      	b.n	8001ebe <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001924:	78fa      	ldrb	r2, [r7, #3]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	334d      	adds	r3, #77	@ 0x4d
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b06      	cmp	r3, #6
 8001938:	d114      	bne.n	8001964 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800193a:	78fa      	ldrb	r2, [r7, #3]
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	1a9b      	subs	r3, r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	334d      	adds	r3, #77	@ 0x4d
 800194a:	2202      	movs	r2, #2
 800194c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800194e:	78fa      	ldrb	r2, [r7, #3]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	1a9b      	subs	r3, r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	334c      	adds	r3, #76	@ 0x4c
 800195e:	2205      	movs	r2, #5
 8001960:	701a      	strb	r2, [r3, #0]
 8001962:	e2ac      	b.n	8001ebe <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001964:	78fa      	ldrb	r2, [r7, #3]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	1a9b      	subs	r3, r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	334d      	adds	r3, #77	@ 0x4d
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b07      	cmp	r3, #7
 8001978:	d00b      	beq.n	8001992 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800197a:	78fa      	ldrb	r2, [r7, #3]
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	1a9b      	subs	r3, r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	440b      	add	r3, r1
 8001988:	334d      	adds	r3, #77	@ 0x4d
 800198a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800198c:	2b09      	cmp	r3, #9
 800198e:	f040 80a6 	bne.w	8001ade <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001992:	78fa      	ldrb	r2, [r7, #3]
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	1a9b      	subs	r3, r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	334d      	adds	r3, #77	@ 0x4d
 80019a2:	2202      	movs	r2, #2
 80019a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80019a6:	78fa      	ldrb	r2, [r7, #3]
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	1a9b      	subs	r3, r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	440b      	add	r3, r1
 80019b4:	3344      	adds	r3, #68	@ 0x44
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	1c59      	adds	r1, r3, #1
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4403      	add	r3, r0
 80019c6:	3344      	adds	r3, #68	@ 0x44
 80019c8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80019ca:	78fa      	ldrb	r2, [r7, #3]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	1a9b      	subs	r3, r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	3344      	adds	r3, #68	@ 0x44
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d943      	bls.n	8001a68 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80019e0:	78fa      	ldrb	r2, [r7, #3]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	1a9b      	subs	r3, r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	3344      	adds	r3, #68	@ 0x44
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	1a9b      	subs	r3, r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	331a      	adds	r3, #26
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d123      	bne.n	8001a52 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8001a0a:	78fa      	ldrb	r2, [r7, #3]
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	1a9b      	subs	r3, r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	440b      	add	r3, r1
 8001a18:	331b      	adds	r3, #27
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8001a1e:	78fa      	ldrb	r2, [r7, #3]
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	1a9b      	subs	r3, r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	331c      	adds	r3, #28
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	015a      	lsls	r2, r3, #5
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4413      	add	r3, r2
 8001a3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	78fa      	ldrb	r2, [r7, #3]
 8001a42:	0151      	lsls	r1, r2, #5
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	440a      	add	r2, r1
 8001a48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001a4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a50:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001a52:	78fa      	ldrb	r2, [r7, #3]
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	011b      	lsls	r3, r3, #4
 8001a5a:	1a9b      	subs	r3, r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	440b      	add	r3, r1
 8001a60:	334c      	adds	r3, #76	@ 0x4c
 8001a62:	2204      	movs	r2, #4
 8001a64:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001a66:	e229      	b.n	8001ebc <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001a68:	78fa      	ldrb	r2, [r7, #3]
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	1a9b      	subs	r3, r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	440b      	add	r3, r1
 8001a76:	334c      	adds	r3, #76	@ 0x4c
 8001a78:	2202      	movs	r2, #2
 8001a7a:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001a7c:	78fa      	ldrb	r2, [r7, #3]
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	011b      	lsls	r3, r3, #4
 8001a84:	1a9b      	subs	r3, r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	3326      	adds	r3, #38	@ 0x26
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00b      	beq.n	8001aaa <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001a92:	78fa      	ldrb	r2, [r7, #3]
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	1a9b      	subs	r3, r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	3326      	adds	r3, #38	@ 0x26
 8001aa2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	f040 8209 	bne.w	8001ebc <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	015a      	lsls	r2, r3, #5
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001ac0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001ac8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	015a      	lsls	r2, r3, #5
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001adc:	e1ee      	b.n	8001ebc <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001ade:	78fa      	ldrb	r2, [r7, #3]
 8001ae0:	6879      	ldr	r1, [r7, #4]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	1a9b      	subs	r3, r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	440b      	add	r3, r1
 8001aec:	334d      	adds	r3, #77	@ 0x4d
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b05      	cmp	r3, #5
 8001af2:	f040 80c8 	bne.w	8001c86 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001af6:	78fa      	ldrb	r2, [r7, #3]
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	1a9b      	subs	r3, r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	334d      	adds	r3, #77	@ 0x4d
 8001b06:	2202      	movs	r2, #2
 8001b08:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001b0a:	78fa      	ldrb	r2, [r7, #3]
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	011b      	lsls	r3, r3, #4
 8001b12:	1a9b      	subs	r3, r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	440b      	add	r3, r1
 8001b18:	331b      	adds	r3, #27
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	f040 81ce 	bne.w	8001ebe <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001b22:	78fa      	ldrb	r2, [r7, #3]
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	011b      	lsls	r3, r3, #4
 8001b2a:	1a9b      	subs	r3, r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	3326      	adds	r3, #38	@ 0x26
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d16b      	bne.n	8001c10 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8001b38:	78fa      	ldrb	r2, [r7, #3]
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	1a9b      	subs	r3, r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	3348      	adds	r3, #72	@ 0x48
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	1c59      	adds	r1, r3, #1
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	1a9b      	subs	r3, r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4403      	add	r3, r0
 8001b58:	3348      	adds	r3, #72	@ 0x48
 8001b5a:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8001b5c:	78fa      	ldrb	r2, [r7, #3]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	3348      	adds	r3, #72	@ 0x48
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d943      	bls.n	8001bfa <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8001b72:	78fa      	ldrb	r2, [r7, #3]
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	1a9b      	subs	r3, r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	440b      	add	r3, r1
 8001b80:	3348      	adds	r3, #72	@ 0x48
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8001b86:	78fa      	ldrb	r2, [r7, #3]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	011b      	lsls	r3, r3, #4
 8001b8e:	1a9b      	subs	r3, r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	331b      	adds	r3, #27
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8001b9a:	78fa      	ldrb	r2, [r7, #3]
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	011b      	lsls	r3, r3, #4
 8001ba2:	1a9b      	subs	r3, r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	3344      	adds	r3, #68	@ 0x44
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d809      	bhi.n	8001bc4 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8001bb0:	78fa      	ldrb	r2, [r7, #3]
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	011b      	lsls	r3, r3, #4
 8001bb8:	1a9b      	subs	r3, r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	331c      	adds	r3, #28
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	015a      	lsls	r2, r3, #5
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4413      	add	r3, r2
 8001bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	78fa      	ldrb	r2, [r7, #3]
 8001bd4:	0151      	lsls	r1, r2, #5
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	440a      	add	r2, r1
 8001bda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001bde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001be2:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8001be4:	78fa      	ldrb	r2, [r7, #3]
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	011b      	lsls	r3, r3, #4
 8001bec:	1a9b      	subs	r3, r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	334c      	adds	r3, #76	@ 0x4c
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	701a      	strb	r2, [r3, #0]
 8001bf8:	e014      	b.n	8001c24 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001bfa:	78fa      	ldrb	r2, [r7, #3]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	011b      	lsls	r3, r3, #4
 8001c02:	1a9b      	subs	r3, r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	334c      	adds	r3, #76	@ 0x4c
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	701a      	strb	r2, [r3, #0]
 8001c0e:	e009      	b.n	8001c24 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001c10:	78fa      	ldrb	r2, [r7, #3]
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	011b      	lsls	r3, r3, #4
 8001c18:	1a9b      	subs	r3, r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	334c      	adds	r3, #76	@ 0x4c
 8001c20:	2202      	movs	r2, #2
 8001c22:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001c24:	78fa      	ldrb	r2, [r7, #3]
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	1a9b      	subs	r3, r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	3326      	adds	r3, #38	@ 0x26
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00b      	beq.n	8001c52 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001c3a:	78fa      	ldrb	r2, [r7, #3]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	1a9b      	subs	r3, r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	440b      	add	r3, r1
 8001c48:	3326      	adds	r3, #38	@ 0x26
 8001c4a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	f040 8136 	bne.w	8001ebe <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	015a      	lsls	r2, r3, #5
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4413      	add	r3, r2
 8001c5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001c68:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001c70:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	015a      	lsls	r2, r3, #5
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4413      	add	r3, r2
 8001c7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c7e:	461a      	mov	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	e11b      	b.n	8001ebe <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8001c86:	78fa      	ldrb	r2, [r7, #3]
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	1a9b      	subs	r3, r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	440b      	add	r3, r1
 8001c94:	334d      	adds	r3, #77	@ 0x4d
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	f040 8081 	bne.w	8001da0 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001c9e:	78fa      	ldrb	r2, [r7, #3]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	1a9b      	subs	r3, r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	334d      	adds	r3, #77	@ 0x4d
 8001cae:	2202      	movs	r2, #2
 8001cb0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001cb2:	78fa      	ldrb	r2, [r7, #3]
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	1a9b      	subs	r3, r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	331b      	adds	r3, #27
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	f040 80fa 	bne.w	8001ebe <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001cca:	78fa      	ldrb	r2, [r7, #3]
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	1a9b      	subs	r3, r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	334c      	adds	r3, #76	@ 0x4c
 8001cda:	2202      	movs	r2, #2
 8001cdc:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	015a      	lsls	r2, r3, #5
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	78fa      	ldrb	r2, [r7, #3]
 8001cee:	0151      	lsls	r1, r2, #5
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	440a      	add	r2, r1
 8001cf4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cfc:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	015a      	lsls	r2, r3, #5
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4413      	add	r3, r2
 8001d06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	78fa      	ldrb	r2, [r7, #3]
 8001d0e:	0151      	lsls	r1, r2, #5
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	440a      	add	r2, r1
 8001d14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d1c:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	015a      	lsls	r2, r3, #5
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4413      	add	r3, r2
 8001d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	78fa      	ldrb	r2, [r7, #3]
 8001d2e:	0151      	lsls	r1, r2, #5
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	440a      	add	r2, r1
 8001d34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001d38:	f023 0320 	bic.w	r3, r3, #32
 8001d3c:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001d3e:	78fa      	ldrb	r2, [r7, #3]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	1a9b      	subs	r3, r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3326      	adds	r3, #38	@ 0x26
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00b      	beq.n	8001d6c <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001d54:	78fa      	ldrb	r2, [r7, #3]
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	1a9b      	subs	r3, r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	3326      	adds	r3, #38	@ 0x26
 8001d64:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	f040 80a9 	bne.w	8001ebe <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	015a      	lsls	r2, r3, #5
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001d82:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001d8a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	015a      	lsls	r2, r3, #5
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d98:	461a      	mov	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	e08e      	b.n	8001ebe <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8001da0:	78fa      	ldrb	r2, [r7, #3]
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	011b      	lsls	r3, r3, #4
 8001da8:	1a9b      	subs	r3, r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	334d      	adds	r3, #77	@ 0x4d
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d143      	bne.n	8001e3e <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001db6:	78fa      	ldrb	r2, [r7, #3]
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	1a9b      	subs	r3, r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	334d      	adds	r3, #77	@ 0x4d
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001dca:	78fa      	ldrb	r2, [r7, #3]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	011b      	lsls	r3, r3, #4
 8001dd2:	1a9b      	subs	r3, r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	334c      	adds	r3, #76	@ 0x4c
 8001dda:	2202      	movs	r2, #2
 8001ddc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001dde:	78fa      	ldrb	r2, [r7, #3]
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	1a9b      	subs	r3, r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	3326      	adds	r3, #38	@ 0x26
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00a      	beq.n	8001e0a <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001df4:	78fa      	ldrb	r2, [r7, #3]
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	1a9b      	subs	r3, r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	3326      	adds	r3, #38	@ 0x26
 8001e04:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d159      	bne.n	8001ebe <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	015a      	lsls	r2, r3, #5
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4413      	add	r3, r2
 8001e12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001e20:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001e28:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	015a      	lsls	r2, r3, #5
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4413      	add	r3, r2
 8001e32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e36:	461a      	mov	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	e03f      	b.n	8001ebe <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8001e3e:	78fa      	ldrb	r2, [r7, #3]
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	1a9b      	subs	r3, r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	334d      	adds	r3, #77	@ 0x4d
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d126      	bne.n	8001ea2 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001e54:	78fa      	ldrb	r2, [r7, #3]
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	334d      	adds	r3, #77	@ 0x4d
 8001e64:	2202      	movs	r2, #2
 8001e66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001e68:	78fa      	ldrb	r2, [r7, #3]
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	011b      	lsls	r3, r3, #4
 8001e70:	1a9b      	subs	r3, r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	3344      	adds	r3, #68	@ 0x44
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	1c59      	adds	r1, r3, #1
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4403      	add	r3, r0
 8001e88:	3344      	adds	r3, #68	@ 0x44
 8001e8a:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8001e8c:	78fa      	ldrb	r2, [r7, #3]
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	1a9b      	subs	r3, r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	334c      	adds	r3, #76	@ 0x4c
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	701a      	strb	r2, [r3, #0]
 8001ea0:	e00d      	b.n	8001ebe <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8001ea2:	78fa      	ldrb	r2, [r7, #3]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	1a9b      	subs	r3, r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	334d      	adds	r3, #77	@ 0x4d
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	f000 8100 	beq.w	80020ba <HCD_HC_IN_IRQHandler+0xcca>
 8001eba:	e000      	b.n	8001ebe <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001ebc:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	1a9b      	subs	r3, r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	334c      	adds	r3, #76	@ 0x4c
 8001ece:	781a      	ldrb	r2, [r3, #0]
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f002 fb92 	bl	80045fe <HAL_HCD_HC_NotifyURBChange_Callback>
 8001eda:	e0ef      	b.n	80020bc <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f002 f88e 	bl	8004006 <USB_ReadChInterrupts>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ef0:	2b40      	cmp	r3, #64	@ 0x40
 8001ef2:	d12f      	bne.n	8001f54 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	015a      	lsls	r2, r3, #5
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f00:	461a      	mov	r2, r3
 8001f02:	2340      	movs	r3, #64	@ 0x40
 8001f04:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8001f06:	78fa      	ldrb	r2, [r7, #3]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	1a9b      	subs	r3, r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	334d      	adds	r3, #77	@ 0x4d
 8001f16:	2205      	movs	r2, #5
 8001f18:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8001f1a:	78fa      	ldrb	r2, [r7, #3]
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	1a9b      	subs	r3, r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	331a      	adds	r3, #26
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d109      	bne.n	8001f44 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001f30:	78fa      	ldrb	r2, [r7, #3]
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	1a9b      	subs	r3, r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	3344      	adds	r3, #68	@ 0x44
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	78fa      	ldrb	r2, [r7, #3]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f002 f8d7 	bl	8004100 <USB_HC_Halt>
 8001f52:	e0b3      	b.n	80020bc <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	78fa      	ldrb	r2, [r7, #3]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f002 f852 	bl	8004006 <USB_ReadChInterrupts>
 8001f62:	4603      	mov	r3, r0
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b10      	cmp	r3, #16
 8001f6a:	f040 80a7 	bne.w	80020bc <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001f6e:	78fa      	ldrb	r2, [r7, #3]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	1a9b      	subs	r3, r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3326      	adds	r3, #38	@ 0x26
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d11b      	bne.n	8001fbc <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001f84:	78fa      	ldrb	r2, [r7, #3]
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	1a9b      	subs	r3, r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	3344      	adds	r3, #68	@ 0x44
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8001f98:	78fa      	ldrb	r2, [r7, #3]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	334d      	adds	r3, #77	@ 0x4d
 8001fa8:	2204      	movs	r2, #4
 8001faa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	78fa      	ldrb	r2, [r7, #3]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f002 f8a3 	bl	8004100 <USB_HC_Halt>
 8001fba:	e03f      	b.n	800203c <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001fbc:	78fa      	ldrb	r2, [r7, #3]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	1a9b      	subs	r3, r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	3326      	adds	r3, #38	@ 0x26
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00a      	beq.n	8001fe8 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001fd2:	78fa      	ldrb	r2, [r7, #3]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	3326      	adds	r3, #38	@ 0x26
 8001fe2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d129      	bne.n	800203c <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001fe8:	78fa      	ldrb	r2, [r7, #3]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3344      	adds	r3, #68	@ 0x44
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	799b      	ldrb	r3, [r3, #6]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00a      	beq.n	800201a <HCD_HC_IN_IRQHandler+0xc2a>
 8002004:	78fa      	ldrb	r2, [r7, #3]
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	331b      	adds	r3, #27
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d110      	bne.n	800203c <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800201a:	78fa      	ldrb	r2, [r7, #3]
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	1a9b      	subs	r3, r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	334d      	adds	r3, #77	@ 0x4d
 800202a:	2204      	movs	r2, #4
 800202c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	78fa      	ldrb	r2, [r7, #3]
 8002034:	4611      	mov	r1, r2
 8002036:	4618      	mov	r0, r3
 8002038:	f002 f862 	bl	8004100 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800203c:	78fa      	ldrb	r2, [r7, #3]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	331b      	adds	r3, #27
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d129      	bne.n	80020a6 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002052:	78fa      	ldrb	r2, [r7, #3]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	1a9b      	subs	r3, r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	331b      	adds	r3, #27
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	015a      	lsls	r2, r3, #5
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4413      	add	r3, r2
 800206e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	78fa      	ldrb	r2, [r7, #3]
 8002076:	0151      	lsls	r1, r2, #5
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	440a      	add	r2, r1
 800207c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002080:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002084:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4413      	add	r3, r2
 800208e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	78fa      	ldrb	r2, [r7, #3]
 8002096:	0151      	lsls	r1, r2, #5
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	440a      	add	r2, r1
 800209c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020a0:	f043 0320 	orr.w	r3, r3, #32
 80020a4:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020b2:	461a      	mov	r2, r3
 80020b4:	2310      	movs	r3, #16
 80020b6:	6093      	str	r3, [r2, #8]
 80020b8:	e000      	b.n	80020bc <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80020ba:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	460b      	mov	r3, r1
 80020cc:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	78fa      	ldrb	r2, [r7, #3]
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f001 ff90 	bl	8004006 <USB_ReadChInterrupts>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d11b      	bne.n	8002128 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020fc:	461a      	mov	r2, r3
 80020fe:	2304      	movs	r3, #4
 8002100:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002102:	78fa      	ldrb	r2, [r7, #3]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	334d      	adds	r3, #77	@ 0x4d
 8002112:	2207      	movs	r2, #7
 8002114:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	78fa      	ldrb	r2, [r7, #3]
 800211c:	4611      	mov	r1, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f001 ffee 	bl	8004100 <USB_HC_Halt>
 8002124:	f000 bc89 	b.w	8002a3a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	78fa      	ldrb	r2, [r7, #3]
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f001 ff68 	bl	8004006 <USB_ReadChInterrupts>
 8002136:	4603      	mov	r3, r0
 8002138:	f003 0320 	and.w	r3, r3, #32
 800213c:	2b20      	cmp	r3, #32
 800213e:	f040 8082 	bne.w	8002246 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4413      	add	r3, r2
 800214a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800214e:	461a      	mov	r2, r3
 8002150:	2320      	movs	r3, #32
 8002152:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002154:	78fa      	ldrb	r2, [r7, #3]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	1a9b      	subs	r3, r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	3319      	adds	r3, #25
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d124      	bne.n	80021b4 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	3319      	adds	r3, #25
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800217e:	78fa      	ldrb	r2, [r7, #3]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	1a9b      	subs	r3, r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	334c      	adds	r3, #76	@ 0x4c
 800218e:	2202      	movs	r2, #2
 8002190:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002192:	78fa      	ldrb	r2, [r7, #3]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	1a9b      	subs	r3, r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	334d      	adds	r3, #77	@ 0x4d
 80021a2:	2203      	movs	r2, #3
 80021a4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	78fa      	ldrb	r2, [r7, #3]
 80021ac:	4611      	mov	r1, r2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f001 ffa6 	bl	8004100 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	331a      	adds	r3, #26
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	f040 8437 	bne.w	8002a3a <HCD_HC_OUT_IRQHandler+0x978>
 80021cc:	78fa      	ldrb	r2, [r7, #3]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	331b      	adds	r3, #27
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f040 842b 	bne.w	8002a3a <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80021e4:	78fa      	ldrb	r2, [r7, #3]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	1a9b      	subs	r3, r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	3326      	adds	r3, #38	@ 0x26
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d009      	beq.n	800220e <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80021fa:	78fa      	ldrb	r2, [r7, #3]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	1a9b      	subs	r3, r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	331b      	adds	r3, #27
 800220a:	2201      	movs	r2, #1
 800220c:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800220e:	78fa      	ldrb	r2, [r7, #3]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	1a9b      	subs	r3, r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	334d      	adds	r3, #77	@ 0x4d
 800221e:	2203      	movs	r2, #3
 8002220:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	78fa      	ldrb	r2, [r7, #3]
 8002228:	4611      	mov	r1, r2
 800222a:	4618      	mov	r0, r3
 800222c:	f001 ff68 	bl	8004100 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	3344      	adds	r3, #68	@ 0x44
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	e3f9      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	78fa      	ldrb	r2, [r7, #3]
 800224c:	4611      	mov	r1, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f001 fed9 	bl	8004006 <USB_ReadChInterrupts>
 8002254:	4603      	mov	r3, r0
 8002256:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800225a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800225e:	d111      	bne.n	8002284 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4413      	add	r3, r2
 8002268:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800226c:	461a      	mov	r2, r3
 800226e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002272:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	78fa      	ldrb	r2, [r7, #3]
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f001 ff3f 	bl	8004100 <USB_HC_Halt>
 8002282:	e3da      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	78fa      	ldrb	r2, [r7, #3]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f001 feba 	bl	8004006 <USB_ReadChInterrupts>
 8002292:	4603      	mov	r3, r0
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b01      	cmp	r3, #1
 800229a:	d168      	bne.n	800236e <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800229c:	78fa      	ldrb	r2, [r7, #3]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	3344      	adds	r3, #68	@ 0x44
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	78fa      	ldrb	r2, [r7, #3]
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f001 fea4 	bl	8004006 <USB_ReadChInterrupts>
 80022be:	4603      	mov	r3, r0
 80022c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022c4:	2b40      	cmp	r3, #64	@ 0x40
 80022c6:	d112      	bne.n	80022ee <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	3319      	adds	r3, #25
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022e8:	461a      	mov	r2, r3
 80022ea:	2340      	movs	r3, #64	@ 0x40
 80022ec:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80022ee:	78fa      	ldrb	r2, [r7, #3]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	331b      	adds	r3, #27
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d019      	beq.n	8002338 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002304:	78fa      	ldrb	r2, [r7, #3]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	331b      	adds	r3, #27
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	78fa      	ldrb	r2, [r7, #3]
 8002328:	0151      	lsls	r1, r2, #5
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	440a      	add	r2, r1
 800232e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002332:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002336:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002344:	461a      	mov	r2, r3
 8002346:	2301      	movs	r3, #1
 8002348:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	334d      	adds	r3, #77	@ 0x4d
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	4611      	mov	r1, r2
 8002366:	4618      	mov	r0, r3
 8002368:	f001 feca 	bl	8004100 <USB_HC_Halt>
 800236c:	e365      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	4611      	mov	r1, r2
 8002376:	4618      	mov	r0, r3
 8002378:	f001 fe45 	bl	8004006 <USB_ReadChInterrupts>
 800237c:	4603      	mov	r3, r0
 800237e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002382:	2b40      	cmp	r3, #64	@ 0x40
 8002384:	d139      	bne.n	80023fa <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002386:	78fa      	ldrb	r2, [r7, #3]
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	1a9b      	subs	r3, r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	440b      	add	r3, r1
 8002394:	334d      	adds	r3, #77	@ 0x4d
 8002396:	2205      	movs	r2, #5
 8002398:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800239a:	78fa      	ldrb	r2, [r7, #3]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	1a9b      	subs	r3, r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	331a      	adds	r3, #26
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d109      	bne.n	80023c4 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80023b0:	78fa      	ldrb	r2, [r7, #3]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	3319      	adds	r3, #25
 80023c0:	2201      	movs	r2, #1
 80023c2:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	3344      	adds	r3, #68	@ 0x44
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f001 fe8d 	bl	8004100 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023f2:	461a      	mov	r2, r3
 80023f4:	2340      	movs	r3, #64	@ 0x40
 80023f6:	6093      	str	r3, [r2, #8]
 80023f8:	e31f      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	4611      	mov	r1, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f001 fdff 	bl	8004006 <USB_ReadChInterrupts>
 8002408:	4603      	mov	r3, r0
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b08      	cmp	r3, #8
 8002410:	d11a      	bne.n	8002448 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	015a      	lsls	r2, r3, #5
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4413      	add	r3, r2
 800241a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800241e:	461a      	mov	r2, r3
 8002420:	2308      	movs	r3, #8
 8002422:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	334d      	adds	r3, #77	@ 0x4d
 8002434:	2206      	movs	r2, #6
 8002436:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f001 fe5d 	bl	8004100 <USB_HC_Halt>
 8002446:	e2f8      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	4611      	mov	r1, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f001 fdd8 	bl	8004006 <USB_ReadChInterrupts>
 8002456:	4603      	mov	r3, r0
 8002458:	f003 0310 	and.w	r3, r3, #16
 800245c:	2b10      	cmp	r3, #16
 800245e:	d144      	bne.n	80024ea <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	1a9b      	subs	r3, r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	3344      	adds	r3, #68	@ 0x44
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	1a9b      	subs	r3, r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	334d      	adds	r3, #77	@ 0x4d
 8002484:	2204      	movs	r2, #4
 8002486:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	1a9b      	subs	r3, r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	3319      	adds	r3, #25
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d114      	bne.n	80024c8 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	1a9b      	subs	r3, r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	3318      	adds	r3, #24
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	3319      	adds	r3, #25
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f001 fe15 	bl	8004100 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024e2:	461a      	mov	r2, r3
 80024e4:	2310      	movs	r3, #16
 80024e6:	6093      	str	r3, [r2, #8]
 80024e8:	e2a7      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	78fa      	ldrb	r2, [r7, #3]
 80024f0:	4611      	mov	r1, r2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f001 fd87 	bl	8004006 <USB_ReadChInterrupts>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024fe:	2b80      	cmp	r3, #128	@ 0x80
 8002500:	f040 8083 	bne.w	800260a <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	799b      	ldrb	r3, [r3, #6]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d111      	bne.n	8002530 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800250c:	78fa      	ldrb	r2, [r7, #3]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	1a9b      	subs	r3, r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	334d      	adds	r3, #77	@ 0x4d
 800251c:	2207      	movs	r2, #7
 800251e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f001 fde9 	bl	8004100 <USB_HC_Halt>
 800252e:	e062      	b.n	80025f6 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002530:	78fa      	ldrb	r2, [r7, #3]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	3344      	adds	r3, #68	@ 0x44
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	1c59      	adds	r1, r3, #1
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	1a9b      	subs	r3, r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4403      	add	r3, r0
 8002550:	3344      	adds	r3, #68	@ 0x44
 8002552:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	3344      	adds	r3, #68	@ 0x44
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d922      	bls.n	80025b0 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800256a:	78fa      	ldrb	r2, [r7, #3]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	1a9b      	subs	r3, r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	3344      	adds	r3, #68	@ 0x44
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	334c      	adds	r3, #76	@ 0x4c
 800258e:	2204      	movs	r2, #4
 8002590:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002592:	78fa      	ldrb	r2, [r7, #3]
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	334c      	adds	r3, #76	@ 0x4c
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	4619      	mov	r1, r3
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f002 f828 	bl	80045fe <HAL_HCD_HC_NotifyURBChange_Callback>
 80025ae:	e022      	b.n	80025f6 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	334c      	adds	r3, #76	@ 0x4c
 80025c0:	2202      	movs	r2, #2
 80025c2:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80025da:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80025e2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	015a      	lsls	r2, r3, #5
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025f0:	461a      	mov	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80025f6:	78fb      	ldrb	r3, [r7, #3]
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002602:	461a      	mov	r2, r3
 8002604:	2380      	movs	r3, #128	@ 0x80
 8002606:	6093      	str	r3, [r2, #8]
 8002608:	e217      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	78fa      	ldrb	r2, [r7, #3]
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f001 fcf7 	bl	8004006 <USB_ReadChInterrupts>
 8002618:	4603      	mov	r3, r0
 800261a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800261e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002622:	d11b      	bne.n	800265c <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002624:	78fa      	ldrb	r2, [r7, #3]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	1a9b      	subs	r3, r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	334d      	adds	r3, #77	@ 0x4d
 8002634:	2209      	movs	r2, #9
 8002636:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f001 fd5d 	bl	8004100 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	015a      	lsls	r2, r3, #5
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4413      	add	r3, r2
 800264e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002652:	461a      	mov	r2, r3
 8002654:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002658:	6093      	str	r3, [r2, #8]
 800265a:	e1ee      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	4611      	mov	r1, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f001 fcce 	bl	8004006 <USB_ReadChInterrupts>
 800266a:	4603      	mov	r3, r0
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b02      	cmp	r3, #2
 8002672:	f040 81df 	bne.w	8002a34 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002676:	78fb      	ldrb	r3, [r7, #3]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4413      	add	r3, r2
 800267e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002682:	461a      	mov	r2, r3
 8002684:	2302      	movs	r3, #2
 8002686:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	334d      	adds	r3, #77	@ 0x4d
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b01      	cmp	r3, #1
 800269c:	f040 8093 	bne.w	80027c6 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	334d      	adds	r3, #77	@ 0x4d
 80026b0:	2202      	movs	r2, #2
 80026b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	334c      	adds	r3, #76	@ 0x4c
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3326      	adds	r3, #38	@ 0x26
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d00b      	beq.n	80026f6 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	3326      	adds	r3, #38	@ 0x26
 80026ee:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	f040 8190 	bne.w	8002a16 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	799b      	ldrb	r3, [r3, #6]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d115      	bne.n	800272a <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80026fe:	78fa      	ldrb	r2, [r7, #3]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	1a9b      	subs	r3, r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	333d      	adds	r3, #61	@ 0x3d
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	f083 0301 	eor.w	r3, r3, #1
 8002716:	b2d8      	uxtb	r0, r3
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	333d      	adds	r3, #61	@ 0x3d
 8002726:	4602      	mov	r2, r0
 8002728:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	799b      	ldrb	r3, [r3, #6]
 800272e:	2b01      	cmp	r3, #1
 8002730:	f040 8171 	bne.w	8002a16 <HCD_HC_OUT_IRQHandler+0x954>
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	3334      	adds	r3, #52	@ 0x34
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 8165 	beq.w	8002a16 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800274c:	78fa      	ldrb	r2, [r7, #3]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	3334      	adds	r3, #52	@ 0x34
 800275c:	6819      	ldr	r1, [r3, #0]
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	1a9b      	subs	r3, r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4403      	add	r3, r0
 800276c:	3328      	adds	r3, #40	@ 0x28
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	440b      	add	r3, r1
 8002772:	1e59      	subs	r1, r3, #1
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4403      	add	r3, r0
 8002782:	3328      	adds	r3, #40	@ 0x28
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	fbb1 f3f3 	udiv	r3, r1, r3
 800278a:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 813f 	beq.w	8002a16 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	333d      	adds	r3, #61	@ 0x3d
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	78fa      	ldrb	r2, [r7, #3]
 80027ac:	f083 0301 	eor.w	r3, r3, #1
 80027b0:	b2d8      	uxtb	r0, r3
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	333d      	adds	r3, #61	@ 0x3d
 80027c0:	4602      	mov	r2, r0
 80027c2:	701a      	strb	r2, [r3, #0]
 80027c4:	e127      	b.n	8002a16 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80027c6:	78fa      	ldrb	r2, [r7, #3]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	1a9b      	subs	r3, r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	334d      	adds	r3, #77	@ 0x4d
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d120      	bne.n	800281e <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	334d      	adds	r3, #77	@ 0x4d
 80027ec:	2202      	movs	r2, #2
 80027ee:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	331b      	adds	r3, #27
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b01      	cmp	r3, #1
 8002804:	f040 8107 	bne.w	8002a16 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002808:	78fa      	ldrb	r2, [r7, #3]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	334c      	adds	r3, #76	@ 0x4c
 8002818:	2202      	movs	r2, #2
 800281a:	701a      	strb	r2, [r3, #0]
 800281c:	e0fb      	b.n	8002a16 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800281e:	78fa      	ldrb	r2, [r7, #3]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	1a9b      	subs	r3, r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	334d      	adds	r3, #77	@ 0x4d
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b04      	cmp	r3, #4
 8002832:	d13a      	bne.n	80028aa <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002834:	78fa      	ldrb	r2, [r7, #3]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	334d      	adds	r3, #77	@ 0x4d
 8002844:	2202      	movs	r2, #2
 8002846:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	334c      	adds	r3, #76	@ 0x4c
 8002858:	2202      	movs	r2, #2
 800285a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800285c:	78fa      	ldrb	r2, [r7, #3]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	331b      	adds	r3, #27
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b01      	cmp	r3, #1
 8002870:	f040 80d1 	bne.w	8002a16 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	331b      	adds	r3, #27
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	78fa      	ldrb	r2, [r7, #3]
 8002898:	0151      	lsls	r1, r2, #5
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	440a      	add	r2, r1
 800289e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028a6:	6053      	str	r3, [r2, #4]
 80028a8:	e0b5      	b.n	8002a16 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80028aa:	78fa      	ldrb	r2, [r7, #3]
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	1a9b      	subs	r3, r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	334d      	adds	r3, #77	@ 0x4d
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b05      	cmp	r3, #5
 80028be:	d114      	bne.n	80028ea <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028c0:	78fa      	ldrb	r2, [r7, #3]
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	334d      	adds	r3, #77	@ 0x4d
 80028d0:	2202      	movs	r2, #2
 80028d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	334c      	adds	r3, #76	@ 0x4c
 80028e4:	2202      	movs	r2, #2
 80028e6:	701a      	strb	r2, [r3, #0]
 80028e8:	e095      	b.n	8002a16 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80028ea:	78fa      	ldrb	r2, [r7, #3]
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	1a9b      	subs	r3, r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	334d      	adds	r3, #77	@ 0x4d
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b06      	cmp	r3, #6
 80028fe:	d114      	bne.n	800292a <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	334d      	adds	r3, #77	@ 0x4d
 8002910:	2202      	movs	r2, #2
 8002912:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	334c      	adds	r3, #76	@ 0x4c
 8002924:	2205      	movs	r2, #5
 8002926:	701a      	strb	r2, [r3, #0]
 8002928:	e075      	b.n	8002a16 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	334d      	adds	r3, #77	@ 0x4d
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b07      	cmp	r3, #7
 800293e:	d00a      	beq.n	8002956 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	334d      	adds	r3, #77	@ 0x4d
 8002950:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002952:	2b09      	cmp	r3, #9
 8002954:	d170      	bne.n	8002a38 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	334d      	adds	r3, #77	@ 0x4d
 8002966:	2202      	movs	r2, #2
 8002968:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	3344      	adds	r3, #68	@ 0x44
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	1c59      	adds	r1, r3, #1
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4403      	add	r3, r0
 800298a:	3344      	adds	r3, #68	@ 0x44
 800298c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800298e:	78fa      	ldrb	r2, [r7, #3]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	3344      	adds	r3, #68	@ 0x44
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d914      	bls.n	80029ce <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80029a4:	78fa      	ldrb	r2, [r7, #3]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	3344      	adds	r3, #68	@ 0x44
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	334c      	adds	r3, #76	@ 0x4c
 80029c8:	2204      	movs	r2, #4
 80029ca:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80029cc:	e022      	b.n	8002a14 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029ce:	78fa      	ldrb	r2, [r7, #3]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	1a9b      	subs	r3, r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	334c      	adds	r3, #76	@ 0x4c
 80029de:	2202      	movs	r2, #2
 80029e0:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80029f8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a00:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a02:	78fb      	ldrb	r3, [r7, #3]
 8002a04:	015a      	lsls	r2, r3, #5
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a14:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	334c      	adds	r3, #76	@ 0x4c
 8002a26:	781a      	ldrb	r2, [r3, #0]
 8002a28:	78fb      	ldrb	r3, [r7, #3]
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f001 fde6 	bl	80045fe <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a32:	e002      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8002a34:	bf00      	nop
 8002a36:	e000      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8002a38:	bf00      	nop
  }
}
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	@ 0x28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	0c5b      	lsrs	r3, r3, #17
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	091b      	lsrs	r3, r3, #4
 8002a70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a74:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d004      	beq.n	8002a86 <HCD_RXQLVL_IRQHandler+0x46>
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2b05      	cmp	r3, #5
 8002a80:	f000 80b6 	beq.w	8002bf0 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a84:	e0b7      	b.n	8002bf6 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 80b3 	beq.w	8002bf4 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4613      	mov	r3, r2
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	332c      	adds	r3, #44	@ 0x2c
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 80a7 	beq.w	8002bf4 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	1a9b      	subs	r3, r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	3338      	adds	r3, #56	@ 0x38
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	18d1      	adds	r1, r2, r3
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4403      	add	r3, r0
 8002aca:	3334      	adds	r3, #52	@ 0x34
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4299      	cmp	r1, r3
 8002ad0:	f200 8083 	bhi.w	8002bda <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4613      	mov	r3, r2
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	332c      	adds	r3, #44	@ 0x2c
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	b292      	uxth	r2, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	f001 fa1e 	bl	8003f30 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4613      	mov	r3, r2
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	332c      	adds	r3, #44	@ 0x2c
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	18d1      	adds	r1, r2, r3
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4403      	add	r3, r0
 8002b18:	332c      	adds	r3, #44	@ 0x2c
 8002b1a:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4613      	mov	r3, r2
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	1a9b      	subs	r3, r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	3338      	adds	r3, #56	@ 0x38
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	18d1      	adds	r1, r2, r3
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4613      	mov	r3, r2
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	1a9b      	subs	r3, r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4403      	add	r3, r0
 8002b40:	3338      	adds	r3, #56	@ 0x38
 8002b42:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	0cdb      	lsrs	r3, r3, #19
 8002b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b58:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	3328      	adds	r3, #40	@ 0x28
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d13f      	bne.n	8002bf4 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d03c      	beq.n	8002bf4 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b90:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b98:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	015a      	lsls	r2, r3, #5
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	1a9b      	subs	r3, r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	333c      	adds	r3, #60	@ 0x3c
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	f083 0301 	eor.w	r3, r3, #1
 8002bc2:	b2d8      	uxtb	r0, r3
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	333c      	adds	r3, #60	@ 0x3c
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	701a      	strb	r2, [r3, #0]
      break;
 8002bd8:	e00c      	b.n	8002bf4 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4613      	mov	r3, r2
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	1a9b      	subs	r3, r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	334c      	adds	r3, #76	@ 0x4c
 8002bea:	2204      	movs	r2, #4
 8002bec:	701a      	strb	r2, [r3, #0]
      break;
 8002bee:	e001      	b.n	8002bf4 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8002bf0:	bf00      	nop
 8002bf2:	e000      	b.n	8002bf6 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8002bf4:	bf00      	nop
  }
}
 8002bf6:	bf00      	nop
 8002bf8:	3728      	adds	r7, #40	@ 0x28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b086      	sub	sp, #24
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8002c2a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d10b      	bne.n	8002c4e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d102      	bne.n	8002c46 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f001 fcc0 	bl	80045c6 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	f043 0302 	orr.w	r3, r3, #2
 8002c4c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d132      	bne.n	8002cbe <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f043 0308 	orr.w	r3, r3, #8
 8002c5e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d126      	bne.n	8002cb8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	7a5b      	ldrb	r3, [r3, #9]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d113      	bne.n	8002c9a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8002c78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c7c:	d106      	bne.n	8002c8c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2102      	movs	r1, #2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f001 f9ed 	bl	8004064 <USB_InitFSLSPClkSel>
 8002c8a:	e011      	b.n	8002cb0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2101      	movs	r1, #1
 8002c92:	4618      	mov	r0, r3
 8002c94:	f001 f9e6 	bl	8004064 <USB_InitFSLSPClkSel>
 8002c98:	e00a      	b.n	8002cb0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	79db      	ldrb	r3, [r3, #7]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d106      	bne.n	8002cb0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ca8:	461a      	mov	r2, r3
 8002caa:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002cae:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f001 fcb2 	bl	800461a <HAL_HCD_PortEnabled_Callback>
 8002cb6:	e002      	b.n	8002cbe <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f001 fcbc 	bl	8004636 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d103      	bne.n	8002cd0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f043 0320 	orr.w	r3, r3, #32
 8002cce:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	6013      	str	r3, [r2, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e267      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d075      	beq.n	8002dee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d02:	4b88      	ldr	r3, [pc, #544]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d00c      	beq.n	8002d28 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d0e:	4b85      	ldr	r3, [pc, #532]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	d112      	bne.n	8002d40 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d1a:	4b82      	ldr	r3, [pc, #520]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d26:	d10b      	bne.n	8002d40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d28:	4b7e      	ldr	r3, [pc, #504]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d05b      	beq.n	8002dec <HAL_RCC_OscConfig+0x108>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d157      	bne.n	8002dec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e242      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d48:	d106      	bne.n	8002d58 <HAL_RCC_OscConfig+0x74>
 8002d4a:	4b76      	ldr	r3, [pc, #472]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a75      	ldr	r2, [pc, #468]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	e01d      	b.n	8002d94 <HAL_RCC_OscConfig+0xb0>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d60:	d10c      	bne.n	8002d7c <HAL_RCC_OscConfig+0x98>
 8002d62:	4b70      	ldr	r3, [pc, #448]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a6f      	ldr	r2, [pc, #444]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	4b6d      	ldr	r3, [pc, #436]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a6c      	ldr	r2, [pc, #432]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	e00b      	b.n	8002d94 <HAL_RCC_OscConfig+0xb0>
 8002d7c:	4b69      	ldr	r3, [pc, #420]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a68      	ldr	r2, [pc, #416]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	4b66      	ldr	r3, [pc, #408]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a65      	ldr	r2, [pc, #404]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002d8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d013      	beq.n	8002dc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7fd ff3c 	bl	8000c18 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da4:	f7fd ff38 	bl	8000c18 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	@ 0x64
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e207      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db6:	4b5b      	ldr	r3, [pc, #364]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCC_OscConfig+0xc0>
 8002dc2:	e014      	b.n	8002dee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc4:	f7fd ff28 	bl	8000c18 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dcc:	f7fd ff24 	bl	8000c18 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b64      	cmp	r3, #100	@ 0x64
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e1f3      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dde:	4b51      	ldr	r3, [pc, #324]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0xe8>
 8002dea:	e000      	b.n	8002dee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d063      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002dfa:	4b4a      	ldr	r3, [pc, #296]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00b      	beq.n	8002e1e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e06:	4b47      	ldr	r3, [pc, #284]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d11c      	bne.n	8002e4c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e12:	4b44      	ldr	r3, [pc, #272]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d116      	bne.n	8002e4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e1e:	4b41      	ldr	r3, [pc, #260]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <HAL_RCC_OscConfig+0x152>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d001      	beq.n	8002e36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e1c7      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e36:	4b3b      	ldr	r3, [pc, #236]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4937      	ldr	r1, [pc, #220]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4a:	e03a      	b.n	8002ec2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d020      	beq.n	8002e96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e54:	4b34      	ldr	r3, [pc, #208]	@ (8002f28 <HAL_RCC_OscConfig+0x244>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5a:	f7fd fedd 	bl	8000c18 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e62:	f7fd fed9 	bl	8000c18 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e1a8      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e74:	4b2b      	ldr	r3, [pc, #172]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e80:	4b28      	ldr	r3, [pc, #160]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4925      	ldr	r1, [pc, #148]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	600b      	str	r3, [r1, #0]
 8002e94:	e015      	b.n	8002ec2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e96:	4b24      	ldr	r3, [pc, #144]	@ (8002f28 <HAL_RCC_OscConfig+0x244>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9c:	f7fd febc 	bl	8000c18 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea4:	f7fd feb8 	bl	8000c18 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e187      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f0      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d036      	beq.n	8002f3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d016      	beq.n	8002f04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ed6:	4b15      	ldr	r3, [pc, #84]	@ (8002f2c <HAL_RCC_OscConfig+0x248>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002edc:	f7fd fe9c 	bl	8000c18 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee4:	f7fd fe98 	bl	8000c18 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e167      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8002f24 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x200>
 8002f02:	e01b      	b.n	8002f3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f04:	4b09      	ldr	r3, [pc, #36]	@ (8002f2c <HAL_RCC_OscConfig+0x248>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0a:	f7fd fe85 	bl	8000c18 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f10:	e00e      	b.n	8002f30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f12:	f7fd fe81 	bl	8000c18 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d907      	bls.n	8002f30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e150      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
 8002f24:	40023800 	.word	0x40023800
 8002f28:	42470000 	.word	0x42470000
 8002f2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f30:	4b88      	ldr	r3, [pc, #544]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002f32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1ea      	bne.n	8002f12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 8097 	beq.w	8003078 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f4e:	4b81      	ldr	r3, [pc, #516]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10f      	bne.n	8002f7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	4b7d      	ldr	r3, [pc, #500]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	4a7c      	ldr	r2, [pc, #496]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f6a:	4b7a      	ldr	r3, [pc, #488]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f72:	60bb      	str	r3, [r7, #8]
 8002f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f76:	2301      	movs	r3, #1
 8002f78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7a:	4b77      	ldr	r3, [pc, #476]	@ (8003158 <HAL_RCC_OscConfig+0x474>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d118      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f86:	4b74      	ldr	r3, [pc, #464]	@ (8003158 <HAL_RCC_OscConfig+0x474>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a73      	ldr	r2, [pc, #460]	@ (8003158 <HAL_RCC_OscConfig+0x474>)
 8002f8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f92:	f7fd fe41 	bl	8000c18 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9a:	f7fd fe3d 	bl	8000c18 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e10c      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fac:	4b6a      	ldr	r3, [pc, #424]	@ (8003158 <HAL_RCC_OscConfig+0x474>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d106      	bne.n	8002fce <HAL_RCC_OscConfig+0x2ea>
 8002fc0:	4b64      	ldr	r3, [pc, #400]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc4:	4a63      	ldr	r2, [pc, #396]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fcc:	e01c      	b.n	8003008 <HAL_RCC_OscConfig+0x324>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b05      	cmp	r3, #5
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x30c>
 8002fd6:	4b5f      	ldr	r3, [pc, #380]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fda:	4a5e      	ldr	r2, [pc, #376]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	f043 0304 	orr.w	r3, r3, #4
 8002fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe2:	4b5c      	ldr	r3, [pc, #368]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe6:	4a5b      	ldr	r2, [pc, #364]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fee:	e00b      	b.n	8003008 <HAL_RCC_OscConfig+0x324>
 8002ff0:	4b58      	ldr	r3, [pc, #352]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff4:	4a57      	ldr	r2, [pc, #348]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002ff6:	f023 0301 	bic.w	r3, r3, #1
 8002ffa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ffc:	4b55      	ldr	r3, [pc, #340]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003000:	4a54      	ldr	r2, [pc, #336]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8003002:	f023 0304 	bic.w	r3, r3, #4
 8003006:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d015      	beq.n	800303c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003010:	f7fd fe02 	bl	8000c18 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003016:	e00a      	b.n	800302e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003018:	f7fd fdfe 	bl	8000c18 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003026:	4293      	cmp	r3, r2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e0cb      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302e:	4b49      	ldr	r3, [pc, #292]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0ee      	beq.n	8003018 <HAL_RCC_OscConfig+0x334>
 800303a:	e014      	b.n	8003066 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303c:	f7fd fdec 	bl	8000c18 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003042:	e00a      	b.n	800305a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003044:	f7fd fde8 	bl	8000c18 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003052:	4293      	cmp	r3, r2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e0b5      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800305a:	4b3e      	ldr	r3, [pc, #248]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1ee      	bne.n	8003044 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003066:	7dfb      	ldrb	r3, [r7, #23]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d105      	bne.n	8003078 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800306c:	4b39      	ldr	r3, [pc, #228]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 800306e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003070:	4a38      	ldr	r2, [pc, #224]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8003072:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003076:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80a1 	beq.w	80031c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003082:	4b34      	ldr	r3, [pc, #208]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 030c 	and.w	r3, r3, #12
 800308a:	2b08      	cmp	r3, #8
 800308c:	d05c      	beq.n	8003148 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d141      	bne.n	800311a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003096:	4b31      	ldr	r3, [pc, #196]	@ (800315c <HAL_RCC_OscConfig+0x478>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fd fdbc 	bl	8000c18 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fd fdb8 	bl	8000c18 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e087      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b6:	4b27      	ldr	r3, [pc, #156]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69da      	ldr	r2, [r3, #28]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d0:	019b      	lsls	r3, r3, #6
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d8:	085b      	lsrs	r3, r3, #1
 80030da:	3b01      	subs	r3, #1
 80030dc:	041b      	lsls	r3, r3, #16
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e4:	061b      	lsls	r3, r3, #24
 80030e6:	491b      	ldr	r1, [pc, #108]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ec:	4b1b      	ldr	r3, [pc, #108]	@ (800315c <HAL_RCC_OscConfig+0x478>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f2:	f7fd fd91 	bl	8000c18 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fa:	f7fd fd8d 	bl	8000c18 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e05c      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800310c:	4b11      	ldr	r3, [pc, #68]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0x416>
 8003118:	e054      	b.n	80031c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311a:	4b10      	ldr	r3, [pc, #64]	@ (800315c <HAL_RCC_OscConfig+0x478>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7fd fd7a 	bl	8000c18 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003128:	f7fd fd76 	bl	8000c18 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e045      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313a:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <HAL_RCC_OscConfig+0x470>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x444>
 8003146:	e03d      	b.n	80031c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d107      	bne.n	8003160 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e038      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
 8003154:	40023800 	.word	0x40023800
 8003158:	40007000 	.word	0x40007000
 800315c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003160:	4b1b      	ldr	r3, [pc, #108]	@ (80031d0 <HAL_RCC_OscConfig+0x4ec>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d028      	beq.n	80031c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003178:	429a      	cmp	r2, r3
 800317a:	d121      	bne.n	80031c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003186:	429a      	cmp	r2, r3
 8003188:	d11a      	bne.n	80031c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003190:	4013      	ands	r3, r2
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003196:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003198:	4293      	cmp	r3, r2
 800319a:	d111      	bne.n	80031c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a6:	085b      	lsrs	r3, r3, #1
 80031a8:	3b01      	subs	r3, #1
 80031aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d107      	bne.n	80031c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800

080031d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0cc      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031e8:	4b68      	ldr	r3, [pc, #416]	@ (800338c <HAL_RCC_ClockConfig+0x1b8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d90c      	bls.n	8003210 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b65      	ldr	r3, [pc, #404]	@ (800338c <HAL_RCC_ClockConfig+0x1b8>)
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fe:	4b63      	ldr	r3, [pc, #396]	@ (800338c <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d001      	beq.n	8003210 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0b8      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d020      	beq.n	800325e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003228:	4b59      	ldr	r3, [pc, #356]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	4a58      	ldr	r2, [pc, #352]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003232:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003240:	4b53      	ldr	r3, [pc, #332]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4a52      	ldr	r2, [pc, #328]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800324a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800324c:	4b50      	ldr	r3, [pc, #320]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	494d      	ldr	r1, [pc, #308]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	4313      	orrs	r3, r2
 800325c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d044      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d107      	bne.n	8003282 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	4b47      	ldr	r3, [pc, #284]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d119      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e07f      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d003      	beq.n	8003292 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800328e:	2b03      	cmp	r3, #3
 8003290:	d107      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003292:	4b3f      	ldr	r3, [pc, #252]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d109      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e06f      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e067      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032b2:	4b37      	ldr	r3, [pc, #220]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f023 0203 	bic.w	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	4934      	ldr	r1, [pc, #208]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c4:	f7fd fca8 	bl	8000c18 <HAL_GetTick>
 80032c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ca:	e00a      	b.n	80032e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032cc:	f7fd fca4 	bl	8000c18 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e04f      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 020c 	and.w	r2, r3, #12
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d1eb      	bne.n	80032cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032f4:	4b25      	ldr	r3, [pc, #148]	@ (800338c <HAL_RCC_ClockConfig+0x1b8>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d20c      	bcs.n	800331c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003302:	4b22      	ldr	r3, [pc, #136]	@ (800338c <HAL_RCC_ClockConfig+0x1b8>)
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800330a:	4b20      	ldr	r3, [pc, #128]	@ (800338c <HAL_RCC_ClockConfig+0x1b8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d001      	beq.n	800331c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e032      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003328:	4b19      	ldr	r3, [pc, #100]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4916      	ldr	r1, [pc, #88]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	4313      	orrs	r3, r2
 8003338:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d009      	beq.n	800335a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003346:	4b12      	ldr	r3, [pc, #72]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	490e      	ldr	r1, [pc, #56]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800335a:	f000 f821 	bl	80033a0 <HAL_RCC_GetSysClockFreq>
 800335e:	4602      	mov	r2, r0
 8003360:	4b0b      	ldr	r3, [pc, #44]	@ (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	091b      	lsrs	r3, r3, #4
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	490a      	ldr	r1, [pc, #40]	@ (8003394 <HAL_RCC_ClockConfig+0x1c0>)
 800336c:	5ccb      	ldrb	r3, [r1, r3]
 800336e:	fa22 f303 	lsr.w	r3, r2, r3
 8003372:	4a09      	ldr	r2, [pc, #36]	@ (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003376:	4b09      	ldr	r3, [pc, #36]	@ (800339c <HAL_RCC_ClockConfig+0x1c8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7fd fc08 	bl	8000b90 <HAL_InitTick>

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40023c00 	.word	0x40023c00
 8003390:	40023800 	.word	0x40023800
 8003394:	08004764 	.word	0x08004764
 8003398:	20000138 	.word	0x20000138
 800339c:	2000013c 	.word	0x2000013c

080033a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a4:	b094      	sub	sp, #80	@ 0x50
 80033a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033b8:	4b79      	ldr	r3, [pc, #484]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 030c 	and.w	r3, r3, #12
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d00d      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0x40>
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	f200 80e1 	bhi.w	800358c <HAL_RCC_GetSysClockFreq+0x1ec>
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <HAL_RCC_GetSysClockFreq+0x34>
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d003      	beq.n	80033da <HAL_RCC_GetSysClockFreq+0x3a>
 80033d2:	e0db      	b.n	800358c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033d4:	4b73      	ldr	r3, [pc, #460]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80033d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033d8:	e0db      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033da:	4b73      	ldr	r3, [pc, #460]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80033dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033de:	e0d8      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033e0:	4b6f      	ldr	r3, [pc, #444]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ea:	4b6d      	ldr	r3, [pc, #436]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d063      	beq.n	80034be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f6:	4b6a      	ldr	r3, [pc, #424]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	099b      	lsrs	r3, r3, #6
 80033fc:	2200      	movs	r2, #0
 80033fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003400:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003408:	633b      	str	r3, [r7, #48]	@ 0x30
 800340a:	2300      	movs	r3, #0
 800340c:	637b      	str	r3, [r7, #52]	@ 0x34
 800340e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003412:	4622      	mov	r2, r4
 8003414:	462b      	mov	r3, r5
 8003416:	f04f 0000 	mov.w	r0, #0
 800341a:	f04f 0100 	mov.w	r1, #0
 800341e:	0159      	lsls	r1, r3, #5
 8003420:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003424:	0150      	lsls	r0, r2, #5
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	4621      	mov	r1, r4
 800342c:	1a51      	subs	r1, r2, r1
 800342e:	6139      	str	r1, [r7, #16]
 8003430:	4629      	mov	r1, r5
 8003432:	eb63 0301 	sbc.w	r3, r3, r1
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003444:	4659      	mov	r1, fp
 8003446:	018b      	lsls	r3, r1, #6
 8003448:	4651      	mov	r1, sl
 800344a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800344e:	4651      	mov	r1, sl
 8003450:	018a      	lsls	r2, r1, #6
 8003452:	4651      	mov	r1, sl
 8003454:	ebb2 0801 	subs.w	r8, r2, r1
 8003458:	4659      	mov	r1, fp
 800345a:	eb63 0901 	sbc.w	r9, r3, r1
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800346a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800346e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003472:	4690      	mov	r8, r2
 8003474:	4699      	mov	r9, r3
 8003476:	4623      	mov	r3, r4
 8003478:	eb18 0303 	adds.w	r3, r8, r3
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	462b      	mov	r3, r5
 8003480:	eb49 0303 	adc.w	r3, r9, r3
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003492:	4629      	mov	r1, r5
 8003494:	024b      	lsls	r3, r1, #9
 8003496:	4621      	mov	r1, r4
 8003498:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800349c:	4621      	mov	r1, r4
 800349e:	024a      	lsls	r2, r1, #9
 80034a0:	4610      	mov	r0, r2
 80034a2:	4619      	mov	r1, r3
 80034a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034a6:	2200      	movs	r2, #0
 80034a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034b0:	f7fc fe8a 	bl	80001c8 <__aeabi_uldivmod>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4613      	mov	r3, r2
 80034ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034bc:	e058      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034be:	4b38      	ldr	r3, [pc, #224]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	099b      	lsrs	r3, r3, #6
 80034c4:	2200      	movs	r2, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	4611      	mov	r1, r2
 80034ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034ce:	623b      	str	r3, [r7, #32]
 80034d0:	2300      	movs	r3, #0
 80034d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80034d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034d8:	4642      	mov	r2, r8
 80034da:	464b      	mov	r3, r9
 80034dc:	f04f 0000 	mov.w	r0, #0
 80034e0:	f04f 0100 	mov.w	r1, #0
 80034e4:	0159      	lsls	r1, r3, #5
 80034e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ea:	0150      	lsls	r0, r2, #5
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4641      	mov	r1, r8
 80034f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80034f6:	4649      	mov	r1, r9
 80034f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003508:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800350c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003510:	ebb2 040a 	subs.w	r4, r2, sl
 8003514:	eb63 050b 	sbc.w	r5, r3, fp
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	00eb      	lsls	r3, r5, #3
 8003522:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003526:	00e2      	lsls	r2, r4, #3
 8003528:	4614      	mov	r4, r2
 800352a:	461d      	mov	r5, r3
 800352c:	4643      	mov	r3, r8
 800352e:	18e3      	adds	r3, r4, r3
 8003530:	603b      	str	r3, [r7, #0]
 8003532:	464b      	mov	r3, r9
 8003534:	eb45 0303 	adc.w	r3, r5, r3
 8003538:	607b      	str	r3, [r7, #4]
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003546:	4629      	mov	r1, r5
 8003548:	028b      	lsls	r3, r1, #10
 800354a:	4621      	mov	r1, r4
 800354c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003550:	4621      	mov	r1, r4
 8003552:	028a      	lsls	r2, r1, #10
 8003554:	4610      	mov	r0, r2
 8003556:	4619      	mov	r1, r3
 8003558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800355a:	2200      	movs	r2, #0
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	61fa      	str	r2, [r7, #28]
 8003560:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003564:	f7fc fe30 	bl	80001c8 <__aeabi_uldivmod>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4613      	mov	r3, r2
 800356e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003570:	4b0b      	ldr	r3, [pc, #44]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	0c1b      	lsrs	r3, r3, #16
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	3301      	adds	r3, #1
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003580:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003584:	fbb2 f3f3 	udiv	r3, r2, r3
 8003588:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800358a:	e002      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800358c:	4b05      	ldr	r3, [pc, #20]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800358e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003590:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003592:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003594:	4618      	mov	r0, r3
 8003596:	3750      	adds	r7, #80	@ 0x50
 8003598:	46bd      	mov	sp, r7
 800359a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800
 80035a4:	00f42400 	.word	0x00f42400
 80035a8:	007a1200 	.word	0x007a1200

080035ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035b0:	4b03      	ldr	r3, [pc, #12]	@ (80035c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035b2:	681b      	ldr	r3, [r3, #0]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	20000138 	.word	0x20000138

080035c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035c8:	f7ff fff0 	bl	80035ac <HAL_RCC_GetHCLKFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b05      	ldr	r3, [pc, #20]	@ (80035e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	0a9b      	lsrs	r3, r3, #10
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	4903      	ldr	r1, [pc, #12]	@ (80035e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40023800 	.word	0x40023800
 80035e8:	08004774 	.word	0x08004774

080035ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035f0:	f7ff ffdc 	bl	80035ac <HAL_RCC_GetHCLKFreq>
 80035f4:	4602      	mov	r2, r0
 80035f6:	4b05      	ldr	r3, [pc, #20]	@ (800360c <HAL_RCC_GetPCLK2Freq+0x20>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	0b5b      	lsrs	r3, r3, #13
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	4903      	ldr	r1, [pc, #12]	@ (8003610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003602:	5ccb      	ldrb	r3, [r1, r3]
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003608:	4618      	mov	r0, r3
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40023800 	.word	0x40023800
 8003610:	08004774 	.word	0x08004774

08003614 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e042      	b.n	80036ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fd fa14 	bl	8000a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2224      	movs	r2, #36	@ 0x24
 8003644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003656:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f973 	bl	8003944 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800366c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800367c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800368c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	@ 0x28
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	4613      	mov	r3, r2
 80036c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	d175      	bne.n	80037c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <HAL_UART_Transmit+0x2c>
 80036da:	88fb      	ldrh	r3, [r7, #6]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e06e      	b.n	80037c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2221      	movs	r2, #33	@ 0x21
 80036ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036f2:	f7fd fa91 	bl	8000c18 <HAL_GetTick>
 80036f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	88fa      	ldrh	r2, [r7, #6]
 80036fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	88fa      	ldrh	r2, [r7, #6]
 8003702:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800370c:	d108      	bne.n	8003720 <HAL_UART_Transmit+0x6c>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d104      	bne.n	8003720 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	61bb      	str	r3, [r7, #24]
 800371e:	e003      	b.n	8003728 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003724:	2300      	movs	r3, #0
 8003726:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003728:	e02e      	b.n	8003788 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2200      	movs	r2, #0
 8003732:	2180      	movs	r1, #128	@ 0x80
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 f848 	bl	80037ca <UART_WaitOnFlagUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e03a      	b.n	80037c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10b      	bne.n	800376a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003760:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	3302      	adds	r3, #2
 8003766:	61bb      	str	r3, [r7, #24]
 8003768:	e007      	b.n	800377a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	3301      	adds	r3, #1
 8003778:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1cb      	bne.n	800372a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2200      	movs	r2, #0
 800379a:	2140      	movs	r1, #64	@ 0x40
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 f814 	bl	80037ca <UART_WaitOnFlagUntilTimeout>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e006      	b.n	80037c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	e000      	b.n	80037c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80037c0:	2302      	movs	r3, #2
  }
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b086      	sub	sp, #24
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	603b      	str	r3, [r7, #0]
 80037d6:	4613      	mov	r3, r2
 80037d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037da:	e03b      	b.n	8003854 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e2:	d037      	beq.n	8003854 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e4:	f7fd fa18 	bl	8000c18 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	6a3a      	ldr	r2, [r7, #32]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d302      	bcc.n	80037fa <UART_WaitOnFlagUntilTimeout+0x30>
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e03a      	b.n	8003874 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d023      	beq.n	8003854 <UART_WaitOnFlagUntilTimeout+0x8a>
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b80      	cmp	r3, #128	@ 0x80
 8003810:	d020      	beq.n	8003854 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b40      	cmp	r3, #64	@ 0x40
 8003816:	d01d      	beq.n	8003854 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b08      	cmp	r3, #8
 8003824:	d116      	bne.n	8003854 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f81d 	bl	800387c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2208      	movs	r2, #8
 8003846:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e00f      	b.n	8003874 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	4013      	ands	r3, r2
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	429a      	cmp	r2, r3
 8003862:	bf0c      	ite	eq
 8003864:	2301      	moveq	r3, #1
 8003866:	2300      	movne	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	461a      	mov	r2, r3
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	429a      	cmp	r2, r3
 8003870:	d0b4      	beq.n	80037dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800387c:	b480      	push	{r7}
 800387e:	b095      	sub	sp, #84	@ 0x54
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	330c      	adds	r3, #12
 800388a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800388e:	e853 3f00 	ldrex	r3, [r3]
 8003892:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003896:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800389a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	330c      	adds	r3, #12
 80038a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80038a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038ac:	e841 2300 	strex	r3, r2, [r1]
 80038b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1e5      	bne.n	8003884 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3314      	adds	r3, #20
 80038be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	e853 3f00 	ldrex	r3, [r3]
 80038c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f023 0301 	bic.w	r3, r3, #1
 80038ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3314      	adds	r3, #20
 80038d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038e0:	e841 2300 	strex	r3, r2, [r1]
 80038e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1e5      	bne.n	80038b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d119      	bne.n	8003928 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	330c      	adds	r3, #12
 80038fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	e853 3f00 	ldrex	r3, [r3]
 8003902:	60bb      	str	r3, [r7, #8]
   return(result);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f023 0310 	bic.w	r3, r3, #16
 800390a:	647b      	str	r3, [r7, #68]	@ 0x44
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	330c      	adds	r3, #12
 8003912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003914:	61ba      	str	r2, [r7, #24]
 8003916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003918:	6979      	ldr	r1, [r7, #20]
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	e841 2300 	strex	r3, r2, [r1]
 8003920:	613b      	str	r3, [r7, #16]
   return(result);
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e5      	bne.n	80038f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003936:	bf00      	nop
 8003938:	3754      	adds	r7, #84	@ 0x54
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
	...

08003944 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003948:	b0c0      	sub	sp, #256	@ 0x100
 800394a:	af00      	add	r7, sp, #0
 800394c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003960:	68d9      	ldr	r1, [r3, #12]
 8003962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	ea40 0301 	orr.w	r3, r0, r1
 800396c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800396e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	431a      	orrs	r2, r3
 800397c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	431a      	orrs	r2, r3
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800399c:	f021 010c 	bic.w	r1, r1, #12
 80039a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80039aa:	430b      	orrs	r3, r1
 80039ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80039ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039be:	6999      	ldr	r1, [r3, #24]
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	ea40 0301 	orr.w	r3, r0, r1
 80039ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	4b8f      	ldr	r3, [pc, #572]	@ (8003c10 <UART_SetConfig+0x2cc>)
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d005      	beq.n	80039e4 <UART_SetConfig+0xa0>
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	4b8d      	ldr	r3, [pc, #564]	@ (8003c14 <UART_SetConfig+0x2d0>)
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d104      	bne.n	80039ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039e4:	f7ff fe02 	bl	80035ec <HAL_RCC_GetPCLK2Freq>
 80039e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80039ec:	e003      	b.n	80039f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039ee:	f7ff fde9 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 80039f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a00:	f040 810c 	bne.w	8003c1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a16:	4622      	mov	r2, r4
 8003a18:	462b      	mov	r3, r5
 8003a1a:	1891      	adds	r1, r2, r2
 8003a1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a1e:	415b      	adcs	r3, r3
 8003a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a26:	4621      	mov	r1, r4
 8003a28:	eb12 0801 	adds.w	r8, r2, r1
 8003a2c:	4629      	mov	r1, r5
 8003a2e:	eb43 0901 	adc.w	r9, r3, r1
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a46:	4690      	mov	r8, r2
 8003a48:	4699      	mov	r9, r3
 8003a4a:	4623      	mov	r3, r4
 8003a4c:	eb18 0303 	adds.w	r3, r8, r3
 8003a50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a54:	462b      	mov	r3, r5
 8003a56:	eb49 0303 	adc.w	r3, r9, r3
 8003a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a72:	460b      	mov	r3, r1
 8003a74:	18db      	adds	r3, r3, r3
 8003a76:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a78:	4613      	mov	r3, r2
 8003a7a:	eb42 0303 	adc.w	r3, r2, r3
 8003a7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a88:	f7fc fb9e 	bl	80001c8 <__aeabi_uldivmod>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4b61      	ldr	r3, [pc, #388]	@ (8003c18 <UART_SetConfig+0x2d4>)
 8003a92:	fba3 2302 	umull	r2, r3, r3, r2
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	011c      	lsls	r4, r3, #4
 8003a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003aa4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003aa8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003aac:	4642      	mov	r2, r8
 8003aae:	464b      	mov	r3, r9
 8003ab0:	1891      	adds	r1, r2, r2
 8003ab2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ab4:	415b      	adcs	r3, r3
 8003ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ab8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003abc:	4641      	mov	r1, r8
 8003abe:	eb12 0a01 	adds.w	sl, r2, r1
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ad4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ad8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003adc:	4692      	mov	sl, r2
 8003ade:	469b      	mov	fp, r3
 8003ae0:	4643      	mov	r3, r8
 8003ae2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ae6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003aea:	464b      	mov	r3, r9
 8003aec:	eb4b 0303 	adc.w	r3, fp, r3
 8003af0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	18db      	adds	r3, r3, r3
 8003b0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b0e:	4613      	mov	r3, r2
 8003b10:	eb42 0303 	adc.w	r3, r2, r3
 8003b14:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b1e:	f7fc fb53 	bl	80001c8 <__aeabi_uldivmod>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4611      	mov	r1, r2
 8003b28:	4b3b      	ldr	r3, [pc, #236]	@ (8003c18 <UART_SetConfig+0x2d4>)
 8003b2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	2264      	movs	r2, #100	@ 0x64
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
 8003b36:	1acb      	subs	r3, r1, r3
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b3e:	4b36      	ldr	r3, [pc, #216]	@ (8003c18 <UART_SetConfig+0x2d4>)
 8003b40:	fba3 2302 	umull	r2, r3, r3, r2
 8003b44:	095b      	lsrs	r3, r3, #5
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b4c:	441c      	add	r4, r3
 8003b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b52:	2200      	movs	r2, #0
 8003b54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b60:	4642      	mov	r2, r8
 8003b62:	464b      	mov	r3, r9
 8003b64:	1891      	adds	r1, r2, r2
 8003b66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b68:	415b      	adcs	r3, r3
 8003b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b70:	4641      	mov	r1, r8
 8003b72:	1851      	adds	r1, r2, r1
 8003b74:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b76:	4649      	mov	r1, r9
 8003b78:	414b      	adcs	r3, r1
 8003b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b88:	4659      	mov	r1, fp
 8003b8a:	00cb      	lsls	r3, r1, #3
 8003b8c:	4651      	mov	r1, sl
 8003b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b92:	4651      	mov	r1, sl
 8003b94:	00ca      	lsls	r2, r1, #3
 8003b96:	4610      	mov	r0, r2
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4642      	mov	r2, r8
 8003b9e:	189b      	adds	r3, r3, r2
 8003ba0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ba4:	464b      	mov	r3, r9
 8003ba6:	460a      	mov	r2, r1
 8003ba8:	eb42 0303 	adc.w	r3, r2, r3
 8003bac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003bbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003bc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	18db      	adds	r3, r3, r3
 8003bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bca:	4613      	mov	r3, r2
 8003bcc:	eb42 0303 	adc.w	r3, r2, r3
 8003bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003bda:	f7fc faf5 	bl	80001c8 <__aeabi_uldivmod>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4b0d      	ldr	r3, [pc, #52]	@ (8003c18 <UART_SetConfig+0x2d4>)
 8003be4:	fba3 1302 	umull	r1, r3, r3, r2
 8003be8:	095b      	lsrs	r3, r3, #5
 8003bea:	2164      	movs	r1, #100	@ 0x64
 8003bec:	fb01 f303 	mul.w	r3, r1, r3
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	3332      	adds	r3, #50	@ 0x32
 8003bf6:	4a08      	ldr	r2, [pc, #32]	@ (8003c18 <UART_SetConfig+0x2d4>)
 8003bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfc:	095b      	lsrs	r3, r3, #5
 8003bfe:	f003 0207 	and.w	r2, r3, #7
 8003c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4422      	add	r2, r4
 8003c0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c0c:	e106      	b.n	8003e1c <UART_SetConfig+0x4d8>
 8003c0e:	bf00      	nop
 8003c10:	40011000 	.word	0x40011000
 8003c14:	40011400 	.word	0x40011400
 8003c18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c20:	2200      	movs	r2, #0
 8003c22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c2e:	4642      	mov	r2, r8
 8003c30:	464b      	mov	r3, r9
 8003c32:	1891      	adds	r1, r2, r2
 8003c34:	6239      	str	r1, [r7, #32]
 8003c36:	415b      	adcs	r3, r3
 8003c38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c3e:	4641      	mov	r1, r8
 8003c40:	1854      	adds	r4, r2, r1
 8003c42:	4649      	mov	r1, r9
 8003c44:	eb43 0501 	adc.w	r5, r3, r1
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	00eb      	lsls	r3, r5, #3
 8003c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c56:	00e2      	lsls	r2, r4, #3
 8003c58:	4614      	mov	r4, r2
 8003c5a:	461d      	mov	r5, r3
 8003c5c:	4643      	mov	r3, r8
 8003c5e:	18e3      	adds	r3, r4, r3
 8003c60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c64:	464b      	mov	r3, r9
 8003c66:	eb45 0303 	adc.w	r3, r5, r3
 8003c6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	008b      	lsls	r3, r1, #2
 8003c8e:	4621      	mov	r1, r4
 8003c90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c94:	4621      	mov	r1, r4
 8003c96:	008a      	lsls	r2, r1, #2
 8003c98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c9c:	f7fc fa94 	bl	80001c8 <__aeabi_uldivmod>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4b60      	ldr	r3, [pc, #384]	@ (8003e28 <UART_SetConfig+0x4e4>)
 8003ca6:	fba3 2302 	umull	r2, r3, r3, r2
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	011c      	lsls	r4, r3, #4
 8003cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003cb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003cbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003cc0:	4642      	mov	r2, r8
 8003cc2:	464b      	mov	r3, r9
 8003cc4:	1891      	adds	r1, r2, r2
 8003cc6:	61b9      	str	r1, [r7, #24]
 8003cc8:	415b      	adcs	r3, r3
 8003cca:	61fb      	str	r3, [r7, #28]
 8003ccc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cd0:	4641      	mov	r1, r8
 8003cd2:	1851      	adds	r1, r2, r1
 8003cd4:	6139      	str	r1, [r7, #16]
 8003cd6:	4649      	mov	r1, r9
 8003cd8:	414b      	adcs	r3, r1
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ce8:	4659      	mov	r1, fp
 8003cea:	00cb      	lsls	r3, r1, #3
 8003cec:	4651      	mov	r1, sl
 8003cee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cf2:	4651      	mov	r1, sl
 8003cf4:	00ca      	lsls	r2, r1, #3
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	4642      	mov	r2, r8
 8003cfe:	189b      	adds	r3, r3, r2
 8003d00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d04:	464b      	mov	r3, r9
 8003d06:	460a      	mov	r2, r1
 8003d08:	eb42 0303 	adc.w	r3, r2, r3
 8003d0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d28:	4649      	mov	r1, r9
 8003d2a:	008b      	lsls	r3, r1, #2
 8003d2c:	4641      	mov	r1, r8
 8003d2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d32:	4641      	mov	r1, r8
 8003d34:	008a      	lsls	r2, r1, #2
 8003d36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d3a:	f7fc fa45 	bl	80001c8 <__aeabi_uldivmod>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	4611      	mov	r1, r2
 8003d44:	4b38      	ldr	r3, [pc, #224]	@ (8003e28 <UART_SetConfig+0x4e4>)
 8003d46:	fba3 2301 	umull	r2, r3, r3, r1
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	2264      	movs	r2, #100	@ 0x64
 8003d4e:	fb02 f303 	mul.w	r3, r2, r3
 8003d52:	1acb      	subs	r3, r1, r3
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	3332      	adds	r3, #50	@ 0x32
 8003d58:	4a33      	ldr	r2, [pc, #204]	@ (8003e28 <UART_SetConfig+0x4e4>)
 8003d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d64:	441c      	add	r4, r3
 8003d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d74:	4642      	mov	r2, r8
 8003d76:	464b      	mov	r3, r9
 8003d78:	1891      	adds	r1, r2, r2
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	415b      	adcs	r3, r3
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d84:	4641      	mov	r1, r8
 8003d86:	1851      	adds	r1, r2, r1
 8003d88:	6039      	str	r1, [r7, #0]
 8003d8a:	4649      	mov	r1, r9
 8003d8c:	414b      	adcs	r3, r1
 8003d8e:	607b      	str	r3, [r7, #4]
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d9c:	4659      	mov	r1, fp
 8003d9e:	00cb      	lsls	r3, r1, #3
 8003da0:	4651      	mov	r1, sl
 8003da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003da6:	4651      	mov	r1, sl
 8003da8:	00ca      	lsls	r2, r1, #3
 8003daa:	4610      	mov	r0, r2
 8003dac:	4619      	mov	r1, r3
 8003dae:	4603      	mov	r3, r0
 8003db0:	4642      	mov	r2, r8
 8003db2:	189b      	adds	r3, r3, r2
 8003db4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003db6:	464b      	mov	r3, r9
 8003db8:	460a      	mov	r2, r1
 8003dba:	eb42 0303 	adc.w	r3, r2, r3
 8003dbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dca:	667a      	str	r2, [r7, #100]	@ 0x64
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003dd8:	4649      	mov	r1, r9
 8003dda:	008b      	lsls	r3, r1, #2
 8003ddc:	4641      	mov	r1, r8
 8003dde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003de2:	4641      	mov	r1, r8
 8003de4:	008a      	lsls	r2, r1, #2
 8003de6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003dea:	f7fc f9ed 	bl	80001c8 <__aeabi_uldivmod>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e28 <UART_SetConfig+0x4e4>)
 8003df4:	fba3 1302 	umull	r1, r3, r3, r2
 8003df8:	095b      	lsrs	r3, r3, #5
 8003dfa:	2164      	movs	r1, #100	@ 0x64
 8003dfc:	fb01 f303 	mul.w	r3, r1, r3
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	3332      	adds	r3, #50	@ 0x32
 8003e06:	4a08      	ldr	r2, [pc, #32]	@ (8003e28 <UART_SetConfig+0x4e4>)
 8003e08:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0c:	095b      	lsrs	r3, r3, #5
 8003e0e:	f003 020f 	and.w	r2, r3, #15
 8003e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4422      	add	r2, r4
 8003e1a:	609a      	str	r2, [r3, #8]
}
 8003e1c:	bf00      	nop
 8003e1e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e22:	46bd      	mov	sp, r7
 8003e24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e28:	51eb851f 	.word	0x51eb851f

08003e2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f043 0201 	orr.w	r2, r3, #1
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f023 0201 	bic.w	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	3301      	adds	r3, #1
 8003e82:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003e8a:	d901      	bls.n	8003e90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e01b      	b.n	8003ec8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	daf2      	bge.n	8003e7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	019b      	lsls	r3, r3, #6
 8003ea0:	f043 0220 	orr.w	r2, r3, #32
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003eb4:	d901      	bls.n	8003eba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e006      	b.n	8003ec8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	d0f0      	beq.n	8003ea8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003eec:	d901      	bls.n	8003ef2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e018      	b.n	8003f24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	daf2      	bge.n	8003ee0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2210      	movs	r2, #16
 8003f02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	3301      	adds	r3, #1
 8003f08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f10:	d901      	bls.n	8003f16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e006      	b.n	8003f24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0310 	and.w	r3, r3, #16
 8003f1e:	2b10      	cmp	r3, #16
 8003f20:	d0f0      	beq.n	8003f04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b08b      	sub	sp, #44	@ 0x2c
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003f46:	88fb      	ldrh	r3, [r7, #6]
 8003f48:	089b      	lsrs	r3, r3, #2
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003f4e:	88fb      	ldrh	r3, [r7, #6]
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003f56:	2300      	movs	r3, #0
 8003f58:	623b      	str	r3, [r7, #32]
 8003f5a:	e014      	b.n	8003f86 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f66:	601a      	str	r2, [r3, #0]
    pDest++;
 8003f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f70:	3301      	adds	r3, #1
 8003f72:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f76:	3301      	adds	r3, #1
 8003f78:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	3301      	adds	r3, #1
 8003f84:	623b      	str	r3, [r7, #32]
 8003f86:	6a3a      	ldr	r2, [r7, #32]
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d3e6      	bcc.n	8003f5c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003f8e:	8bfb      	ldrh	r3, [r7, #30]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01e      	beq.n	8003fd2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f107 0310 	add.w	r3, r7, #16
 8003fa4:	6812      	ldr	r2, [r2, #0]
 8003fa6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	701a      	strb	r2, [r3, #0]
      i++;
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	623b      	str	r3, [r7, #32]
      pDest++;
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003fc6:	8bfb      	ldrh	r3, [r7, #30]
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003fcc:	8bfb      	ldrh	r3, [r7, #30]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1ea      	bne.n	8003fa8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	372c      	adds	r7, #44	@ 0x2c
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8004006:	b480      	push	{r7}
 8004008:	b085      	sub	sp, #20
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	460b      	mov	r3, r1
 8004010:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8004016:	78fb      	ldrb	r3, [r7, #3]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4413      	add	r3, r2
 800401e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8004026:	78fb      	ldrb	r3, [r7, #3]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4413      	add	r3, r2
 800402e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	4013      	ands	r3, r2
 8004038:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800403a:	68bb      	ldr	r3, [r7, #8]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	f003 0301 	and.w	r3, r3, #1
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004082:	f023 0303 	bic.w	r3, r3, #3
 8004086:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	68f9      	ldr	r1, [r7, #12]
 8004098:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800409c:	4313      	orrs	r3, r2
 800409e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d107      	bne.n	80040b6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80040ac:	461a      	mov	r2, r3
 80040ae:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80040b2:	6053      	str	r3, [r2, #4]
 80040b4:	e00c      	b.n	80040d0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d107      	bne.n	80040cc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80040c2:	461a      	mov	r2, r3
 80040c4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80040c8:	6053      	str	r3, [r2, #4]
 80040ca:	e001      	b.n	80040d0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e000      	b.n	80040d2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80040de:	b480      	push	{r7}
 80040e0:	b085      	sub	sp, #20
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	b29b      	uxth	r3, r3
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004100:	b480      	push	{r7}
 8004102:	b089      	sub	sp, #36	@ 0x24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004110:	78fb      	ldrb	r3, [r7, #3]
 8004112:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	4413      	add	r3, r2
 8004120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	0c9b      	lsrs	r3, r3, #18
 8004128:	f003 0303 	and.w	r3, r3, #3
 800412c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	4413      	add	r3, r2
 8004136:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	0fdb      	lsrs	r3, r3, #31
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	4413      	add	r3, r2
 800414c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	0fdb      	lsrs	r3, r3, #31
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	2b20      	cmp	r3, #32
 8004164:	d10d      	bne.n	8004182 <USB_HC_Halt+0x82>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10a      	bne.n	8004182 <USB_HC_Halt+0x82>
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d002      	beq.n	800417e <USB_HC_Halt+0x7e>
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	2b03      	cmp	r3, #3
 800417c:	d101      	bne.n	8004182 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	e0d8      	b.n	8004334 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <USB_HC_Halt+0x8e>
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d173      	bne.n	8004276 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	4413      	add	r3, r2
 8004196:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	0151      	lsls	r1, r2, #5
 80041a0:	69fa      	ldr	r2, [r7, #28]
 80041a2:	440a      	add	r2, r1
 80041a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80041ac:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d14a      	bne.n	8004250 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041be:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d133      	bne.n	800422e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	0151      	lsls	r1, r2, #5
 80041d8:	69fa      	ldr	r2, [r7, #28]
 80041da:	440a      	add	r2, r1
 80041dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041e4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	0151      	lsls	r1, r2, #5
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	440a      	add	r2, r1
 80041fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004200:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004204:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	3301      	adds	r3, #1
 800420a:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004212:	d82e      	bhi.n	8004272 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	4413      	add	r3, r2
 800421c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004226:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800422a:	d0ec      	beq.n	8004206 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800422c:	e081      	b.n	8004332 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	4413      	add	r3, r2
 8004236:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	0151      	lsls	r1, r2, #5
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	440a      	add	r2, r1
 8004244:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004248:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800424c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800424e:	e070      	b.n	8004332 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	4413      	add	r3, r2
 8004258:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	0151      	lsls	r1, r2, #5
 8004262:	69fa      	ldr	r2, [r7, #28]
 8004264:	440a      	add	r2, r1
 8004266:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800426a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800426e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004270:	e05f      	b.n	8004332 <USB_HC_Halt+0x232>
            break;
 8004272:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004274:	e05d      	b.n	8004332 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	4413      	add	r3, r2
 800427e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	0151      	lsls	r1, r2, #5
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	440a      	add	r2, r1
 800428c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004290:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004294:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d133      	bne.n	800430e <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	015a      	lsls	r2, r3, #5
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	0151      	lsls	r1, r2, #5
 80042b8:	69fa      	ldr	r2, [r7, #28]
 80042ba:	440a      	add	r2, r1
 80042bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80042c4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	0151      	lsls	r1, r2, #5
 80042d8:	69fa      	ldr	r2, [r7, #28]
 80042da:	440a      	add	r2, r1
 80042dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80042e4:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	3301      	adds	r3, #1
 80042ea:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042f2:	d81d      	bhi.n	8004330 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004306:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800430a:	d0ec      	beq.n	80042e6 <USB_HC_Halt+0x1e6>
 800430c:	e011      	b.n	8004332 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	4413      	add	r3, r2
 8004316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	0151      	lsls	r1, r2, #5
 8004320:	69fa      	ldr	r2, [r7, #28]
 8004322:	440a      	add	r2, r1
 8004324:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004328:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	e000      	b.n	8004332 <USB_HC_Halt+0x232>
          break;
 8004330:	bf00      	nop
    }
  }

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3724      	adds	r7, #36	@ 0x24
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004350:	2300      	movs	r3, #0
 8004352:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7ff fd7a 	bl	8003e4e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800435a:	2110      	movs	r1, #16
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7ff fd87 	bl	8003e70 <USB_FlushTxFifo>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff fdb1 	bl	8003ed4 <USB_FlushRxFifo>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800437c:	2300      	movs	r3, #0
 800437e:	61bb      	str	r3, [r7, #24]
 8004380:	e01f      	b.n	80043c2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	4413      	add	r3, r2
 800438a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004398:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80043a8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043b6:	461a      	mov	r2, r3
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	3301      	adds	r3, #1
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b0f      	cmp	r3, #15
 80043c6:	d9dc      	bls.n	8004382 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80043c8:	2300      	movs	r3, #0
 80043ca:	61bb      	str	r3, [r7, #24]
 80043cc:	e034      	b.n	8004438 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80043e4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80043ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80043f4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004402:	461a      	mov	r2, r3
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3301      	adds	r3, #1
 800440c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004414:	d80c      	bhi.n	8004430 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	4413      	add	r3, r2
 800441e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004428:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800442c:	d0ec      	beq.n	8004408 <USB_StopHost+0xc8>
 800442e:	e000      	b.n	8004432 <USB_StopHost+0xf2>
        break;
 8004430:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	3301      	adds	r3, #1
 8004436:	61bb      	str	r3, [r7, #24]
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	2b0f      	cmp	r3, #15
 800443c:	d9c7      	bls.n	80043ce <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004444:	461a      	mov	r2, r3
 8004446:	f04f 33ff 	mov.w	r3, #4294967295
 800444a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f04f 32ff 	mov.w	r2, #4294967295
 8004452:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff fce9 	bl	8003e2c <USB_EnableGlobalInt>

  return ret;
 800445a:	7ffb      	ldrb	r3, [r7, #31]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3720      	adds	r7, #32
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f804 	bl	8004488 <USBH_HandleSof>
}
 8004480:	bf00      	nop
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b0b      	cmp	r3, #11
 8004498:	d10a      	bne.n	80044b0 <USBH_HandleSof+0x28>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d005      	beq.n	80044b0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	4798      	blx	r3
  }
}
 80044b0:	bf00      	nop
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 80044c8:	bf00      	nop
}
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 80044ec:	bf00      	nop
}
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b082      	sub	sp, #8
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f883 	bl	8004652 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	791b      	ldrb	r3, [r3, #4]
 8004550:	4619      	mov	r1, r3
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f80b 	bl	800456e <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	795b      	ldrb	r3, [r3, #5]
 800455c:	4619      	mov	r1, r3
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f805 	bl	800456e <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	460b      	mov	r3, r1
 8004578:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800457a:	78fb      	ldrb	r3, [r7, #3]
 800457c:	2b0f      	cmp	r3, #15
 800457e:	d80d      	bhi.n	800459c <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	33e0      	adds	r3, #224	@ 0xe0
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	33e0      	adds	r3, #224	@ 0xe0
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b082      	sub	sp, #8
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff ff53 	bl	8004464 <USBH_LL_IncTimer>
}
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b082      	sub	sp, #8
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff ff8f 	bl	80044f8 <USBH_LL_Connect>
}
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff ff98 	bl	8004526 <USBH_LL_Disconnect>
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	460b      	mov	r3, r1
 8004608:	70fb      	strb	r3, [r7, #3]
 800460a:	4613      	mov	r3, r2
 800460c:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b082      	sub	sp, #8
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff ff45 	bl	80044b8 <USBH_LL_PortEnabled>
}
 800462e:	bf00      	nop
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b082      	sub	sp, #8
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff ff45 	bl	80044d4 <USBH_LL_PortDisabled>
}
 800464a:	bf00      	nop
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b084      	sub	sp, #16
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8004668:	4618      	mov	r0, r3
 800466a:	f7fc fea4 	bl	80013b6 <HAL_HCD_Stop>
 800466e:	4603      	mov	r3, r0
 8004670:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004672:	7bfb      	ldrb	r3, [r7, #15]
 8004674:	4618      	mov	r0, r3
 8004676:	f000 f807 	bl	8004688 <USBH_Get_USB_Status>
 800467a:	4603      	mov	r3, r0
 800467c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800467e:	7bbb      	ldrb	r3, [r7, #14]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	2b03      	cmp	r3, #3
 800469a:	d817      	bhi.n	80046cc <USBH_Get_USB_Status+0x44>
 800469c:	a201      	add	r2, pc, #4	@ (adr r2, 80046a4 <USBH_Get_USB_Status+0x1c>)
 800469e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a2:	bf00      	nop
 80046a4:	080046b5 	.word	0x080046b5
 80046a8:	080046bb 	.word	0x080046bb
 80046ac:	080046c1 	.word	0x080046c1
 80046b0:	080046c7 	.word	0x080046c7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	73fb      	strb	r3, [r7, #15]
    break;
 80046b8:	e00b      	b.n	80046d2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80046ba:	2302      	movs	r3, #2
 80046bc:	73fb      	strb	r3, [r7, #15]
    break;
 80046be:	e008      	b.n	80046d2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80046c0:	2301      	movs	r3, #1
 80046c2:	73fb      	strb	r3, [r7, #15]
    break;
 80046c4:	e005      	b.n	80046d2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80046c6:	2302      	movs	r3, #2
 80046c8:	73fb      	strb	r3, [r7, #15]
    break;
 80046ca:	e002      	b.n	80046d2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80046cc:	2302      	movs	r3, #2
 80046ce:	73fb      	strb	r3, [r7, #15]
    break;
 80046d0:	bf00      	nop
  }
  return usb_status;
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <memset>:
 80046e0:	4402      	add	r2, r0
 80046e2:	4603      	mov	r3, r0
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d100      	bne.n	80046ea <memset+0xa>
 80046e8:	4770      	bx	lr
 80046ea:	f803 1b01 	strb.w	r1, [r3], #1
 80046ee:	e7f9      	b.n	80046e4 <memset+0x4>

080046f0 <__libc_init_array>:
 80046f0:	b570      	push	{r4, r5, r6, lr}
 80046f2:	4d0d      	ldr	r5, [pc, #52]	@ (8004728 <__libc_init_array+0x38>)
 80046f4:	4c0d      	ldr	r4, [pc, #52]	@ (800472c <__libc_init_array+0x3c>)
 80046f6:	1b64      	subs	r4, r4, r5
 80046f8:	10a4      	asrs	r4, r4, #2
 80046fa:	2600      	movs	r6, #0
 80046fc:	42a6      	cmp	r6, r4
 80046fe:	d109      	bne.n	8004714 <__libc_init_array+0x24>
 8004700:	4d0b      	ldr	r5, [pc, #44]	@ (8004730 <__libc_init_array+0x40>)
 8004702:	4c0c      	ldr	r4, [pc, #48]	@ (8004734 <__libc_init_array+0x44>)
 8004704:	f000 f818 	bl	8004738 <_init>
 8004708:	1b64      	subs	r4, r4, r5
 800470a:	10a4      	asrs	r4, r4, #2
 800470c:	2600      	movs	r6, #0
 800470e:	42a6      	cmp	r6, r4
 8004710:	d105      	bne.n	800471e <__libc_init_array+0x2e>
 8004712:	bd70      	pop	{r4, r5, r6, pc}
 8004714:	f855 3b04 	ldr.w	r3, [r5], #4
 8004718:	4798      	blx	r3
 800471a:	3601      	adds	r6, #1
 800471c:	e7ee      	b.n	80046fc <__libc_init_array+0xc>
 800471e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004722:	4798      	blx	r3
 8004724:	3601      	adds	r6, #1
 8004726:	e7f2      	b.n	800470e <__libc_init_array+0x1e>
 8004728:	08004784 	.word	0x08004784
 800472c:	08004784 	.word	0x08004784
 8004730:	08004784 	.word	0x08004784
 8004734:	08004788 	.word	0x08004788

08004738 <_init>:
 8004738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473a:	bf00      	nop
 800473c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473e:	bc08      	pop	{r3}
 8004740:	469e      	mov	lr, r3
 8004742:	4770      	bx	lr

08004744 <_fini>:
 8004744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004746:	bf00      	nop
 8004748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800474a:	bc08      	pop	{r3}
 800474c:	469e      	mov	lr, r3
 800474e:	4770      	bx	lr
