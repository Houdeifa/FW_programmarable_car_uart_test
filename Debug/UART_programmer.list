
UART_programmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006108  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08006290  08006290  00007290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006518  08006518  0000d70c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006518  08006518  00007518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006520  08006520  0000d70c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006520  08006520  00007520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006524  08006524  00007524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .infos_buffer 00000400  20000000  20000000  0000e000  2**0
                  ALLOC
  9 .program_buffer 00005000  20000400  20000400  0000e000  2**0
                  ALLOC
 10 .data         000002f4  20005400  08006528  00008400  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 11 .infos_buffer 00000018  200056f4  0800681c  000086f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .program_buffer 00005000  2000570c  08006834  0000870c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ccmram       00000000  10000000  10000000  0000d70c  2**0
                  CONTENTS
 14 .bss          00000464  2000a70c  2000a70c  0000d70c  2**2
                  ALLOC
 15 ._user_heap_stack 00000600  2000ab70  2000ab70  0000d70c  2**0
                  ALLOC
 16 .ARM.attributes 00000030  00000000  00000000  0000d70c  2**0
                  CONTENTS, READONLY
 17 .debug_info   000132df  00000000  00000000  0000d73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000309d  00000000  00000000  00020a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00001160  00000000  00000000  00023ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000d87  00000000  00000000  00024c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002361f  00000000  00000000  0002599f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0001626a  00000000  00000000  00048fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000d3e53  00000000  00000000  0005f228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000043  00000000  00000000  0013307b  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00004908  00000000  00000000  001330c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000068  00000000  00000000  001379c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000a70c 	.word	0x2000a70c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006278 	.word	0x08006278

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000a710 	.word	0x2000a710
 80001c4:	08006278 	.word	0x08006278

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <help_callback>:
		{.cmdID = eCMD_Version,.pcmdName = "version",.cmdChars = "AT+v",.cmdlen = 4,.cmdCallback = version_callback},
		{.cmdID = eCMD_Reset,.pcmdName = "reset",.cmdChars = "AT+r",.cmdlen = 4,.cmdCallback = reset_callback},
		{.cmdID = eCMD_TaskCodeReceive,.pcmdName = "task_code_receive",.cmdChars = "AT+t",.cmdlen = 4,.cmdCallback = task_code_receive_callback},
};

static void help_callback(void){
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	UART_Send(eID_UART2,"Help command\r\n",14);
 8000508:	220e      	movs	r2, #14
 800050a:	4904      	ldr	r1, [pc, #16]	@ (800051c <help_callback+0x18>)
 800050c:	2000      	movs	r0, #0
 800050e:	f001 faa1 	bl	8001a54 <UART_Send>
	sStateMachine = eSTATE_Ready;
 8000512:	4b03      	ldr	r3, [pc, #12]	@ (8000520 <help_callback+0x1c>)
 8000514:	2201      	movs	r2, #1
 8000516:	701a      	strb	r2, [r3, #0]
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	08006290 	.word	0x08006290
 8000520:	2000a728 	.word	0x2000a728

08000524 <version_callback>:
static void version_callback(void){
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	UART_Send(eID_UART2,"Version 1.0.0\r\n",16);
 8000528:	2210      	movs	r2, #16
 800052a:	4904      	ldr	r1, [pc, #16]	@ (800053c <version_callback+0x18>)
 800052c:	2000      	movs	r0, #0
 800052e:	f001 fa91 	bl	8001a54 <UART_Send>
	sStateMachine = eSTATE_Ready;
 8000532:	4b03      	ldr	r3, [pc, #12]	@ (8000540 <version_callback+0x1c>)
 8000534:	2201      	movs	r2, #1
 8000536:	701a      	strb	r2, [r3, #0]
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	080062a0 	.word	0x080062a0
 8000540:	2000a728 	.word	0x2000a728

08000544 <reset_callback>:
static void reset_callback(void){
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	UART_Send(eID_UART2,"Resetting...\r\n",15);
 8000548:	220f      	movs	r2, #15
 800054a:	4904      	ldr	r1, [pc, #16]	@ (800055c <reset_callback+0x18>)
 800054c:	2000      	movs	r0, #0
 800054e:	f001 fa81 	bl	8001a54 <UART_Send>
	sStateMachine = eSTATE_Ready;
 8000552:	4b03      	ldr	r3, [pc, #12]	@ (8000560 <reset_callback+0x1c>)
 8000554:	2201      	movs	r2, #1
 8000556:	701a      	strb	r2, [r3, #0]
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	080062b0 	.word	0x080062b0
 8000560:	2000a728 	.word	0x2000a728

08000564 <task_code_receive_callback>:
static void task_code_receive_callback(void){
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	UART_Send(eID_UART2,"Receiving the task code ...\r\n",30);
 8000568:	221e      	movs	r2, #30
 800056a:	4904      	ldr	r1, [pc, #16]	@ (800057c <task_code_receive_callback+0x18>)
 800056c:	2000      	movs	r0, #0
 800056e:	f001 fa71 	bl	8001a54 <UART_Send>
	TASK_Manager_StartReceiveTaskCode();
 8000572:	f000 ff6b 	bl	800144c <TASK_Manager_StartReceiveTaskCode>
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	080062c0 	.word	0x080062c0

08000580 <CMD_SetToReadyState>:

void CMD_SetToReadyState(void){
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
	sStateMachine = eSTATE_Ready;
 8000584:	4b03      	ldr	r3, [pc, #12]	@ (8000594 <CMD_SetToReadyState+0x14>)
 8000586:	2201      	movs	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	2000a728 	.word	0x2000a728

08000598 <CMD_Init>:

void CMD_Init(){
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
	sStateMachine = eSTATE_Uknown;
 800059c:	4b05      	ldr	r3, [pc, #20]	@ (80005b4 <CMD_Init+0x1c>)
 800059e:	22ff      	movs	r2, #255	@ 0xff
 80005a0:	701a      	strb	r2, [r3, #0]


	sStateMachine = eSTATE_Init;
 80005a2:	4b04      	ldr	r3, [pc, #16]	@ (80005b4 <CMD_Init+0x1c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]

}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	2000a728 	.word	0x2000a728

080005b8 <CMD_Process>:
#define CMD_BUFFER_SIZE 10
void CMD_Process(){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
	static uint8_t buffer[CMD_BUFFER_SIZE] = {0};
	static uint8_t buffer_index = 0;
	uint8_t current_char = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	71bb      	strb	r3, [r7, #6]
	uint8_t cmdLen = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	71fb      	strb	r3, [r7, #7]
	static bool cmd_processed = true;
	if(sStateMachine == eSTATE_Uknown) return;
 80005c6:	4b6b      	ldr	r3, [pc, #428]	@ (8000774 <CMD_Process+0x1bc>)
 80005c8:	f993 3000 	ldrsb.w	r3, [r3]
 80005cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d0:	f000 80c6 	beq.w	8000760 <CMD_Process+0x1a8>
	switch(sStateMachine)
 80005d4:	4b67      	ldr	r3, [pc, #412]	@ (8000774 <CMD_Process+0x1bc>)
 80005d6:	f993 3000 	ldrsb.w	r3, [r3]
 80005da:	3302      	adds	r3, #2
 80005dc:	2b04      	cmp	r3, #4
 80005de:	f200 80bb 	bhi.w	8000758 <CMD_Process+0x1a0>
 80005e2:	a201      	add	r2, pc, #4	@ (adr r2, 80005e8 <CMD_Process+0x30>)
 80005e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e8:	08000765 	.word	0x08000765
 80005ec:	08000759 	.word	0x08000759
 80005f0:	080005fd 	.word	0x080005fd
 80005f4:	0800061f 	.word	0x0800061f
 80005f8:	08000693 	.word	0x08000693
	{
		case eSTATE_Init:
			//initialization
			UART_Send(eID_UART2,"CMD Manager Initialized\r\n",25);
 80005fc:	2219      	movs	r2, #25
 80005fe:	495e      	ldr	r1, [pc, #376]	@ (8000778 <CMD_Process+0x1c0>)
 8000600:	2000      	movs	r0, #0
 8000602:	f001 fa27 	bl	8001a54 <UART_Send>
			buffer_index = 0;
 8000606:	4b5d      	ldr	r3, [pc, #372]	@ (800077c <CMD_Process+0x1c4>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
			memset(buffer,0,sizeof(buffer));
 800060c:	220a      	movs	r2, #10
 800060e:	2100      	movs	r1, #0
 8000610:	485b      	ldr	r0, [pc, #364]	@ (8000780 <CMD_Process+0x1c8>)
 8000612:	f005 fdf3 	bl	80061fc <memset>
			sStateMachine = eSTATE_Ready;
 8000616:	4b57      	ldr	r3, [pc, #348]	@ (8000774 <CMD_Process+0x1bc>)
 8000618:	2201      	movs	r2, #1
 800061a:	701a      	strb	r2, [r3, #0]
			break;
 800061c:	e0a7      	b.n	800076e <CMD_Process+0x1b6>
		case eSTATE_Ready:
			if(UART_Receive_timeout(eID_UART2,&current_char,1,0) == true){
 800061e:	1db9      	adds	r1, r7, #6
 8000620:	2300      	movs	r3, #0
 8000622:	2201      	movs	r2, #1
 8000624:	2000      	movs	r0, #0
 8000626:	f001 fa3b 	bl	8001aa0 <UART_Receive_timeout>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	f000 809b 	beq.w	8000768 <CMD_Process+0x1b0>
				//command received
				if((current_char == 0x0D) || (buffer_index >= sizeof(buffer))){
 8000632:	79bb      	ldrb	r3, [r7, #6]
 8000634:	2b0d      	cmp	r3, #13
 8000636:	d003      	beq.n	8000640 <CMD_Process+0x88>
 8000638:	4b50      	ldr	r3, [pc, #320]	@ (800077c <CMD_Process+0x1c4>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b09      	cmp	r3, #9
 800063e:	d90b      	bls.n	8000658 <CMD_Process+0xa0>
					sStateMachine = eSTATE_Busy;
 8000640:	4b4c      	ldr	r3, [pc, #304]	@ (8000774 <CMD_Process+0x1bc>)
 8000642:	2202      	movs	r2, #2
 8000644:	701a      	strb	r2, [r3, #0]
					cmd_processed = false;
 8000646:	4b4f      	ldr	r3, [pc, #316]	@ (8000784 <CMD_Process+0x1cc>)
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
					UART_Send(eID_UART2,"\r\n",2);
 800064c:	2202      	movs	r2, #2
 800064e:	494e      	ldr	r1, [pc, #312]	@ (8000788 <CMD_Process+0x1d0>)
 8000650:	2000      	movs	r0, #0
 8000652:	f001 f9ff 	bl	8001a54 <UART_Send>
			}
			else{
				//no command
			}
			//wait for command
			break;
 8000656:	e087      	b.n	8000768 <CMD_Process+0x1b0>
				}else if(current_char == 0x7f){
 8000658:	79bb      	ldrb	r3, [r7, #6]
 800065a:	2b7f      	cmp	r3, #127	@ 0x7f
 800065c:	d10c      	bne.n	8000678 <CMD_Process+0xc0>
					buffer[buffer_index] = 0;
 800065e:	4b47      	ldr	r3, [pc, #284]	@ (800077c <CMD_Process+0x1c4>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	461a      	mov	r2, r3
 8000664:	4b46      	ldr	r3, [pc, #280]	@ (8000780 <CMD_Process+0x1c8>)
 8000666:	2100      	movs	r1, #0
 8000668:	5499      	strb	r1, [r3, r2]
					buffer_index--;
 800066a:	4b44      	ldr	r3, [pc, #272]	@ (800077c <CMD_Process+0x1c4>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	3b01      	subs	r3, #1
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b42      	ldr	r3, [pc, #264]	@ (800077c <CMD_Process+0x1c4>)
 8000674:	701a      	strb	r2, [r3, #0]
			break;
 8000676:	e077      	b.n	8000768 <CMD_Process+0x1b0>
					buffer[buffer_index] = current_char;
 8000678:	4b40      	ldr	r3, [pc, #256]	@ (800077c <CMD_Process+0x1c4>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	79b9      	ldrb	r1, [r7, #6]
 8000680:	4b3f      	ldr	r3, [pc, #252]	@ (8000780 <CMD_Process+0x1c8>)
 8000682:	5499      	strb	r1, [r3, r2]
					buffer_index++;
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <CMD_Process+0x1c4>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	3301      	adds	r3, #1
 800068a:	b2da      	uxtb	r2, r3
 800068c:	4b3b      	ldr	r3, [pc, #236]	@ (800077c <CMD_Process+0x1c4>)
 800068e:	701a      	strb	r2, [r3, #0]
			break;
 8000690:	e06a      	b.n	8000768 <CMD_Process+0x1b0>
		case eSTATE_Busy:
				int found_index = -1;
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	60fb      	str	r3, [r7, #12]
				if(cmd_processed == true){
 8000698:	4b3a      	ldr	r3, [pc, #232]	@ (8000784 <CMD_Process+0x1cc>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d165      	bne.n	800076c <CMD_Process+0x1b4>
					break;
				}
				cmdLen = strlen((char*)buffer);
 80006a0:	4837      	ldr	r0, [pc, #220]	@ (8000780 <CMD_Process+0x1c8>)
 80006a2:	f7ff fd91 	bl	80001c8 <strlen>
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
				for(int i = 0;i < eCMD_Max;i++){
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	e022      	b.n	80006f6 <CMD_Process+0x13e>
					if((cmdLen == sCMDTable[i].cmdlen) && (strncmp((char*)buffer,sCMDTable[i].cmdChars,cmdLen) == 0)){
 80006b0:	4936      	ldr	r1, [pc, #216]	@ (800078c <CMD_Process+0x1d4>)
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	4613      	mov	r3, r2
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	4413      	add	r3, r2
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	440b      	add	r3, r1
 80006be:	331f      	adds	r3, #31
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	79fa      	ldrb	r2, [r7, #7]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d113      	bne.n	80006f0 <CMD_Process+0x138>
 80006c8:	68ba      	ldr	r2, [r7, #8]
 80006ca:	4613      	mov	r3, r2
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	4413      	add	r3, r2
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	3310      	adds	r3, #16
 80006d4:	4a2d      	ldr	r2, [pc, #180]	@ (800078c <CMD_Process+0x1d4>)
 80006d6:	4413      	add	r3, r2
 80006d8:	3305      	adds	r3, #5
 80006da:	79fa      	ldrb	r2, [r7, #7]
 80006dc:	4619      	mov	r1, r3
 80006de:	4828      	ldr	r0, [pc, #160]	@ (8000780 <CMD_Process+0x1c8>)
 80006e0:	f005 fd94 	bl	800620c <strncmp>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d102      	bne.n	80006f0 <CMD_Process+0x138>
						//command found
						found_index = i;
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	60fb      	str	r3, [r7, #12]
						break;
 80006ee:	e005      	b.n	80006fc <CMD_Process+0x144>
				for(int i = 0;i < eCMD_Max;i++){
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	3301      	adds	r3, #1
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	2b03      	cmp	r3, #3
 80006fa:	ddd9      	ble.n	80006b0 <CMD_Process+0xf8>
					}
				}
				if(found_index == -1){
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000702:	d108      	bne.n	8000716 <CMD_Process+0x15e>
					UART_Send(eID_UART2,"Unknown command\r\n",17);
 8000704:	2211      	movs	r2, #17
 8000706:	4922      	ldr	r1, [pc, #136]	@ (8000790 <CMD_Process+0x1d8>)
 8000708:	2000      	movs	r0, #0
 800070a:	f001 f9a3 	bl	8001a54 <UART_Send>
					sStateMachine = eSTATE_Ready;
 800070e:	4b19      	ldr	r3, [pc, #100]	@ (8000774 <CMD_Process+0x1bc>)
 8000710:	2201      	movs	r2, #1
 8000712:	701a      	strb	r2, [r3, #0]
 8000714:	e014      	b.n	8000740 <CMD_Process+0x188>
				}else{
					if(sCMDTable[found_index].cmdCallback != NULL)
 8000716:	491d      	ldr	r1, [pc, #116]	@ (800078c <CMD_Process+0x1d4>)
 8000718:	68fa      	ldr	r2, [r7, #12]
 800071a:	4613      	mov	r3, r2
 800071c:	00db      	lsls	r3, r3, #3
 800071e:	4413      	add	r3, r2
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	440b      	add	r3, r1
 8000724:	3320      	adds	r3, #32
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d009      	beq.n	8000740 <CMD_Process+0x188>
						sCMDTable[found_index].cmdCallback();
 800072c:	4917      	ldr	r1, [pc, #92]	@ (800078c <CMD_Process+0x1d4>)
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	4613      	mov	r3, r2
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	4413      	add	r3, r2
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	440b      	add	r3, r1
 800073a:	3320      	adds	r3, #32
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4798      	blx	r3
				}
				memset(buffer,0,sizeof(buffer));
 8000740:	220a      	movs	r2, #10
 8000742:	2100      	movs	r1, #0
 8000744:	480e      	ldr	r0, [pc, #56]	@ (8000780 <CMD_Process+0x1c8>)
 8000746:	f005 fd59 	bl	80061fc <memset>
				buffer_index = 0;
 800074a:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <CMD_Process+0x1c4>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
				cmd_processed = true;
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <CMD_Process+0x1cc>)
 8000752:	2201      	movs	r2, #1
 8000754:	701a      	strb	r2, [r3, #0]
			//process command
			break;
 8000756:	e00a      	b.n	800076e <CMD_Process+0x1b6>
		case eSTATE_Error:
			//error management
			break;
		default:
			sStateMachine = eSTATE_Uknown;
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <CMD_Process+0x1bc>)
 800075a:	22ff      	movs	r2, #255	@ 0xff
 800075c:	701a      	strb	r2, [r3, #0]
			break;
 800075e:	e006      	b.n	800076e <CMD_Process+0x1b6>
	if(sStateMachine == eSTATE_Uknown) return;
 8000760:	bf00      	nop
 8000762:	e004      	b.n	800076e <CMD_Process+0x1b6>
			break;
 8000764:	bf00      	nop
 8000766:	e002      	b.n	800076e <CMD_Process+0x1b6>
			break;
 8000768:	bf00      	nop
 800076a:	e000      	b.n	800076e <CMD_Process+0x1b6>
					break;
 800076c:	bf00      	nop
	}
}
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	2000a728 	.word	0x2000a728
 8000778:	080062e0 	.word	0x080062e0
 800077c:	2000a729 	.word	0x2000a729
 8000780:	2000a72c 	.word	0x2000a72c
 8000784:	20005490 	.word	0x20005490
 8000788:	080062fc 	.word	0x080062fc
 800078c:	20005400 	.word	0x20005400
 8000790:	08006300 	.word	0x08006300

08000794 <DI_Button_GetState>:
		{.id = eID_LED3,.name = "LED3",.gpio=GPIOD,.pin = LD3_Pin,.mode = GPIO_MODE_OUTPUT_PP,.pull = GPIO_NOPULL,.speed = GPIO_SPEED_FREQ_LOW,.default_value = -1},
		{.id = eID_LED5,.name = "LED5",.gpio=GPIOD,.pin = LD5_Pin,.mode = GPIO_MODE_OUTPUT_PP,.pull = GPIO_NOPULL,.speed = GPIO_SPEED_FREQ_LOW,.default_value = -1},
		{.id = eID_LED6,.name = "LED6",.gpio=GPIOD,.pin = LD6_Pin,.mode = GPIO_MODE_OUTPUT_PP,.pull = GPIO_NOPULL,.speed = GPIO_SPEED_FREQ_LOW,.default_value = -1}
};

eButton_State DI_Button_GetState(eDIO_ID id){
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
	return sDIOTable[id].state;
 800079e:	79fa      	ldrb	r2, [r7, #7]
 80007a0:	4907      	ldr	r1, [pc, #28]	@ (80007c0 <DI_Button_GetState+0x2c>)
 80007a2:	4613      	mov	r3, r2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	440b      	add	r3, r1
 80007ac:	3334      	adds	r3, #52	@ 0x34
 80007ae:	f993 3000 	ldrsb.w	r3, [r3]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	20005498 	.word	0x20005498

080007c4 <DIO_Button_Poll>:


void DIO_Button_Poll(void){
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
	for(int i = 0;i < eID_DIO_MAX ;i++){
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	e288      	b.n	8000ce2 <DIO_Button_Poll+0x51e>
		if(sDIOTable[i].mode == GPIO_MODE_INPUT || sDIOTable[i].mode == GPIO_MODE_EVT_RISING){
 80007d0:	49c1      	ldr	r1, [pc, #772]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	4613      	mov	r3, r2
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	4413      	add	r3, r2
 80007da:	011b      	lsls	r3, r3, #4
 80007dc:	440b      	add	r3, r1
 80007de:	3320      	adds	r3, #32
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d00c      	beq.n	8000800 <DIO_Button_Poll+0x3c>
 80007e6:	49bc      	ldr	r1, [pc, #752]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	4613      	mov	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	4413      	add	r3, r2
 80007f0:	011b      	lsls	r3, r3, #4
 80007f2:	440b      	add	r3, r1
 80007f4:	3320      	adds	r3, #32
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 80007fc:	f040 826e 	bne.w	8000cdc <DIO_Button_Poll+0x518>
			bool current_state = DI_Read(sDIOTable[i].id);
 8000800:	49b5      	ldr	r1, [pc, #724]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	4613      	mov	r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	4413      	add	r3, r2
 800080a:	011b      	lsls	r3, r3, #4
 800080c:	440b      	add	r3, r1
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4618      	mov	r0, r3
 8000812:	f000 fc11 	bl	8001038 <DI_Read>
 8000816:	4603      	mov	r3, r0
 8000818:	70fb      	strb	r3, [r7, #3]
			switch(sDIOTable[i].state){
 800081a:	49af      	ldr	r1, [pc, #700]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	4613      	mov	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4413      	add	r3, r2
 8000824:	011b      	lsls	r3, r3, #4
 8000826:	440b      	add	r3, r1
 8000828:	3334      	adds	r3, #52	@ 0x34
 800082a:	f993 3000 	ldrsb.w	r3, [r3]
 800082e:	3301      	adds	r3, #1
 8000830:	2b04      	cmp	r3, #4
 8000832:	f200 8243 	bhi.w	8000cbc <DIO_Button_Poll+0x4f8>
 8000836:	a201      	add	r2, pc, #4	@ (adr r2, 800083c <DIO_Button_Poll+0x78>)
 8000838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083c:	08000851 	.word	0x08000851
 8000840:	080008db 	.word	0x080008db
 8000844:	08000a23 	.word	0x08000a23
 8000848:	08000a85 	.word	0x08000a85
 800084c:	08000bd1 	.word	0x08000bd1
			case eSTATE_Uknown:
				if(current_state == true){
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d020      	beq.n	8000898 <DIO_Button_Poll+0xd4>
					sDIOTable[i].state = eSTATE_Pressed;
 8000856:	49a0      	ldr	r1, [pc, #640]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	4613      	mov	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	4413      	add	r3, r2
 8000860:	011b      	lsls	r3, r3, #4
 8000862:	440b      	add	r3, r1
 8000864:	3334      	adds	r3, #52	@ 0x34
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
					sDIOTable[i].real_state = eSTATE_Pressed;
 800086a:	499b      	ldr	r1, [pc, #620]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	4613      	mov	r3, r2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	011b      	lsls	r3, r3, #4
 8000876:	440b      	add	r3, r1
 8000878:	3335      	adds	r3, #53	@ 0x35
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
					sDIOTable[i].pressed_timer = TMR_Now();
 800087e:	f000 ffe7 	bl	8001850 <TMR_Now>
 8000882:	4c95      	ldr	r4, [pc, #596]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	4613      	mov	r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	4413      	add	r3, r2
 800088c:	011b      	lsls	r3, r3, #4
 800088e:	4423      	add	r3, r4
 8000890:	3340      	adds	r3, #64	@ 0x40
 8000892:	e9c3 0100 	strd	r0, r1, [r3]
				}else{
					sDIOTable[i].state = eSTATE_Released;
					sDIOTable[i].real_state = eSTATE_Released;
					sDIOTable[i].released_timer = TMR_Now();
				}
				break;
 8000896:	e221      	b.n	8000cdc <DIO_Button_Poll+0x518>
					sDIOTable[i].state = eSTATE_Released;
 8000898:	498f      	ldr	r1, [pc, #572]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	4613      	mov	r3, r2
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	4413      	add	r3, r2
 80008a2:	011b      	lsls	r3, r3, #4
 80008a4:	440b      	add	r3, r1
 80008a6:	3334      	adds	r3, #52	@ 0x34
 80008a8:	2201      	movs	r2, #1
 80008aa:	701a      	strb	r2, [r3, #0]
					sDIOTable[i].real_state = eSTATE_Released;
 80008ac:	498a      	ldr	r1, [pc, #552]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	4613      	mov	r3, r2
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	4413      	add	r3, r2
 80008b6:	011b      	lsls	r3, r3, #4
 80008b8:	440b      	add	r3, r1
 80008ba:	3335      	adds	r3, #53	@ 0x35
 80008bc:	2201      	movs	r2, #1
 80008be:	701a      	strb	r2, [r3, #0]
					sDIOTable[i].released_timer = TMR_Now();
 80008c0:	f000 ffc6 	bl	8001850 <TMR_Now>
 80008c4:	4c84      	ldr	r4, [pc, #528]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	4613      	mov	r3, r2
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	4413      	add	r3, r2
 80008ce:	011b      	lsls	r3, r3, #4
 80008d0:	4423      	add	r3, r4
 80008d2:	3348      	adds	r3, #72	@ 0x48
 80008d4:	e9c3 0100 	strd	r0, r1, [r3]
				break;
 80008d8:	e200      	b.n	8000cdc <DIO_Button_Poll+0x518>
			case eSTATE_Pressed:
				if(current_state == false){
 80008da:	78fb      	ldrb	r3, [r7, #3]
 80008dc:	f083 0301 	eor.w	r3, r3, #1
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d071      	beq.n	80009ca <DIO_Button_Poll+0x206>
					if(sDIOTable[i].real_state != eSTATE_Released){
 80008e6:	497c      	ldr	r1, [pc, #496]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	4613      	mov	r3, r2
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	4413      	add	r3, r2
 80008f0:	011b      	lsls	r3, r3, #4
 80008f2:	440b      	add	r3, r1
 80008f4:	3335      	adds	r3, #53	@ 0x35
 80008f6:	f993 3000 	ldrsb.w	r3, [r3]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d016      	beq.n	800092c <DIO_Button_Poll+0x168>
						sDIOTable[i].released_timer = TMR_Now();
 80008fe:	f000 ffa7 	bl	8001850 <TMR_Now>
 8000902:	4c75      	ldr	r4, [pc, #468]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	4613      	mov	r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4413      	add	r3, r2
 800090c:	011b      	lsls	r3, r3, #4
 800090e:	4423      	add	r3, r4
 8000910:	3348      	adds	r3, #72	@ 0x48
 8000912:	e9c3 0100 	strd	r0, r1, [r3]
						sDIOTable[i].real_state = eSTATE_Released;
 8000916:	4970      	ldr	r1, [pc, #448]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	4613      	mov	r3, r2
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	4413      	add	r3, r2
 8000920:	011b      	lsls	r3, r3, #4
 8000922:	440b      	add	r3, r1
 8000924:	3335      	adds	r3, #53	@ 0x35
 8000926:	2201      	movs	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]
					if(TMR_Elapsed(sDIOTable[i].pressed_timer) >= 50000UL){ // 50 ms
						sDIOTable[i].state = eSTATE_Short_Press;
						sDIOTable[i].real_state = eSTATE_Short_Press;
					}
				}
				break;
 800092a:	e1d2      	b.n	8000cd2 <DIO_Button_Poll+0x50e>
					else if(sDIOTable[i].real_state == eSTATE_Released && TMR_Elapsed(sDIOTable[i].released_timer) > 50000){
 800092c:	496a      	ldr	r1, [pc, #424]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	4613      	mov	r3, r2
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4413      	add	r3, r2
 8000936:	011b      	lsls	r3, r3, #4
 8000938:	440b      	add	r3, r1
 800093a:	3335      	adds	r3, #53	@ 0x35
 800093c:	f993 3000 	ldrsb.w	r3, [r3]
 8000940:	2b01      	cmp	r3, #1
 8000942:	f040 81c6 	bne.w	8000cd2 <DIO_Button_Poll+0x50e>
 8000946:	4964      	ldr	r1, [pc, #400]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	4613      	mov	r3, r2
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	4413      	add	r3, r2
 8000950:	011b      	lsls	r3, r3, #4
 8000952:	440b      	add	r3, r1
 8000954:	3348      	adds	r3, #72	@ 0x48
 8000956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	f000 ffc4 	bl	80018ea <TMR_Elapsed>
 8000962:	4602      	mov	r2, r0
 8000964:	460b      	mov	r3, r1
 8000966:	f24c 3151 	movw	r1, #50001	@ 0xc351
 800096a:	428a      	cmp	r2, r1
 800096c:	f173 0300 	sbcs.w	r3, r3, #0
 8000970:	f0c0 81af 	bcc.w	8000cd2 <DIO_Button_Poll+0x50e>
						sDIOTable[i].state = eSTATE_Released;
 8000974:	4958      	ldr	r1, [pc, #352]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	4613      	mov	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	4413      	add	r3, r2
 800097e:	011b      	lsls	r3, r3, #4
 8000980:	440b      	add	r3, r1
 8000982:	3334      	adds	r3, #52	@ 0x34
 8000984:	2201      	movs	r2, #1
 8000986:	701a      	strb	r2, [r3, #0]
						sDIOTable[i].press_time = sDIOTable[i].released_timer - sDIOTable[i].pressed_timer;
 8000988:	4953      	ldr	r1, [pc, #332]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	4613      	mov	r3, r2
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	4413      	add	r3, r2
 8000992:	011b      	lsls	r3, r3, #4
 8000994:	440b      	add	r3, r1
 8000996:	3348      	adds	r3, #72	@ 0x48
 8000998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800099c:	4610      	mov	r0, r2
 800099e:	494e      	ldr	r1, [pc, #312]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	4613      	mov	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4413      	add	r3, r2
 80009a8:	011b      	lsls	r3, r3, #4
 80009aa:	440b      	add	r3, r1
 80009ac:	3340      	adds	r3, #64	@ 0x40
 80009ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009b2:	4613      	mov	r3, r2
 80009b4:	1ac1      	subs	r1, r0, r3
 80009b6:	4848      	ldr	r0, [pc, #288]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	4613      	mov	r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	4413      	add	r3, r2
 80009c0:	011b      	lsls	r3, r3, #4
 80009c2:	4403      	add	r3, r0
 80009c4:	3338      	adds	r3, #56	@ 0x38
 80009c6:	6019      	str	r1, [r3, #0]
				break;
 80009c8:	e183      	b.n	8000cd2 <DIO_Button_Poll+0x50e>
					if(TMR_Elapsed(sDIOTable[i].pressed_timer) >= 50000UL){ // 50 ms
 80009ca:	4943      	ldr	r1, [pc, #268]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	4613      	mov	r3, r2
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	4413      	add	r3, r2
 80009d4:	011b      	lsls	r3, r3, #4
 80009d6:	440b      	add	r3, r1
 80009d8:	3340      	adds	r3, #64	@ 0x40
 80009da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009de:	4610      	mov	r0, r2
 80009e0:	4619      	mov	r1, r3
 80009e2:	f000 ff82 	bl	80018ea <TMR_Elapsed>
 80009e6:	4602      	mov	r2, r0
 80009e8:	460b      	mov	r3, r1
 80009ea:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80009ee:	428a      	cmp	r2, r1
 80009f0:	f173 0300 	sbcs.w	r3, r3, #0
 80009f4:	f0c0 816d 	bcc.w	8000cd2 <DIO_Button_Poll+0x50e>
						sDIOTable[i].state = eSTATE_Short_Press;
 80009f8:	4937      	ldr	r1, [pc, #220]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	4613      	mov	r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4413      	add	r3, r2
 8000a02:	011b      	lsls	r3, r3, #4
 8000a04:	440b      	add	r3, r1
 8000a06:	3334      	adds	r3, #52	@ 0x34
 8000a08:	2202      	movs	r2, #2
 8000a0a:	701a      	strb	r2, [r3, #0]
						sDIOTable[i].real_state = eSTATE_Short_Press;
 8000a0c:	4932      	ldr	r1, [pc, #200]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	4613      	mov	r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	4413      	add	r3, r2
 8000a16:	011b      	lsls	r3, r3, #4
 8000a18:	440b      	add	r3, r1
 8000a1a:	3335      	adds	r3, #53	@ 0x35
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	701a      	strb	r2, [r3, #0]
				break;
 8000a20:	e157      	b.n	8000cd2 <DIO_Button_Poll+0x50e>
			case eSTATE_Released:
				if(current_state == true){
 8000a22:	78fb      	ldrb	r3, [r7, #3]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d020      	beq.n	8000a6a <DIO_Button_Poll+0x2a6>
					sDIOTable[i].state = eSTATE_Pressed;
 8000a28:	492b      	ldr	r1, [pc, #172]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	4413      	add	r3, r2
 8000a32:	011b      	lsls	r3, r3, #4
 8000a34:	440b      	add	r3, r1
 8000a36:	3334      	adds	r3, #52	@ 0x34
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
					sDIOTable[i].real_state = eSTATE_Pressed;
 8000a3c:	4926      	ldr	r1, [pc, #152]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	4613      	mov	r3, r2
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	4413      	add	r3, r2
 8000a46:	011b      	lsls	r3, r3, #4
 8000a48:	440b      	add	r3, r1
 8000a4a:	3335      	adds	r3, #53	@ 0x35
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
					sDIOTable[i].pressed_timer = TMR_Now();
 8000a50:	f000 fefe 	bl	8001850 <TMR_Now>
 8000a54:	4c20      	ldr	r4, [pc, #128]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	4423      	add	r3, r4
 8000a62:	3340      	adds	r3, #64	@ 0x40
 8000a64:	e9c3 0100 	strd	r0, r1, [r3]
				}else{
					sDIOTable[i].released_timer = TMR_Now();
				}
				break;
 8000a68:	e138      	b.n	8000cdc <DIO_Button_Poll+0x518>
					sDIOTable[i].released_timer = TMR_Now();
 8000a6a:	f000 fef1 	bl	8001850 <TMR_Now>
 8000a6e:	4c1a      	ldr	r4, [pc, #104]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	4613      	mov	r3, r2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	4413      	add	r3, r2
 8000a78:	011b      	lsls	r3, r3, #4
 8000a7a:	4423      	add	r3, r4
 8000a7c:	3348      	adds	r3, #72	@ 0x48
 8000a7e:	e9c3 0100 	strd	r0, r1, [r3]
				break;
 8000a82:	e12b      	b.n	8000cdc <DIO_Button_Poll+0x518>
			case eSTATE_Short_Press:
				if(current_state == false){
 8000a84:	78fb      	ldrb	r3, [r7, #3]
 8000a86:	f083 0301 	eor.w	r3, r3, #1
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d074      	beq.n	8000b7a <DIO_Button_Poll+0x3b6>
					if(sDIOTable[i].real_state != eSTATE_Released){
 8000a90:	4911      	ldr	r1, [pc, #68]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	4613      	mov	r3, r2
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	4413      	add	r3, r2
 8000a9a:	011b      	lsls	r3, r3, #4
 8000a9c:	440b      	add	r3, r1
 8000a9e:	3335      	adds	r3, #53	@ 0x35
 8000aa0:	f993 3000 	ldrsb.w	r3, [r3]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d019      	beq.n	8000adc <DIO_Button_Poll+0x318>
						sDIOTable[i].released_timer = TMR_Now();
 8000aa8:	f000 fed2 	bl	8001850 <TMR_Now>
 8000aac:	4c0a      	ldr	r4, [pc, #40]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4413      	add	r3, r2
 8000ab6:	011b      	lsls	r3, r3, #4
 8000ab8:	4423      	add	r3, r4
 8000aba:	3348      	adds	r3, #72	@ 0x48
 8000abc:	e9c3 0100 	strd	r0, r1, [r3]
						sDIOTable[i].real_state = eSTATE_Released;
 8000ac0:	4905      	ldr	r1, [pc, #20]	@ (8000ad8 <DIO_Button_Poll+0x314>)
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	4413      	add	r3, r2
 8000aca:	011b      	lsls	r3, r3, #4
 8000acc:	440b      	add	r3, r1
 8000ace:	3335      	adds	r3, #53	@ 0x35
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	701a      	strb	r2, [r3, #0]
					if(TMR_Elapsed(sDIOTable[i].pressed_timer) >= 3000000UL){ // 3 secondes
						sDIOTable[i].state = eSTATE_Long_Press;
						sDIOTable[i].real_state = eSTATE_Long_Press;
					}
				}
				break;
 8000ad4:	e0ff      	b.n	8000cd6 <DIO_Button_Poll+0x512>
 8000ad6:	bf00      	nop
 8000ad8:	20005498 	.word	0x20005498
					else if(sDIOTable[i].real_state == eSTATE_Released && TMR_Elapsed(sDIOTable[i].released_timer) > 50000){
 8000adc:	4985      	ldr	r1, [pc, #532]	@ (8000cf4 <DIO_Button_Poll+0x530>)
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	4413      	add	r3, r2
 8000ae6:	011b      	lsls	r3, r3, #4
 8000ae8:	440b      	add	r3, r1
 8000aea:	3335      	adds	r3, #53	@ 0x35
 8000aec:	f993 3000 	ldrsb.w	r3, [r3]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	f040 80f0 	bne.w	8000cd6 <DIO_Button_Poll+0x512>
 8000af6:	497f      	ldr	r1, [pc, #508]	@ (8000cf4 <DIO_Button_Poll+0x530>)
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	4613      	mov	r3, r2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	4413      	add	r3, r2
 8000b00:	011b      	lsls	r3, r3, #4
 8000b02:	440b      	add	r3, r1
 8000b04:	3348      	adds	r3, #72	@ 0x48
 8000b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f000 feec 	bl	80018ea <TMR_Elapsed>
 8000b12:	4602      	mov	r2, r0
 8000b14:	460b      	mov	r3, r1
 8000b16:	f24c 3151 	movw	r1, #50001	@ 0xc351
 8000b1a:	428a      	cmp	r2, r1
 8000b1c:	f173 0300 	sbcs.w	r3, r3, #0
 8000b20:	f0c0 80d9 	bcc.w	8000cd6 <DIO_Button_Poll+0x512>
						sDIOTable[i].state = eSTATE_Released;
 8000b24:	4973      	ldr	r1, [pc, #460]	@ (8000cf4 <DIO_Button_Poll+0x530>)
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	011b      	lsls	r3, r3, #4
 8000b30:	440b      	add	r3, r1
 8000b32:	3334      	adds	r3, #52	@ 0x34
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
						sDIOTable[i].press_time = sDIOTable[i].released_timer - sDIOTable[i].pressed_timer;
 8000b38:	496e      	ldr	r1, [pc, #440]	@ (8000cf4 <DIO_Button_Poll+0x530>)
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4413      	add	r3, r2
 8000b42:	011b      	lsls	r3, r3, #4
 8000b44:	440b      	add	r3, r1
 8000b46:	3348      	adds	r3, #72	@ 0x48
 8000b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b4c:	4610      	mov	r0, r2
 8000b4e:	4969      	ldr	r1, [pc, #420]	@ (8000cf4 <DIO_Button_Poll+0x530>)
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	4613      	mov	r3, r2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	4413      	add	r3, r2
 8000b58:	011b      	lsls	r3, r3, #4
 8000b5a:	440b      	add	r3, r1
 8000b5c:	3340      	adds	r3, #64	@ 0x40
 8000b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b62:	4613      	mov	r3, r2
 8000b64:	1ac1      	subs	r1, r0, r3
 8000b66:	4863      	ldr	r0, [pc, #396]	@ (8000cf4 <DIO_Button_Poll+0x530>)
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	4413      	add	r3, r2
 8000b70:	011b      	lsls	r3, r3, #4
 8000b72:	4403      	add	r3, r0
 8000b74:	3338      	adds	r3, #56	@ 0x38
 8000b76:	6019      	str	r1, [r3, #0]
				break;
 8000b78:	e0ad      	b.n	8000cd6 <DIO_Button_Poll+0x512>
					if(TMR_Elapsed(sDIOTable[i].pressed_timer) >= 3000000UL){ // 3 secondes
 8000b7a:	495e      	ldr	r1, [pc, #376]	@ (8000cf4 <DIO_Button_Poll+0x530>)
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	011b      	lsls	r3, r3, #4
 8000b86:	440b      	add	r3, r1
 8000b88:	3340      	adds	r3, #64	@ 0x40
 8000b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b8e:	4610      	mov	r0, r2
 8000b90:	4619      	mov	r1, r3
 8000b92:	f000 feaa 	bl	80018ea <TMR_Elapsed>
 8000b96:	4602      	mov	r2, r0
 8000b98:	460b      	mov	r3, r1
 8000b9a:	4957      	ldr	r1, [pc, #348]	@ (8000cf8 <DIO_Button_Poll+0x534>)
 8000b9c:	428a      	cmp	r2, r1
 8000b9e:	f173 0300 	sbcs.w	r3, r3, #0
 8000ba2:	f0c0 8098 	bcc.w	8000cd6 <DIO_Button_Poll+0x512>
						sDIOTable[i].state = eSTATE_Long_Press;
 8000ba6:	4953      	ldr	r1, [pc, #332]	@ (8000cf4 <DIO_Button_Poll+0x530>)
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	4613      	mov	r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	4413      	add	r3, r2
 8000bb0:	011b      	lsls	r3, r3, #4
 8000bb2:	440b      	add	r3, r1
 8000bb4:	3334      	adds	r3, #52	@ 0x34
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	701a      	strb	r2, [r3, #0]
						sDIOTable[i].real_state = eSTATE_Long_Press;
 8000bba:	494e      	ldr	r1, [pc, #312]	@ (8000cf4 <DIO_Button_Poll+0x530>)
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	4413      	add	r3, r2
 8000bc4:	011b      	lsls	r3, r3, #4
 8000bc6:	440b      	add	r3, r1
 8000bc8:	3335      	adds	r3, #53	@ 0x35
 8000bca:	2203      	movs	r2, #3
 8000bcc:	701a      	strb	r2, [r3, #0]
				break;
 8000bce:	e082      	b.n	8000cd6 <DIO_Button_Poll+0x512>
			case eSTATE_Long_Press:
				if(current_state == false){
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	f083 0301 	eor.w	r3, r3, #1
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d07e      	beq.n	8000cda <DIO_Button_Poll+0x516>
					if(sDIOTable[i].real_state != eSTATE_Released){
 8000bdc:	4945      	ldr	r1, [pc, #276]	@ (8000cf4 <DIO_Button_Poll+0x530>)
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	4613      	mov	r3, r2
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	4413      	add	r3, r2
 8000be6:	011b      	lsls	r3, r3, #4
 8000be8:	440b      	add	r3, r1
 8000bea:	3335      	adds	r3, #53	@ 0x35
 8000bec:	f993 3000 	ldrsb.w	r3, [r3]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d016      	beq.n	8000c22 <DIO_Button_Poll+0x45e>
						sDIOTable[i].released_timer = TMR_Now();
 8000bf4:	f000 fe2c 	bl	8001850 <TMR_Now>
 8000bf8:	4c3e      	ldr	r4, [pc, #248]	@ (8000cf4 <DIO_Button_Poll+0x530>)
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	4413      	add	r3, r2
 8000c02:	011b      	lsls	r3, r3, #4
 8000c04:	4423      	add	r3, r4
 8000c06:	3348      	adds	r3, #72	@ 0x48
 8000c08:	e9c3 0100 	strd	r0, r1, [r3]
						sDIOTable[i].real_state = eSTATE_Released;
 8000c0c:	4939      	ldr	r1, [pc, #228]	@ (8000cf4 <DIO_Button_Poll+0x530>)
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	4613      	mov	r3, r2
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4413      	add	r3, r2
 8000c16:	011b      	lsls	r3, r3, #4
 8000c18:	440b      	add	r3, r1
 8000c1a:	3335      	adds	r3, #53	@ 0x35
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	701a      	strb	r2, [r3, #0]
						sDIOTable[i].state = eSTATE_Released;
						sDIOTable[i].press_time = sDIOTable[i].released_timer - sDIOTable[i].pressed_timer;
					}
				}else{
				}
				break;
 8000c20:	e05b      	b.n	8000cda <DIO_Button_Poll+0x516>
					else if(sDIOTable[i].real_state == eSTATE_Released && TMR_Elapsed(sDIOTable[i].released_timer) > 50000){
 8000c22:	4934      	ldr	r1, [pc, #208]	@ (8000cf4 <DIO_Button_Poll+0x530>)
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4613      	mov	r3, r2
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	4413      	add	r3, r2
 8000c2c:	011b      	lsls	r3, r3, #4
 8000c2e:	440b      	add	r3, r1
 8000c30:	3335      	adds	r3, #53	@ 0x35
 8000c32:	f993 3000 	ldrsb.w	r3, [r3]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d14f      	bne.n	8000cda <DIO_Button_Poll+0x516>
 8000c3a:	492e      	ldr	r1, [pc, #184]	@ (8000cf4 <DIO_Button_Poll+0x530>)
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	011b      	lsls	r3, r3, #4
 8000c46:	440b      	add	r3, r1
 8000c48:	3348      	adds	r3, #72	@ 0x48
 8000c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4e:	4610      	mov	r0, r2
 8000c50:	4619      	mov	r1, r3
 8000c52:	f000 fe4a 	bl	80018ea <TMR_Elapsed>
 8000c56:	4602      	mov	r2, r0
 8000c58:	460b      	mov	r3, r1
 8000c5a:	f24c 3151 	movw	r1, #50001	@ 0xc351
 8000c5e:	428a      	cmp	r2, r1
 8000c60:	f173 0300 	sbcs.w	r3, r3, #0
 8000c64:	d339      	bcc.n	8000cda <DIO_Button_Poll+0x516>
						sDIOTable[i].state = eSTATE_Released;
 8000c66:	4923      	ldr	r1, [pc, #140]	@ (8000cf4 <DIO_Button_Poll+0x530>)
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	4413      	add	r3, r2
 8000c70:	011b      	lsls	r3, r3, #4
 8000c72:	440b      	add	r3, r1
 8000c74:	3334      	adds	r3, #52	@ 0x34
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]
						sDIOTable[i].press_time = sDIOTable[i].released_timer - sDIOTable[i].pressed_timer;
 8000c7a:	491e      	ldr	r1, [pc, #120]	@ (8000cf4 <DIO_Button_Poll+0x530>)
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	4413      	add	r3, r2
 8000c84:	011b      	lsls	r3, r3, #4
 8000c86:	440b      	add	r3, r1
 8000c88:	3348      	adds	r3, #72	@ 0x48
 8000c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8e:	4610      	mov	r0, r2
 8000c90:	4918      	ldr	r1, [pc, #96]	@ (8000cf4 <DIO_Button_Poll+0x530>)
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	4613      	mov	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	4413      	add	r3, r2
 8000c9a:	011b      	lsls	r3, r3, #4
 8000c9c:	440b      	add	r3, r1
 8000c9e:	3340      	adds	r3, #64	@ 0x40
 8000ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	1ac1      	subs	r1, r0, r3
 8000ca8:	4812      	ldr	r0, [pc, #72]	@ (8000cf4 <DIO_Button_Poll+0x530>)
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	4613      	mov	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	011b      	lsls	r3, r3, #4
 8000cb4:	4403      	add	r3, r0
 8000cb6:	3338      	adds	r3, #56	@ 0x38
 8000cb8:	6019      	str	r1, [r3, #0]
				break;
 8000cba:	e00e      	b.n	8000cda <DIO_Button_Poll+0x516>
			default:
				sDIOTable[i].state = eSTATE_Uknown;
 8000cbc:	490d      	ldr	r1, [pc, #52]	@ (8000cf4 <DIO_Button_Poll+0x530>)
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	011b      	lsls	r3, r3, #4
 8000cc8:	440b      	add	r3, r1
 8000cca:	3334      	adds	r3, #52	@ 0x34
 8000ccc:	22ff      	movs	r2, #255	@ 0xff
 8000cce:	701a      	strb	r2, [r3, #0]
				break;
 8000cd0:	e004      	b.n	8000cdc <DIO_Button_Poll+0x518>
				break;
 8000cd2:	bf00      	nop
 8000cd4:	e002      	b.n	8000cdc <DIO_Button_Poll+0x518>
				break;
 8000cd6:	bf00      	nop
 8000cd8:	e000      	b.n	8000cdc <DIO_Button_Poll+0x518>
				break;
 8000cda:	bf00      	nop
	for(int i = 0;i < eID_DIO_MAX ;i++){
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b05      	cmp	r3, #5
 8000ce6:	f77f ad73 	ble.w	80007d0 <DIO_Button_Poll+0xc>
			}
		}
	}
}
 8000cea:	bf00      	nop
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd90      	pop	{r4, r7, pc}
 8000cf4:	20005498 	.word	0x20005498
 8000cf8:	002dc6c0 	.word	0x002dc6c0

08000cfc <DIO_GPIO_CLK_ENABLE>:
void DIO_GPIO_CLK_ENABLE(uint32_t sGPIO){
 8000cfc:	b480      	push	{r7}
 8000cfe:	b08b      	sub	sp, #44	@ 0x2c
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

	switch(sGPIO){
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a5f      	ldr	r2, [pc, #380]	@ (8000e84 <DIO_GPIO_CLK_ENABLE+0x188>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	f000 80a5 	beq.w	8000e58 <DIO_GPIO_CLK_ENABLE+0x15c>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a5c      	ldr	r2, [pc, #368]	@ (8000e84 <DIO_GPIO_CLK_ENABLE+0x188>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	f200 80af 	bhi.w	8000e76 <DIO_GPIO_CLK_ENABLE+0x17a>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a5b      	ldr	r2, [pc, #364]	@ (8000e88 <DIO_GPIO_CLK_ENABLE+0x18c>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	f000 808c 	beq.w	8000e3a <DIO_GPIO_CLK_ENABLE+0x13e>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a58      	ldr	r2, [pc, #352]	@ (8000e88 <DIO_GPIO_CLK_ENABLE+0x18c>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	f200 80a5 	bhi.w	8000e76 <DIO_GPIO_CLK_ENABLE+0x17a>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a57      	ldr	r2, [pc, #348]	@ (8000e8c <DIO_GPIO_CLK_ENABLE+0x190>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d073      	beq.n	8000e1c <DIO_GPIO_CLK_ENABLE+0x120>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a55      	ldr	r2, [pc, #340]	@ (8000e8c <DIO_GPIO_CLK_ENABLE+0x190>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	f200 809c 	bhi.w	8000e76 <DIO_GPIO_CLK_ENABLE+0x17a>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a53      	ldr	r2, [pc, #332]	@ (8000e90 <DIO_GPIO_CLK_ENABLE+0x194>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d05b      	beq.n	8000dfe <DIO_GPIO_CLK_ENABLE+0x102>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a51      	ldr	r2, [pc, #324]	@ (8000e90 <DIO_GPIO_CLK_ENABLE+0x194>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	f200 8093 	bhi.w	8000e76 <DIO_GPIO_CLK_ENABLE+0x17a>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a50      	ldr	r2, [pc, #320]	@ (8000e94 <DIO_GPIO_CLK_ENABLE+0x198>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d043      	beq.n	8000de0 <DIO_GPIO_CLK_ENABLE+0xe4>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a4e      	ldr	r2, [pc, #312]	@ (8000e94 <DIO_GPIO_CLK_ENABLE+0x198>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	f200 808a 	bhi.w	8000e76 <DIO_GPIO_CLK_ENABLE+0x17a>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a4c      	ldr	r2, [pc, #304]	@ (8000e98 <DIO_GPIO_CLK_ENABLE+0x19c>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d02b      	beq.n	8000dc2 <DIO_GPIO_CLK_ENABLE+0xc6>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a4a      	ldr	r2, [pc, #296]	@ (8000e98 <DIO_GPIO_CLK_ENABLE+0x19c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	f200 8081 	bhi.w	8000e76 <DIO_GPIO_CLK_ENABLE+0x17a>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a49      	ldr	r2, [pc, #292]	@ (8000e9c <DIO_GPIO_CLK_ENABLE+0x1a0>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d004      	beq.n	8000d86 <DIO_GPIO_CLK_ENABLE+0x8a>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a48      	ldr	r2, [pc, #288]	@ (8000ea0 <DIO_GPIO_CLK_ENABLE+0x1a4>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d00f      	beq.n	8000da4 <DIO_GPIO_CLK_ENABLE+0xa8>
		break;
	case (uint32_t)GPIOH:
		  __HAL_RCC_GPIOH_CLK_ENABLE();
		break;
	}
}
 8000d84:	e077      	b.n	8000e76 <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d8a:	4b46      	ldr	r3, [pc, #280]	@ (8000ea4 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a45      	ldr	r2, [pc, #276]	@ (8000ea4 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b43      	ldr	r3, [pc, #268]	@ (8000ea4 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
		break;
 8000da2:	e068      	b.n	8000e76 <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
 8000da8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ea4 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dac:	4a3d      	ldr	r2, [pc, #244]	@ (8000ea4 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000dae:	f043 0302 	orr.w	r3, r3, #2
 8000db2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ea4 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	623b      	str	r3, [r7, #32]
 8000dbe:	6a3b      	ldr	r3, [r7, #32]
		break;
 8000dc0:	e059      	b.n	8000e76 <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
 8000dc6:	4b37      	ldr	r3, [pc, #220]	@ (8000ea4 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	4a36      	ldr	r2, [pc, #216]	@ (8000ea4 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd2:	4b34      	ldr	r3, [pc, #208]	@ (8000ea4 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	61fb      	str	r3, [r7, #28]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
		break;
 8000dde:	e04a      	b.n	8000e76 <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de0:	2300      	movs	r3, #0
 8000de2:	61bb      	str	r3, [r7, #24]
 8000de4:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea4 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de8:	4a2e      	ldr	r2, [pc, #184]	@ (8000ea4 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000dea:	f043 0308 	orr.w	r3, r3, #8
 8000dee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df0:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea4 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df4:	f003 0308 	and.w	r3, r3, #8
 8000df8:	61bb      	str	r3, [r7, #24]
 8000dfa:	69bb      	ldr	r3, [r7, #24]
		break;
 8000dfc:	e03b      	b.n	8000e76 <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	4b28      	ldr	r3, [pc, #160]	@ (8000ea4 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a27      	ldr	r2, [pc, #156]	@ (8000ea4 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000e08:	f043 0310 	orr.w	r3, r3, #16
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b25      	ldr	r3, [pc, #148]	@ (8000ea4 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f003 0310 	and.w	r3, r3, #16
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697b      	ldr	r3, [r7, #20]
		break;
 8000e1a:	e02c      	b.n	8000e76 <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	4b20      	ldr	r3, [pc, #128]	@ (8000ea4 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e24:	4a1f      	ldr	r2, [pc, #124]	@ (8000ea4 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000e26:	f043 0320 	orr.w	r3, r3, #32
 8000e2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea4 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e30:	f003 0320 	and.w	r3, r3, #32
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	693b      	ldr	r3, [r7, #16]
		break;
 8000e38:	e01d      	b.n	8000e76 <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	4a18      	ldr	r2, [pc, #96]	@ (8000ea4 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000e44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ea4 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
		break;
 8000e56:	e00e      	b.n	8000e76 <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e60:	4a10      	ldr	r2, [pc, #64]	@ (8000ea4 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea4 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
		break;
 8000e74:	bf00      	nop
}
 8000e76:	bf00      	nop
 8000e78:	372c      	adds	r7, #44	@ 0x2c
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40021c00 	.word	0x40021c00
 8000e88:	40021800 	.word	0x40021800
 8000e8c:	40021400 	.word	0x40021400
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40020c00 	.word	0x40020c00
 8000e98:	40020800 	.word	0x40020800
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40023800 	.word	0x40023800

08000ea8 <DIO_Init>:

bool DIO_Init(void){
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
	for(int i = 0;i < eID_DIO_MAX ;i++){
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	e0b6      	b.n	8001022 <DIO_Init+0x17a>
		  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]
		  GPIO_InitStruct.Pin = sDIOTable[i].pin;
 8000ec2:	495c      	ldr	r1, [pc, #368]	@ (8001034 <DIO_Init+0x18c>)
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	011b      	lsls	r3, r3, #4
 8000ece:	440b      	add	r3, r1
 8000ed0:	331c      	adds	r3, #28
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	603b      	str	r3, [r7, #0]
		  GPIO_InitStruct.Mode = sDIOTable[i].mode;
 8000ed6:	4957      	ldr	r1, [pc, #348]	@ (8001034 <DIO_Init+0x18c>)
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	4613      	mov	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	011b      	lsls	r3, r3, #4
 8000ee2:	440b      	add	r3, r1
 8000ee4:	3320      	adds	r3, #32
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	607b      	str	r3, [r7, #4]
		  GPIO_InitStruct.Pull = sDIOTable[i].pull;
 8000eea:	4952      	ldr	r1, [pc, #328]	@ (8001034 <DIO_Init+0x18c>)
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	011b      	lsls	r3, r3, #4
 8000ef6:	440b      	add	r3, r1
 8000ef8:	3324      	adds	r3, #36	@ 0x24
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStruct.Alternate = sDIOTable[i].alternate;
 8000efe:	494d      	ldr	r1, [pc, #308]	@ (8001034 <DIO_Init+0x18c>)
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	4613      	mov	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	440b      	add	r3, r1
 8000f0c:	332c      	adds	r3, #44	@ 0x2c
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	613b      	str	r3, [r7, #16]
		  GPIO_InitStruct.Speed = sDIOTable[i].speed;
 8000f12:	4948      	ldr	r1, [pc, #288]	@ (8001034 <DIO_Init+0x18c>)
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	4613      	mov	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	011b      	lsls	r3, r3, #4
 8000f1e:	440b      	add	r3, r1
 8000f20:	3328      	adds	r3, #40	@ 0x28
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	60fb      	str	r3, [r7, #12]
		  sDIOTable[i].state = eSTATE_Uknown;
 8000f26:	4943      	ldr	r1, [pc, #268]	@ (8001034 <DIO_Init+0x18c>)
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	011b      	lsls	r3, r3, #4
 8000f32:	440b      	add	r3, r1
 8000f34:	3334      	adds	r3, #52	@ 0x34
 8000f36:	22ff      	movs	r2, #255	@ 0xff
 8000f38:	701a      	strb	r2, [r3, #0]
		  sDIOTable[i].press_time = 0;
 8000f3a:	493e      	ldr	r1, [pc, #248]	@ (8001034 <DIO_Init+0x18c>)
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	011b      	lsls	r3, r3, #4
 8000f46:	440b      	add	r3, r1
 8000f48:	3338      	adds	r3, #56	@ 0x38
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
		  sDIOTable[i].pressed_timer = 0;
 8000f4e:	4939      	ldr	r1, [pc, #228]	@ (8001034 <DIO_Init+0x18c>)
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	4613      	mov	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	440b      	add	r3, r1
 8000f5c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8000f60:	f04f 0200 	mov.w	r2, #0
 8000f64:	f04f 0300 	mov.w	r3, #0
 8000f68:	e9c1 2300 	strd	r2, r3, [r1]
		  sDIOTable[i].released_timer = 0;
 8000f6c:	4931      	ldr	r1, [pc, #196]	@ (8001034 <DIO_Init+0x18c>)
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	011b      	lsls	r3, r3, #4
 8000f78:	440b      	add	r3, r1
 8000f7a:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	f04f 0300 	mov.w	r3, #0
 8000f86:	e9c1 2300 	strd	r2, r3, [r1]

		  DIO_GPIO_CLK_ENABLE(sDIOTable[i].gpio);
 8000f8a:	492a      	ldr	r1, [pc, #168]	@ (8001034 <DIO_Init+0x18c>)
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	011b      	lsls	r3, r3, #4
 8000f96:	440b      	add	r3, r1
 8000f98:	3318      	adds	r3, #24
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fead 	bl	8000cfc <DIO_GPIO_CLK_ENABLE>

		  HAL_GPIO_Init(sDIOTable[i].gpio, &GPIO_InitStruct);
 8000fa2:	4924      	ldr	r1, [pc, #144]	@ (8001034 <DIO_Init+0x18c>)
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	011b      	lsls	r3, r3, #4
 8000fae:	440b      	add	r3, r1
 8000fb0:	3318      	adds	r3, #24
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4610      	mov	r0, r2
 8000fbc:	f000 ff9c 	bl	8001ef8 <HAL_GPIO_Init>
		  if(sDIOTable[i].default_value != -1)
 8000fc0:	491c      	ldr	r1, [pc, #112]	@ (8001034 <DIO_Init+0x18c>)
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	440b      	add	r3, r1
 8000fce:	3330      	adds	r3, #48	@ 0x30
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd6:	d021      	beq.n	800101c <DIO_Init+0x174>
			  HAL_GPIO_WritePin(sDIOTable[i].gpio, sDIOTable[i].pin, sDIOTable[i].default_value);
 8000fd8:	4916      	ldr	r1, [pc, #88]	@ (8001034 <DIO_Init+0x18c>)
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	011b      	lsls	r3, r3, #4
 8000fe4:	440b      	add	r3, r1
 8000fe6:	3318      	adds	r3, #24
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	461c      	mov	r4, r3
 8000fec:	4911      	ldr	r1, [pc, #68]	@ (8001034 <DIO_Init+0x18c>)
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	440b      	add	r3, r1
 8000ffa:	331c      	adds	r3, #28
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	b299      	uxth	r1, r3
 8001000:	480c      	ldr	r0, [pc, #48]	@ (8001034 <DIO_Init+0x18c>)
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	4613      	mov	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	4403      	add	r3, r0
 800100e:	3330      	adds	r3, #48	@ 0x30
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	461a      	mov	r2, r3
 8001016:	4620      	mov	r0, r4
 8001018:	f001 f922 	bl	8002260 <HAL_GPIO_WritePin>
	for(int i = 0;i < eID_DIO_MAX ;i++){
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	3301      	adds	r3, #1
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	2b05      	cmp	r3, #5
 8001026:	f77f af45 	ble.w	8000eb4 <DIO_Init+0xc>
	}
}
 800102a:	bf00      	nop
 800102c:	4618      	mov	r0, r3
 800102e:	371c      	adds	r7, #28
 8001030:	46bd      	mov	sp, r7
 8001032:	bd90      	pop	{r4, r7, pc}
 8001034:	20005498 	.word	0x20005498

08001038 <DI_Read>:
bool DI_Read(eDIO_ID input_index){
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	if(input_index > eID_DIO_MAX) return false;
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b06      	cmp	r3, #6
 8001046:	d901      	bls.n	800104c <DI_Read+0x14>
 8001048:	2300      	movs	r3, #0
 800104a:	e01c      	b.n	8001086 <DI_Read+0x4e>
	return (HAL_GPIO_ReadPin(sDIOTable[input_index].gpio ,sDIOTable[input_index].pin ) == GPIO_PIN_SET);
 800104c:	79fa      	ldrb	r2, [r7, #7]
 800104e:	4910      	ldr	r1, [pc, #64]	@ (8001090 <DI_Read+0x58>)
 8001050:	4613      	mov	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	011b      	lsls	r3, r3, #4
 8001058:	440b      	add	r3, r1
 800105a:	3318      	adds	r3, #24
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	79fa      	ldrb	r2, [r7, #7]
 8001062:	490b      	ldr	r1, [pc, #44]	@ (8001090 <DI_Read+0x58>)
 8001064:	4613      	mov	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	011b      	lsls	r3, r3, #4
 800106c:	440b      	add	r3, r1
 800106e:	331c      	adds	r3, #28
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	b29b      	uxth	r3, r3
 8001074:	4619      	mov	r1, r3
 8001076:	f001 f8db 	bl	8002230 <HAL_GPIO_ReadPin>
 800107a:	4603      	mov	r3, r0
 800107c:	2b01      	cmp	r3, #1
 800107e:	bf0c      	ite	eq
 8001080:	2301      	moveq	r3, #1
 8001082:	2300      	movne	r3, #0
 8001084:	b2db      	uxtb	r3, r3
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20005498 	.word	0x20005498

08001094 <DO_Write>:

bool DO_Write(eDIO_ID output_index,uint32_t value){
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]

	if(output_index > eID_DIO_MAX) return false;
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2b06      	cmp	r3, #6
 80010a4:	d901      	bls.n	80010aa <DO_Write+0x16>
 80010a6:	2300      	movs	r3, #0
 80010a8:	e018      	b.n	80010dc <DO_Write+0x48>
	  HAL_GPIO_WritePin(sDIOTable[output_index].gpio , sDIOTable[output_index].pin , value);
 80010aa:	79fa      	ldrb	r2, [r7, #7]
 80010ac:	490d      	ldr	r1, [pc, #52]	@ (80010e4 <DO_Write+0x50>)
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	011b      	lsls	r3, r3, #4
 80010b6:	440b      	add	r3, r1
 80010b8:	3318      	adds	r3, #24
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	79fa      	ldrb	r2, [r7, #7]
 80010c0:	4908      	ldr	r1, [pc, #32]	@ (80010e4 <DO_Write+0x50>)
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	011b      	lsls	r3, r3, #4
 80010ca:	440b      	add	r3, r1
 80010cc:	331c      	adds	r3, #28
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	4619      	mov	r1, r3
 80010d8:	f001 f8c2 	bl	8002260 <HAL_GPIO_WritePin>
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20005498 	.word	0x20005498

080010e8 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	DIO_Init();
 80010ec:	f7ff fedc 	bl	8000ea8 <DIO_Init>

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b08f      	sub	sp, #60	@ 0x3c
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

    bool data_sent = false;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    char data[20] = "hello world\n\r";
 8001100:	4b36      	ldr	r3, [pc, #216]	@ (80011dc <main+0xe8>)
 8001102:	f107 0410 	add.w	r4, r7, #16
 8001106:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001108:	c407      	stmia	r4!, {r0, r1, r2}
 800110a:	8023      	strh	r3, [r4, #0]
 800110c:	f107 031e 	add.w	r3, r7, #30
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	809a      	strh	r2, [r3, #4]
    char data2[10] = "s =          \n\r";
 8001116:	4a32      	ldr	r2, [pc, #200]	@ (80011e0 <main+0xec>)
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	ca07      	ldmia	r2, {r0, r1, r2}
 800111c:	c303      	stmia	r3!, {r0, r1}
 800111e:	801a      	strh	r2, [r3, #0]
    char cntr = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint64_t timer = 0;
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001132:	f000 fd5d 	bl	8001bf0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001136:	f000 f857 	bl	80011e8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_TIM2_Init();
 800113a:	f000 fb13 	bl	8001764 <MX_TIM2_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800113e:	f7ff ffd3 	bl	80010e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001142:	f000 fcd5 	bl	8001af0 <MX_USART2_UART_Init>

  CMD_Init();
 8001146:	f7ff fa27 	bl	8000598 <CMD_Init>

  TASK_Manager_Init();
 800114a:	f000 f955 	bl	80013f8 <TASK_Manager_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	CMD_Process();
 800114e:	f7ff fa33 	bl	80005b8 <CMD_Process>
  TASK_Manager_Process();
 8001152:	f000 f98b 	bl	800146c <TASK_Manager_Process>
	DIO_Button_Poll();
 8001156:	f7ff fb35 	bl	80007c4 <DIO_Button_Poll>
  	if(TMR_Expired(timer)){
 800115a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800115e:	f000 fbb0 	bl	80018c2 <TMR_Expired>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d015      	beq.n	8001194 <main+0xa0>
  		timer = TMR_Set(500000);
 8001168:	481e      	ldr	r0, [pc, #120]	@ (80011e4 <main+0xf0>)
 800116a:	f04f 0100 	mov.w	r1, #0
 800116e:	f000 fb95 	bl	800189c <TMR_Set>
 8001172:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
  		if(GPIO_PIN_SET == DI_Read(eID_LED5))
 8001176:	2004      	movs	r0, #4
 8001178:	f7ff ff5e 	bl	8001038 <DI_Read>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d004      	beq.n	800118c <main+0x98>
  			DO_Write(eID_LED5,GPIO_PIN_RESET);
 8001182:	2100      	movs	r1, #0
 8001184:	2004      	movs	r0, #4
 8001186:	f7ff ff85 	bl	8001094 <DO_Write>
 800118a:	e003      	b.n	8001194 <main+0xa0>
  		else
  			DO_Write(eID_LED5,GPIO_PIN_SET);
 800118c:	2101      	movs	r1, #1
 800118e:	2004      	movs	r0, #4
 8001190:	f7ff ff80 	bl	8001094 <DO_Write>
  	}
    if(DI_Button_GetState(eID_btn_blue) >= eSTATE_Short_Press){
 8001194:	2000      	movs	r0, #0
 8001196:	f7ff fafd 	bl	8000794 <DI_Button_GetState>
 800119a:	4603      	mov	r3, r0
 800119c:	2b01      	cmp	r3, #1
 800119e:	dd15      	ble.n	80011cc <main+0xd8>
		DO_Write(eID_LED4,GPIO_PIN_SET);
 80011a0:	2101      	movs	r1, #1
 80011a2:	2002      	movs	r0, #2
 80011a4:	f7ff ff76 	bl	8001094 <DO_Write>
  	  if(data_sent == false){
 80011a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80011ac:	f083 0301 	eor.w	r3, r3, #1
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0cb      	beq.n	800114e <main+0x5a>
  		UART_Send(eID_UART2,data,sizeof(data));
 80011b6:	f107 0310 	add.w	r3, r7, #16
 80011ba:	2214      	movs	r2, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	2000      	movs	r0, #0
 80011c0:	f000 fc48 	bl	8001a54 <UART_Send>
  	  	data_sent = true;
 80011c4:	2301      	movs	r3, #1
 80011c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80011ca:	e7c0      	b.n	800114e <main+0x5a>
  	  }

    }
    else{
    	DO_Write(eID_LED4,GPIO_PIN_RESET);
 80011cc:	2100      	movs	r1, #0
 80011ce:	2002      	movs	r0, #2
 80011d0:	f7ff ff60 	bl	8001094 <DO_Write>
    	data_sent = false;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  {
 80011da:	e7b8      	b.n	800114e <main+0x5a>
 80011dc:	08006314 	.word	0x08006314
 80011e0:	08006328 	.word	0x08006328
 80011e4:	0007a120 	.word	0x0007a120

080011e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b094      	sub	sp, #80	@ 0x50
 80011ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ee:	f107 0320 	add.w	r3, r7, #32
 80011f2:	2230      	movs	r2, #48	@ 0x30
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f005 f800 	bl	80061fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	4b28      	ldr	r3, [pc, #160]	@ (80012b4 <SystemClock_Config+0xcc>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001214:	4a27      	ldr	r2, [pc, #156]	@ (80012b4 <SystemClock_Config+0xcc>)
 8001216:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800121a:	6413      	str	r3, [r2, #64]	@ 0x40
 800121c:	4b25      	ldr	r3, [pc, #148]	@ (80012b4 <SystemClock_Config+0xcc>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001228:	2300      	movs	r3, #0
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	4b22      	ldr	r3, [pc, #136]	@ (80012b8 <SystemClock_Config+0xd0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a21      	ldr	r2, [pc, #132]	@ (80012b8 <SystemClock_Config+0xd0>)
 8001232:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b1f      	ldr	r3, [pc, #124]	@ (80012b8 <SystemClock_Config+0xd0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001244:	2301      	movs	r3, #1
 8001246:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001248:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124e:	2302      	movs	r3, #2
 8001250:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001252:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001256:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001258:	2308      	movs	r3, #8
 800125a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800125c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001260:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001262:	2302      	movs	r3, #2
 8001264:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001266:	2307      	movs	r3, #7
 8001268:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126a:	f107 0320 	add.w	r3, r7, #32
 800126e:	4618      	mov	r0, r3
 8001270:	f002 fdb6 	bl	8003de0 <HAL_RCC_OscConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800127a:	f000 f81f 	bl	80012bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127e:	230f      	movs	r3, #15
 8001280:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001282:	2302      	movs	r3, #2
 8001284:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800128a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800128e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001290:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001294:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	2105      	movs	r1, #5
 800129c:	4618      	mov	r0, r3
 800129e:	f003 f817 	bl	80042d0 <HAL_RCC_ClockConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012a8:	f000 f808 	bl	80012bc <Error_Handler>
  }
}
 80012ac:	bf00      	nop
 80012ae:	3750      	adds	r7, #80	@ 0x50
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40007000 	.word	0x40007000

080012bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c0:	b672      	cpsid	i
}
 80012c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <Error_Handler+0x8>

080012c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <HAL_MspInit+0x4c>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001314 <HAL_MspInit+0x4c>)
 80012d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012de:	4b0d      	ldr	r3, [pc, #52]	@ (8001314 <HAL_MspInit+0x4c>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <HAL_MspInit+0x4c>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	4a08      	ldr	r2, [pc, #32]	@ (8001314 <HAL_MspInit+0x4c>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fa:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_MspInit+0x4c>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001306:	2007      	movs	r0, #7
 8001308:	f000 fdb4 	bl	8001e74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800

08001318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <NMI_Handler+0x4>

08001320 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <HardFault_Handler+0x4>

08001328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <MemManage_Handler+0x4>

08001330 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <BusFault_Handler+0x4>

08001338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <UsageFault_Handler+0x4>

08001340 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800136e:	f000 fc91 	bl	8001c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800137c:	4802      	ldr	r0, [pc, #8]	@ (8001388 <OTG_FS_IRQHandler+0x10>)
 800137e:	f000 ff88 	bl	8002292 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	2000a790 	.word	0x2000a790

0800138c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <SystemInit+0x20>)
 8001392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001396:	4a05      	ldr	r2, [pc, #20]	@ (80013ac <SystemInit+0x20>)
 8001398:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800139c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <utility1>:
    void (*program_user_utilty1)(void);
    void (*program_user_utilty2)(void);
    void (*program_user_utilty3)(void);
} tProgramInfos;

static void utility1(){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
    UART_Send(eID_UART2,"Utility 1 called from task code.\n\r",35);
 80013b4:	2223      	movs	r2, #35	@ 0x23
 80013b6:	4903      	ldr	r1, [pc, #12]	@ (80013c4 <utility1+0x14>)
 80013b8:	2000      	movs	r0, #0
 80013ba:	f000 fb4b 	bl	8001a54 <UART_Send>
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	08006334 	.word	0x08006334

080013c8 <utility2>:

static void utility2(){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
    UART_Send(eID_UART2,"Utility 2 called from task code.\n\r",35);
 80013cc:	2223      	movs	r2, #35	@ 0x23
 80013ce:	4903      	ldr	r1, [pc, #12]	@ (80013dc <utility2+0x14>)
 80013d0:	2000      	movs	r0, #0
 80013d2:	f000 fb3f 	bl	8001a54 <UART_Send>
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	08006358 	.word	0x08006358

080013e0 <utility3>:

static void utility3(){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
    UART_Send(eID_UART2,"Utility 3 called from task code.\n\r",35);
 80013e4:	2223      	movs	r2, #35	@ 0x23
 80013e6:	4903      	ldr	r1, [pc, #12]	@ (80013f4 <utility3+0x14>)
 80013e8:	2000      	movs	r0, #0
 80013ea:	f000 fb33 	bl	8001a54 <UART_Send>
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	0800637c 	.word	0x0800637c

080013f8 <TASK_Manager_Init>:
    eSTATE_Finished,
}eTASKSM_STATE;

static eTASKSM_STATE sStateMachine;

void TASK_Manager_Init(void){
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
    sStateMachine = eSTATE_Init;
 80013fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001434 <TASK_Manager_Init+0x3c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
    sCurrentProgramInfos.program_size = 0;
 8001402:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <TASK_Manager_Init+0x40>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
    sCurrentProgramInfos.program_buffer = sProgramBuffer;
 8001408:	4b0b      	ldr	r3, [pc, #44]	@ (8001438 <TASK_Manager_Init+0x40>)
 800140a:	4a0c      	ldr	r2, [pc, #48]	@ (800143c <TASK_Manager_Init+0x44>)
 800140c:	605a      	str	r2, [r3, #4]
    sCurrentProgramInfos.program_entry = (void (*)(void)) sProgramBuffer + 1; //thumb mode
 800140e:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <TASK_Manager_Init+0x44>)
 8001410:	3301      	adds	r3, #1
 8001412:	4a09      	ldr	r2, [pc, #36]	@ (8001438 <TASK_Manager_Init+0x40>)
 8001414:	6093      	str	r3, [r2, #8]
    sCurrentProgramInfos.program_user_utilty1 = &utility1;
 8001416:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <TASK_Manager_Init+0x40>)
 8001418:	4a09      	ldr	r2, [pc, #36]	@ (8001440 <TASK_Manager_Init+0x48>)
 800141a:	60da      	str	r2, [r3, #12]
    sCurrentProgramInfos.program_user_utilty2 = &utility2;
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <TASK_Manager_Init+0x40>)
 800141e:	4a09      	ldr	r2, [pc, #36]	@ (8001444 <TASK_Manager_Init+0x4c>)
 8001420:	611a      	str	r2, [r3, #16]
    sCurrentProgramInfos.program_user_utilty3 = &utility3;
 8001422:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <TASK_Manager_Init+0x40>)
 8001424:	4a08      	ldr	r2, [pc, #32]	@ (8001448 <TASK_Manager_Init+0x50>)
 8001426:	615a      	str	r2, [r3, #20]
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	2000a736 	.word	0x2000a736
 8001438:	200056f4 	.word	0x200056f4
 800143c:	2000570c 	.word	0x2000570c
 8001440:	080013b1 	.word	0x080013b1
 8001444:	080013c9 	.word	0x080013c9
 8001448:	080013e1 	.word	0x080013e1

0800144c <TASK_Manager_StartReceiveTaskCode>:

void TASK_Manager_StartReceiveTaskCode(void){
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
    sStateMachine = eSTATE_ReceiveTaskCode;
 8001450:	4b04      	ldr	r3, [pc, #16]	@ (8001464 <TASK_Manager_StartReceiveTaskCode+0x18>)
 8001452:	2202      	movs	r2, #2
 8001454:	701a      	strb	r2, [r3, #0]
    UART_Send(eID_UART2,"Start by sending task size...\n\r",31);
 8001456:	221f      	movs	r2, #31
 8001458:	4903      	ldr	r1, [pc, #12]	@ (8001468 <TASK_Manager_StartReceiveTaskCode+0x1c>)
 800145a:	2000      	movs	r0, #0
 800145c:	f000 fafa 	bl	8001a54 <UART_Send>
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	2000a736 	.word	0x2000a736
 8001468:	080063a0 	.word	0x080063a0

0800146c <TASK_Manager_Process>:

void TASK_Manager_Process(void){
 800146c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001470:	b084      	sub	sp, #16
 8001472:	af00      	add	r7, sp, #0
    static uint16_t buffer_index = 0;
    static int task_size = -1;
    static int tmp_task_size = 0;
    uint8_t current_char = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	71bb      	strb	r3, [r7, #6]
    uint64_t receiveTimer = 0;
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	f04f 0300 	mov.w	r3, #0
 8001480:	e9c7 2302 	strd	r2, r3, [r7, #8]
    if(sStateMachine == eSTATE_Uknown) return;
 8001484:	4ba4      	ldr	r3, [pc, #656]	@ (8001718 <TASK_Manager_Process+0x2ac>)
 8001486:	f993 3000 	ldrsb.w	r3, [r3]
 800148a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148e:	f000 813a 	beq.w	8001706 <TASK_Manager_Process+0x29a>
    switch(sStateMachine)
 8001492:	4ba1      	ldr	r3, [pc, #644]	@ (8001718 <TASK_Manager_Process+0x2ac>)
 8001494:	f993 3000 	ldrsb.w	r3, [r3]
 8001498:	3302      	adds	r3, #2
 800149a:	2b08      	cmp	r3, #8
 800149c:	f200 812f 	bhi.w	80016fe <TASK_Manager_Process+0x292>
 80014a0:	a201      	add	r2, pc, #4	@ (adr r2, 80014a8 <TASK_Manager_Process+0x3c>)
 80014a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a6:	bf00      	nop
 80014a8:	0800170b 	.word	0x0800170b
 80014ac:	080016ff 	.word	0x080016ff
 80014b0:	080014cd 	.word	0x080014cd
 80014b4:	080014ff 	.word	0x080014ff
 80014b8:	08001521 	.word	0x08001521
 80014bc:	080016b7 	.word	0x080016b7
 80014c0:	080016bf 	.word	0x080016bf
 80014c4:	080016d1 	.word	0x080016d1
 80014c8:	080016f3 	.word	0x080016f3
    {
        case eSTATE_Init:
            //initialization
            sStateMachine = eSTATE_Ready;
 80014cc:	4b92      	ldr	r3, [pc, #584]	@ (8001718 <TASK_Manager_Process+0x2ac>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
            task_size = -1;
 80014d2:	4b92      	ldr	r3, [pc, #584]	@ (800171c <TASK_Manager_Process+0x2b0>)
 80014d4:	f04f 32ff 	mov.w	r2, #4294967295
 80014d8:	601a      	str	r2, [r3, #0]
            buffer_index = 0;
 80014da:	4b91      	ldr	r3, [pc, #580]	@ (8001720 <TASK_Manager_Process+0x2b4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	801a      	strh	r2, [r3, #0]
            tmp_task_size = 0;
 80014e0:	4b90      	ldr	r3, [pc, #576]	@ (8001724 <TASK_Manager_Process+0x2b8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
            memset(sProgramBuffer,0,sizeof(sProgramBuffer));
 80014e6:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80014ea:	2100      	movs	r1, #0
 80014ec:	488e      	ldr	r0, [pc, #568]	@ (8001728 <TASK_Manager_Process+0x2bc>)
 80014ee:	f004 fe85 	bl	80061fc <memset>
            UART_Send(eID_UART2,"Task Manager Initialized\r\n",26);
 80014f2:	221a      	movs	r2, #26
 80014f4:	498d      	ldr	r1, [pc, #564]	@ (800172c <TASK_Manager_Process+0x2c0>)
 80014f6:	2000      	movs	r0, #0
 80014f8:	f000 faac 	bl	8001a54 <UART_Send>
            break;
 80014fc:	e108      	b.n	8001710 <TASK_Manager_Process+0x2a4>
        case eSTATE_Ready:
            //wait for task
            task_size = -1;
 80014fe:	4b87      	ldr	r3, [pc, #540]	@ (800171c <TASK_Manager_Process+0x2b0>)
 8001500:	f04f 32ff 	mov.w	r2, #4294967295
 8001504:	601a      	str	r2, [r3, #0]
            buffer_index = 0;
 8001506:	4b86      	ldr	r3, [pc, #536]	@ (8001720 <TASK_Manager_Process+0x2b4>)
 8001508:	2200      	movs	r2, #0
 800150a:	801a      	strh	r2, [r3, #0]
            tmp_task_size = 0;
 800150c:	4b85      	ldr	r3, [pc, #532]	@ (8001724 <TASK_Manager_Process+0x2b8>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
            memset(sProgramBuffer,0x55,sizeof(sProgramBuffer));
 8001512:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8001516:	2155      	movs	r1, #85	@ 0x55
 8001518:	4883      	ldr	r0, [pc, #524]	@ (8001728 <TASK_Manager_Process+0x2bc>)
 800151a:	f004 fe6f 	bl	80061fc <memset>
            break;
 800151e:	e0f7      	b.n	8001710 <TASK_Manager_Process+0x2a4>
        case eSTATE_ReceiveTaskCode:
            //process task
            bool data_received = false;
 8001520:	2300      	movs	r3, #0
 8001522:	71fb      	strb	r3, [r7, #7]
            if(TMR_Expired(receiveTimer) && (task_size != -1)){
 8001524:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001528:	f000 f9cb 	bl	80018c2 <TMR_Expired>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00f      	beq.n	8001552 <TASK_Manager_Process+0xe6>
 8001532:	4b7a      	ldr	r3, [pc, #488]	@ (800171c <TASK_Manager_Process+0x2b0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153a:	d00a      	beq.n	8001552 <TASK_Manager_Process+0xe6>
                //timeout
                UART_Send(eID_UART2,"\n\rTimeout waiting for task code. Resetting...\n\r",48);
 800153c:	2230      	movs	r2, #48	@ 0x30
 800153e:	497c      	ldr	r1, [pc, #496]	@ (8001730 <TASK_Manager_Process+0x2c4>)
 8001540:	2000      	movs	r0, #0
 8001542:	f000 fa87 	bl	8001a54 <UART_Send>
                sStateMachine = eSTATE_Ready;
 8001546:	4b74      	ldr	r3, [pc, #464]	@ (8001718 <TASK_Manager_Process+0x2ac>)
 8001548:	2201      	movs	r2, #1
 800154a:	701a      	strb	r2, [r3, #0]
                CMD_SetToReadyState();
 800154c:	f7ff f818 	bl	8000580 <CMD_SetToReadyState>
                break;
 8001550:	e0de      	b.n	8001710 <TASK_Manager_Process+0x2a4>
            }
            if(UART_Receive_timeout(eID_UART2,&current_char,1,0) == true){
 8001552:	1db9      	adds	r1, r7, #6
 8001554:	2300      	movs	r3, #0
 8001556:	2201      	movs	r2, #1
 8001558:	2000      	movs	r0, #0
 800155a:	f000 faa1 	bl	8001aa0 <UART_Receive_timeout>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 80d4 	beq.w	800170e <TASK_Manager_Process+0x2a2>
                if(task_size == -1){
 8001566:	4b6d      	ldr	r3, [pc, #436]	@ (800171c <TASK_Manager_Process+0x2b0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800156e:	d16f      	bne.n	8001650 <TASK_Manager_Process+0x1e4>
                    //receiving task size
                    if((current_char >= '0') && (current_char <= '9')){
 8001570:	79bb      	ldrb	r3, [r7, #6]
 8001572:	2b2f      	cmp	r3, #47	@ 0x2f
 8001574:	d915      	bls.n	80015a2 <TASK_Manager_Process+0x136>
 8001576:	79bb      	ldrb	r3, [r7, #6]
 8001578:	2b39      	cmp	r3, #57	@ 0x39
 800157a:	d812      	bhi.n	80015a2 <TASK_Manager_Process+0x136>
                        tmp_task_size = (tmp_task_size * 10) + (current_char - '0');
 800157c:	4b69      	ldr	r3, [pc, #420]	@ (8001724 <TASK_Manager_Process+0x2b8>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	461a      	mov	r2, r3
 800158a:	79bb      	ldrb	r3, [r7, #6]
 800158c:	3b30      	subs	r3, #48	@ 0x30
 800158e:	4413      	add	r3, r2
 8001590:	4a64      	ldr	r2, [pc, #400]	@ (8001724 <TASK_Manager_Process+0x2b8>)
 8001592:	6013      	str	r3, [r2, #0]
                        UART_Send(eID_UART2,&current_char,1);
 8001594:	1dbb      	adds	r3, r7, #6
 8001596:	2201      	movs	r2, #1
 8001598:	4619      	mov	r1, r3
 800159a:	2000      	movs	r0, #0
 800159c:	f000 fa5a 	bl	8001a54 <UART_Send>
 80015a0:	e088      	b.n	80016b4 <TASK_Manager_Process+0x248>
                    }else if(current_char == 0x0D){
 80015a2:	79bb      	ldrb	r3, [r7, #6]
 80015a4:	2b0d      	cmp	r3, #13
 80015a6:	d131      	bne.n	800160c <TASK_Manager_Process+0x1a0>
                        //end of size
                        UART_Send(eID_UART2,"\r\n",2);
 80015a8:	2202      	movs	r2, #2
 80015aa:	4962      	ldr	r1, [pc, #392]	@ (8001734 <TASK_Manager_Process+0x2c8>)
 80015ac:	2000      	movs	r0, #0
 80015ae:	f000 fa51 	bl	8001a54 <UART_Send>
                        if((tmp_task_size > 0) && (tmp_task_size <= MAX_PROGRAM_SIZE)){
 80015b2:	4b5c      	ldr	r3, [pc, #368]	@ (8001724 <TASK_Manager_Process+0x2b8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	dd1d      	ble.n	80015f6 <TASK_Manager_Process+0x18a>
 80015ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001724 <TASK_Manager_Process+0x2b8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80015c2:	dc18      	bgt.n	80015f6 <TASK_Manager_Process+0x18a>
                            UART_Send(eID_UART2,"Size received. Send the task code...\n\r",38);
 80015c4:	2226      	movs	r2, #38	@ 0x26
 80015c6:	495c      	ldr	r1, [pc, #368]	@ (8001738 <TASK_Manager_Process+0x2cc>)
 80015c8:	2000      	movs	r0, #0
 80015ca:	f000 fa43 	bl	8001a54 <UART_Send>
                            task_size = tmp_task_size;
 80015ce:	4b55      	ldr	r3, [pc, #340]	@ (8001724 <TASK_Manager_Process+0x2b8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a52      	ldr	r2, [pc, #328]	@ (800171c <TASK_Manager_Process+0x2b0>)
 80015d4:	6013      	str	r3, [r2, #0]
                            buffer_index = 0;
 80015d6:	4b52      	ldr	r3, [pc, #328]	@ (8001720 <TASK_Manager_Process+0x2b4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	801a      	strh	r2, [r3, #0]
                            tmp_task_size = 0;
 80015dc:	4b51      	ldr	r3, [pc, #324]	@ (8001724 <TASK_Manager_Process+0x2b8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
                            receiveTimer = TMR_Set(200000); //200ms timeout between bytes 
 80015e2:	4856      	ldr	r0, [pc, #344]	@ (800173c <TASK_Manager_Process+0x2d0>)
 80015e4:	f000 f95a 	bl	800189c <TMR_Set>
 80015e8:	4603      	mov	r3, r0
 80015ea:	17da      	asrs	r2, r3, #31
 80015ec:	4698      	mov	r8, r3
 80015ee:	4691      	mov	r9, r2
 80015f0:	e9c7 8902 	strd	r8, r9, [r7, #8]
                        if((tmp_task_size > 0) && (tmp_task_size <= MAX_PROGRAM_SIZE)){
 80015f4:	e05e      	b.n	80016b4 <TASK_Manager_Process+0x248>
                        }else{
                            UART_Send(eID_UART2,"Invalid size. Resetting...\n\r",29);
 80015f6:	221d      	movs	r2, #29
 80015f8:	4951      	ldr	r1, [pc, #324]	@ (8001740 <TASK_Manager_Process+0x2d4>)
 80015fa:	2000      	movs	r0, #0
 80015fc:	f000 fa2a 	bl	8001a54 <UART_Send>
                            sStateMachine = eSTATE_Ready;
 8001600:	4b45      	ldr	r3, [pc, #276]	@ (8001718 <TASK_Manager_Process+0x2ac>)
 8001602:	2201      	movs	r2, #1
 8001604:	701a      	strb	r2, [r3, #0]
                            CMD_SetToReadyState();
 8001606:	f7fe ffbb 	bl	8000580 <CMD_SetToReadyState>
                        UART_Send(eID_UART2,"\n\rTask code received. Processing...\n\r",37);
                        sStateMachine = eSTATE_FinishedReceiveTaskCode;
                    }
                }
            }
            break;
 800160a:	e080      	b.n	800170e <TASK_Manager_Process+0x2a2>
                    }else if(current_char == 0x7f){
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001610:	d113      	bne.n	800163a <TASK_Manager_Process+0x1ce>
                        if(tmp_task_size > 0){
 8001612:	4b44      	ldr	r3, [pc, #272]	@ (8001724 <TASK_Manager_Process+0x2b8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	dd79      	ble.n	800170e <TASK_Manager_Process+0x2a2>
                            tmp_task_size = tmp_task_size / 10;
 800161a:	4b42      	ldr	r3, [pc, #264]	@ (8001724 <TASK_Manager_Process+0x2b8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a49      	ldr	r2, [pc, #292]	@ (8001744 <TASK_Manager_Process+0x2d8>)
 8001620:	fb82 1203 	smull	r1, r2, r2, r3
 8001624:	1092      	asrs	r2, r2, #2
 8001626:	17db      	asrs	r3, r3, #31
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	4a3e      	ldr	r2, [pc, #248]	@ (8001724 <TASK_Manager_Process+0x2b8>)
 800162c:	6013      	str	r3, [r2, #0]
                            UART_Send(eID_UART2,"\b \b",3);
 800162e:	2203      	movs	r2, #3
 8001630:	4945      	ldr	r1, [pc, #276]	@ (8001748 <TASK_Manager_Process+0x2dc>)
 8001632:	2000      	movs	r0, #0
 8001634:	f000 fa0e 	bl	8001a54 <UART_Send>
            break;
 8001638:	e069      	b.n	800170e <TASK_Manager_Process+0x2a2>
                        UART_Send(eID_UART2,"\n\rInvalid character in size. Resetting...\n\r",45);
 800163a:	222d      	movs	r2, #45	@ 0x2d
 800163c:	4943      	ldr	r1, [pc, #268]	@ (800174c <TASK_Manager_Process+0x2e0>)
 800163e:	2000      	movs	r0, #0
 8001640:	f000 fa08 	bl	8001a54 <UART_Send>
                        sStateMachine = eSTATE_Ready;
 8001644:	4b34      	ldr	r3, [pc, #208]	@ (8001718 <TASK_Manager_Process+0x2ac>)
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]
                        CMD_SetToReadyState();
 800164a:	f7fe ff99 	bl	8000580 <CMD_SetToReadyState>
            break;
 800164e:	e05e      	b.n	800170e <TASK_Manager_Process+0x2a2>
                    if(buffer_index < task_size){
 8001650:	4b33      	ldr	r3, [pc, #204]	@ (8001720 <TASK_Manager_Process+0x2b4>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b31      	ldr	r3, [pc, #196]	@ (800171c <TASK_Manager_Process+0x2b0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	da1a      	bge.n	8001694 <TASK_Manager_Process+0x228>
                        sProgramBuffer[buffer_index] = current_char;
 800165e:	4b30      	ldr	r3, [pc, #192]	@ (8001720 <TASK_Manager_Process+0x2b4>)
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	79b9      	ldrb	r1, [r7, #6]
 8001666:	4b30      	ldr	r3, [pc, #192]	@ (8001728 <TASK_Manager_Process+0x2bc>)
 8001668:	5499      	strb	r1, [r3, r2]
                        buffer_index++;
 800166a:	4b2d      	ldr	r3, [pc, #180]	@ (8001720 <TASK_Manager_Process+0x2b4>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	b29a      	uxth	r2, r3
 8001672:	4b2b      	ldr	r3, [pc, #172]	@ (8001720 <TASK_Manager_Process+0x2b4>)
 8001674:	801a      	strh	r2, [r3, #0]
                        UART_Send(eID_UART2,&current_char,1);
 8001676:	1dbb      	adds	r3, r7, #6
 8001678:	2201      	movs	r2, #1
 800167a:	4619      	mov	r1, r3
 800167c:	2000      	movs	r0, #0
 800167e:	f000 f9e9 	bl	8001a54 <UART_Send>
                        receiveTimer = TMR_Set(200000); //reset timeout
 8001682:	482e      	ldr	r0, [pc, #184]	@ (800173c <TASK_Manager_Process+0x2d0>)
 8001684:	f000 f90a 	bl	800189c <TMR_Set>
 8001688:	4603      	mov	r3, r0
 800168a:	17da      	asrs	r2, r3, #31
 800168c:	461c      	mov	r4, r3
 800168e:	4615      	mov	r5, r2
 8001690:	e9c7 4502 	strd	r4, r5, [r7, #8]
                    if(buffer_index >= task_size){
 8001694:	4b22      	ldr	r3, [pc, #136]	@ (8001720 <TASK_Manager_Process+0x2b4>)
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	4b20      	ldr	r3, [pc, #128]	@ (800171c <TASK_Manager_Process+0x2b0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	db35      	blt.n	800170e <TASK_Manager_Process+0x2a2>
                        UART_Send(eID_UART2,"\n\rTask code received. Processing...\n\r",37);
 80016a2:	2225      	movs	r2, #37	@ 0x25
 80016a4:	492a      	ldr	r1, [pc, #168]	@ (8001750 <TASK_Manager_Process+0x2e4>)
 80016a6:	2000      	movs	r0, #0
 80016a8:	f000 f9d4 	bl	8001a54 <UART_Send>
                        sStateMachine = eSTATE_FinishedReceiveTaskCode;
 80016ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001718 <TASK_Manager_Process+0x2ac>)
 80016ae:	2203      	movs	r2, #3
 80016b0:	701a      	strb	r2, [r3, #0]
            break;
 80016b2:	e02c      	b.n	800170e <TASK_Manager_Process+0x2a2>
 80016b4:	e02b      	b.n	800170e <TASK_Manager_Process+0x2a2>
        case eSTATE_FinishedReceiveTaskCode:
            //task finished receiving
            //Here you can add code to store the received task code or process it as needed.
            sStateMachine = eSTATE_CodeVerify;
 80016b6:	4b18      	ldr	r3, [pc, #96]	@ (8001718 <TASK_Manager_Process+0x2ac>)
 80016b8:	2204      	movs	r2, #4
 80016ba:	701a      	strb	r2, [r3, #0]
            break;
 80016bc:	e028      	b.n	8001710 <TASK_Manager_Process+0x2a4>
        case eSTATE_CodeVerify:
            //verify code
            //For simplicity, we assume the code is always valid.
            UART_Send(eID_UART2,"Code verified successfully.\n\r",30);
 80016be:	221e      	movs	r2, #30
 80016c0:	4924      	ldr	r1, [pc, #144]	@ (8001754 <TASK_Manager_Process+0x2e8>)
 80016c2:	2000      	movs	r0, #0
 80016c4:	f000 f9c6 	bl	8001a54 <UART_Send>
            sStateMachine = eSTATE_ExecuteTask;
 80016c8:	4b13      	ldr	r3, [pc, #76]	@ (8001718 <TASK_Manager_Process+0x2ac>)
 80016ca:	2205      	movs	r2, #5
 80016cc:	701a      	strb	r2, [r3, #0]
            break;
 80016ce:	e01f      	b.n	8001710 <TASK_Manager_Process+0x2a4>
        case eSTATE_ExecuteTask:
            //process task 
            UART_Send(eID_UART2,"Executing task...\n\r",20);
 80016d0:	2214      	movs	r2, #20
 80016d2:	4921      	ldr	r1, [pc, #132]	@ (8001758 <TASK_Manager_Process+0x2ec>)
 80016d4:	2000      	movs	r0, #0
 80016d6:	f000 f9bd 	bl	8001a54 <UART_Send>
            //Here you would add code to actually execute the received task code.
            sCurrentProgramInfos.program_entry();
 80016da:	4b20      	ldr	r3, [pc, #128]	@ (800175c <TASK_Manager_Process+0x2f0>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	4798      	blx	r3
            UART_Send(eID_UART2,"Task execution finished.\n\r",26);
 80016e0:	221a      	movs	r2, #26
 80016e2:	491f      	ldr	r1, [pc, #124]	@ (8001760 <TASK_Manager_Process+0x2f4>)
 80016e4:	2000      	movs	r0, #0
 80016e6:	f000 f9b5 	bl	8001a54 <UART_Send>
            sStateMachine = eSTATE_Finished;
 80016ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <TASK_Manager_Process+0x2ac>)
 80016ec:	2206      	movs	r2, #6
 80016ee:	701a      	strb	r2, [r3, #0]
            break;
 80016f0:	e00e      	b.n	8001710 <TASK_Manager_Process+0x2a4>
        case eSTATE_Finished:
            //task finished
            CMD_SetToReadyState();
 80016f2:	f7fe ff45 	bl	8000580 <CMD_SetToReadyState>
            sStateMachine = eSTATE_Ready;
 80016f6:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <TASK_Manager_Process+0x2ac>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	701a      	strb	r2, [r3, #0]
            break;
 80016fc:	e008      	b.n	8001710 <TASK_Manager_Process+0x2a4>
        case eSTATE_Error:
            //error management
            break;
        default:
            sStateMachine = eSTATE_Uknown;
 80016fe:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <TASK_Manager_Process+0x2ac>)
 8001700:	22ff      	movs	r2, #255	@ 0xff
 8001702:	701a      	strb	r2, [r3, #0]
            break;
 8001704:	e004      	b.n	8001710 <TASK_Manager_Process+0x2a4>
    if(sStateMachine == eSTATE_Uknown) return;
 8001706:	bf00      	nop
 8001708:	e002      	b.n	8001710 <TASK_Manager_Process+0x2a4>
            break;
 800170a:	bf00      	nop
 800170c:	e000      	b.n	8001710 <TASK_Manager_Process+0x2a4>
            break;
 800170e:	bf00      	nop
    }
}
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001718:	2000a736 	.word	0x2000a736
 800171c:	2000567c 	.word	0x2000567c
 8001720:	2000a738 	.word	0x2000a738
 8001724:	2000a73c 	.word	0x2000a73c
 8001728:	2000570c 	.word	0x2000570c
 800172c:	080063c0 	.word	0x080063c0
 8001730:	080063dc 	.word	0x080063dc
 8001734:	0800640c 	.word	0x0800640c
 8001738:	08006410 	.word	0x08006410
 800173c:	00030d40 	.word	0x00030d40
 8001740:	08006438 	.word	0x08006438
 8001744:	66666667 	.word	0x66666667
 8001748:	08006458 	.word	0x08006458
 800174c:	0800645c 	.word	0x0800645c
 8001750:	08006488 	.word	0x08006488
 8001754:	080064b0 	.word	0x080064b0
 8001758:	080064d0 	.word	0x080064d0
 800175c:	200056f4 	.word	0x200056f4
 8001760:	080064e4 	.word	0x080064e4

08001764 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001778:	463b      	mov	r3, r7
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001780:	4b1f      	ldr	r3, [pc, #124]	@ (8001800 <MX_TIM2_Init+0x9c>)
 8001782:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001786:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = (84-1);
 8001788:	4b1d      	ldr	r3, [pc, #116]	@ (8001800 <MX_TIM2_Init+0x9c>)
 800178a:	2253      	movs	r2, #83	@ 0x53
 800178c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178e:	4b1c      	ldr	r3, [pc, #112]	@ (8001800 <MX_TIM2_Init+0x9c>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8001794:	4b1a      	ldr	r3, [pc, #104]	@ (8001800 <MX_TIM2_Init+0x9c>)
 8001796:	f04f 32ff 	mov.w	r2, #4294967295
 800179a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179c:	4b18      	ldr	r3, [pc, #96]	@ (8001800 <MX_TIM2_Init+0x9c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a2:	4b17      	ldr	r3, [pc, #92]	@ (8001800 <MX_TIM2_Init+0x9c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017a8:	4815      	ldr	r0, [pc, #84]	@ (8001800 <MX_TIM2_Init+0x9c>)
 80017aa:	f002 ffb1 	bl	8004710 <HAL_TIM_Base_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017b4:	f7ff fd82 	bl	80012bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017be:	f107 0308 	add.w	r3, r7, #8
 80017c2:	4619      	mov	r1, r3
 80017c4:	480e      	ldr	r0, [pc, #56]	@ (8001800 <MX_TIM2_Init+0x9c>)
 80017c6:	f003 f953 	bl	8004a70 <HAL_TIM_ConfigClockSource>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017d0:	f7ff fd74 	bl	80012bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d4:	2300      	movs	r3, #0
 80017d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017dc:	463b      	mov	r3, r7
 80017de:	4619      	mov	r1, r3
 80017e0:	4807      	ldr	r0, [pc, #28]	@ (8001800 <MX_TIM2_Init+0x9c>)
 80017e2:	f003 fb7f 	bl	8004ee4 <HAL_TIMEx_MasterConfigSynchronization>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017ec:	f7ff fd66 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80017f0:	4803      	ldr	r0, [pc, #12]	@ (8001800 <MX_TIM2_Init+0x9c>)
 80017f2:	f002 ffdd 	bl	80047b0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000a744 	.word	0x2000a744

08001804 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001814:	d115      	bne.n	8001842 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <HAL_TIM_Base_MspInit+0x48>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	4a0b      	ldr	r2, [pc, #44]	@ (800184c <HAL_TIM_Base_MspInit+0x48>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6413      	str	r3, [r2, #64]	@ 0x40
 8001826:	4b09      	ldr	r3, [pc, #36]	@ (800184c <HAL_TIM_Base_MspInit+0x48>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	201c      	movs	r0, #28
 8001838:	f000 fb27 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800183c:	201c      	movs	r0, #28
 800183e:	f000 fb40 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800

08001850 <TMR_Now>:
  }
}

/* USER CODE BEGIN 1 */

uint64_t TMR_Now(void){
 8001850:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8001854:	af00      	add	r7, sp, #0
	return ((uint64_t)((uint64_t) sTimerCounterExtention<<32u) | ((uint64_t)htim2.Instance->CNT));
 8001856:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <TMR_Now+0x44>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2200      	movs	r2, #0
 800185c:	4698      	mov	r8, r3
 800185e:	4691      	mov	r9, r2
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	4643      	mov	r3, r8
 800186a:	2200      	movs	r2, #0
 800186c:	4e0a      	ldr	r6, [pc, #40]	@ (8001898 <TMR_Now+0x48>)
 800186e:	6836      	ldr	r6, [r6, #0]
 8001870:	6a76      	ldr	r6, [r6, #36]	@ 0x24
 8001872:	f04f 0c00 	mov.w	ip, #0
 8001876:	4630      	mov	r0, r6
 8001878:	4661      	mov	r1, ip
 800187a:	ea42 0400 	orr.w	r4, r2, r0
 800187e:	ea43 0501 	orr.w	r5, r3, r1
 8001882:	4622      	mov	r2, r4
 8001884:	462b      	mov	r3, r5
}
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	2000a740 	.word	0x2000a740
 8001898:	2000a744 	.word	0x2000a744

0800189c <TMR_Set>:
uint64_t TMR_Set(uint64_t timer){
 800189c:	b5b0      	push	{r4, r5, r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	e9c7 0100 	strd	r0, r1, [r7]
	return timer + TMR_Now();
 80018a6:	f7ff ffd3 	bl	8001850 <TMR_Now>
 80018aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018ae:	1884      	adds	r4, r0, r2
 80018b0:	eb41 0503 	adc.w	r5, r1, r3
 80018b4:	4622      	mov	r2, r4
 80018b6:	462b      	mov	r3, r5
}
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bdb0      	pop	{r4, r5, r7, pc}

080018c2 <TMR_Expired>:
bool TMR_Expired(uint64_t timer){
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	e9c7 0100 	strd	r0, r1, [r7]
	return TMR_Now() >= timer;
 80018cc:	f7ff ffc0 	bl	8001850 <TMR_Now>
 80018d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018d4:	4290      	cmp	r0, r2
 80018d6:	eb71 0303 	sbcs.w	r3, r1, r3
 80018da:	bf2c      	ite	cs
 80018dc:	2301      	movcs	r3, #1
 80018de:	2300      	movcc	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <TMR_Elapsed>:
uint64_t TMR_Elapsed(uint64_t timer){
 80018ea:	b5b0      	push	{r4, r5, r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	e9c7 0100 	strd	r0, r1, [r7]
	if(TMR_Expired(timer) == false) return 0;
 80018f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018f8:	f7ff ffe3 	bl	80018c2 <TMR_Expired>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f083 0301 	eor.w	r3, r3, #1
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	d004      	beq.n	8001912 <TMR_Elapsed+0x28>
 8001908:	f04f 0400 	mov.w	r4, #0
 800190c:	f04f 0500 	mov.w	r5, #0
 8001910:	e006      	b.n	8001920 <TMR_Elapsed+0x36>
	return TMR_Now() - timer;
 8001912:	f7ff ff9d 	bl	8001850 <TMR_Now>
 8001916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800191a:	1a84      	subs	r4, r0, r2
 800191c:	eb61 0503 	sbc.w	r5, r1, r3
}
 8001920:	4622      	mov	r2, r4
 8001922:	462b      	mov	r3, r5
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001930 <TIM2_IRQHandler>:
/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	sTimerCounterExtention++;
 8001934:	4b04      	ldr	r3, [pc, #16]	@ (8001948 <TIM2_IRQHandler+0x18>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	3301      	adds	r3, #1
 800193a:	4a03      	ldr	r2, [pc, #12]	@ (8001948 <TIM2_IRQHandler+0x18>)
 800193c:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800193e:	4803      	ldr	r0, [pc, #12]	@ (800194c <TIM2_IRQHandler+0x1c>)
 8001940:	f002 ffa6 	bl	8004890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	2000a740 	.word	0x2000a740
 800194c:	2000a744 	.word	0x2000a744

08001950 <UART_Init>:

static tUART_Infos sUARTTable[] = {
		{.id = eID_UART2,.name = "UART2",.instance=USART2,.baud_rate = 115200,.oversimpling = UART_OVERSAMPLING_16}
};

bool UART_Init(void){
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0

	for(int i = 0;i < eID_UART_MAX ;i++){
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	e070      	b.n	8001a3e <UART_Init+0xee>

		  sUARTTable[i].handle.Instance = sUARTTable[i].instance;
 800195c:	4a3c      	ldr	r2, [pc, #240]	@ (8001a50 <UART_Init+0x100>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	216c      	movs	r1, #108	@ 0x6c
 8001962:	fb01 f303 	mul.w	r3, r1, r3
 8001966:	4413      	add	r3, r2
 8001968:	3318      	adds	r3, #24
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	4a38      	ldr	r2, [pc, #224]	@ (8001a50 <UART_Init+0x100>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	216c      	movs	r1, #108	@ 0x6c
 8001974:	fb01 f303 	mul.w	r3, r1, r3
 8001978:	4413      	add	r3, r2
 800197a:	3324      	adds	r3, #36	@ 0x24
 800197c:	6018      	str	r0, [r3, #0]
		  sUARTTable[i].handle.Init.BaudRate =  sUARTTable[i].baud_rate;
 800197e:	4a34      	ldr	r2, [pc, #208]	@ (8001a50 <UART_Init+0x100>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	216c      	movs	r1, #108	@ 0x6c
 8001984:	fb01 f303 	mul.w	r3, r1, r3
 8001988:	4413      	add	r3, r2
 800198a:	331c      	adds	r3, #28
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	4930      	ldr	r1, [pc, #192]	@ (8001a50 <UART_Init+0x100>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	206c      	movs	r0, #108	@ 0x6c
 8001994:	fb00 f303 	mul.w	r3, r0, r3
 8001998:	440b      	add	r3, r1
 800199a:	3328      	adds	r3, #40	@ 0x28
 800199c:	601a      	str	r2, [r3, #0]
		  sUARTTable[i].handle.Init.WordLength = UART_WORDLENGTH_8B;
 800199e:	4a2c      	ldr	r2, [pc, #176]	@ (8001a50 <UART_Init+0x100>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	216c      	movs	r1, #108	@ 0x6c
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	332c      	adds	r3, #44	@ 0x2c
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
		  sUARTTable[i].handle.Init.StopBits = UART_STOPBITS_1;
 80019b0:	4a27      	ldr	r2, [pc, #156]	@ (8001a50 <UART_Init+0x100>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	216c      	movs	r1, #108	@ 0x6c
 80019b6:	fb01 f303 	mul.w	r3, r1, r3
 80019ba:	4413      	add	r3, r2
 80019bc:	3330      	adds	r3, #48	@ 0x30
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
		  sUARTTable[i].handle.Init.Parity = UART_PARITY_NONE;
 80019c2:	4a23      	ldr	r2, [pc, #140]	@ (8001a50 <UART_Init+0x100>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	216c      	movs	r1, #108	@ 0x6c
 80019c8:	fb01 f303 	mul.w	r3, r1, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	3334      	adds	r3, #52	@ 0x34
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
		  sUARTTable[i].handle.Init.Mode = UART_MODE_TX_RX;
 80019d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001a50 <UART_Init+0x100>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	216c      	movs	r1, #108	@ 0x6c
 80019da:	fb01 f303 	mul.w	r3, r1, r3
 80019de:	4413      	add	r3, r2
 80019e0:	3338      	adds	r3, #56	@ 0x38
 80019e2:	220c      	movs	r2, #12
 80019e4:	601a      	str	r2, [r3, #0]
		  sUARTTable[i].handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001a50 <UART_Init+0x100>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	216c      	movs	r1, #108	@ 0x6c
 80019ec:	fb01 f303 	mul.w	r3, r1, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	333c      	adds	r3, #60	@ 0x3c
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
		  sUARTTable[i].handle.Init.OverSampling =  sUARTTable[i].oversimpling;
 80019f8:	4a15      	ldr	r2, [pc, #84]	@ (8001a50 <UART_Init+0x100>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	216c      	movs	r1, #108	@ 0x6c
 80019fe:	fb01 f303 	mul.w	r3, r1, r3
 8001a02:	4413      	add	r3, r2
 8001a04:	3320      	adds	r3, #32
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4911      	ldr	r1, [pc, #68]	@ (8001a50 <UART_Init+0x100>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	206c      	movs	r0, #108	@ 0x6c
 8001a0e:	fb00 f303 	mul.w	r3, r0, r3
 8001a12:	440b      	add	r3, r1
 8001a14:	3340      	adds	r3, #64	@ 0x40
 8001a16:	601a      	str	r2, [r3, #0]
		  if (HAL_UART_Init(&sUARTTable[i].handle) != HAL_OK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	226c      	movs	r2, #108	@ 0x6c
 8001a1c:	fb02 f303 	mul.w	r3, r2, r3
 8001a20:	3320      	adds	r3, #32
 8001a22:	4a0b      	ldr	r2, [pc, #44]	@ (8001a50 <UART_Init+0x100>)
 8001a24:	4413      	add	r3, r2
 8001a26:	3304      	adds	r3, #4
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f003 faeb 	bl	8005004 <HAL_UART_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <UART_Init+0xe8>
		  {
		    return false;
 8001a34:	2300      	movs	r3, #0
 8001a36:	e006      	b.n	8001a46 <UART_Init+0xf6>
	for(int i = 0;i < eID_UART_MAX ;i++){
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	dd8b      	ble.n	800195c <UART_Init+0xc>
		  }
	}
	return true;
 8001a44:	2301      	movs	r3, #1
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20005680 	.word	0x20005680

08001a54 <UART_Send>:

bool UART_Send(eUART_ID id,char * data,uint32_t len){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
 8001a60:	73fb      	strb	r3, [r7, #15]
	if(id > eID_UART_MAX) return false;
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d901      	bls.n	8001a6c <UART_Send+0x18>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e013      	b.n	8001a94 <UART_Send+0x40>
	return (HAL_UART_Transmit(&sUARTTable[id].handle,data,len,UART_TIMEOUT) == HAL_OK);
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	226c      	movs	r2, #108	@ 0x6c
 8001a70:	fb02 f303 	mul.w	r3, r2, r3
 8001a74:	3320      	adds	r3, #32
 8001a76:	4a09      	ldr	r2, [pc, #36]	@ (8001a9c <UART_Send+0x48>)
 8001a78:	4413      	add	r3, r2
 8001a7a:	1d18      	adds	r0, r3, #4
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	2303      	movs	r3, #3
 8001a82:	68b9      	ldr	r1, [r7, #8]
 8001a84:	f003 fb0e 	bl	80050a4 <HAL_UART_Transmit>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	bf0c      	ite	eq
 8001a8e:	2301      	moveq	r3, #1
 8001a90:	2300      	movne	r3, #0
 8001a92:	b2db      	uxtb	r3, r3
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20005680 	.word	0x20005680

08001aa0 <UART_Receive_timeout>:
bool UART_Receive(eUART_ID id,char * data,uint32_t len){
	if(id > eID_UART_MAX) return false;
	return ( HAL_UART_Receive(&sUARTTable[id].handle, data, len, UART_TIMEOUT) == HAL_OK);
}

bool UART_Receive_timeout(eUART_ID id,char * data,uint32_t len,uint32_t timeout){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	4603      	mov	r3, r0
 8001aae:	73fb      	strb	r3, [r7, #15]
	if(id > eID_UART_MAX) return false;
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d901      	bls.n	8001aba <UART_Receive_timeout+0x1a>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	e013      	b.n	8001ae2 <UART_Receive_timeout+0x42>
	return ( HAL_UART_Receive(&sUARTTable[id].handle, data, len, timeout) == HAL_OK);
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	226c      	movs	r2, #108	@ 0x6c
 8001abe:	fb02 f303 	mul.w	r3, r2, r3
 8001ac2:	3320      	adds	r3, #32
 8001ac4:	4a09      	ldr	r2, [pc, #36]	@ (8001aec <UART_Receive_timeout+0x4c>)
 8001ac6:	4413      	add	r3, r2
 8001ac8:	1d18      	adds	r0, r3, #4
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	f003 fb72 	bl	80051ba <HAL_UART_Receive>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20005680 	.word	0x20005680

08001af0 <MX_USART2_UART_Init>:


/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
	if(UART_Init() == false){
 8001af4:	f7ff ff2c 	bl	8001950 <UART_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f083 0301 	eor.w	r3, r3, #1
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_USART2_UART_Init+0x18>
		Error_Handler();
 8001b04:	f7ff fbda 	bl	80012bc <Error_Handler>
  /* USER CODE END USART2_Init 1 */
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	@ 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a19      	ldr	r2, [pc, #100]	@ (8001b90 <HAL_UART_MspInit+0x84>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d12b      	bne.n	8001b86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	4b18      	ldr	r3, [pc, #96]	@ (8001b94 <HAL_UART_MspInit+0x88>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b36:	4a17      	ldr	r2, [pc, #92]	@ (8001b94 <HAL_UART_MspInit+0x88>)
 8001b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b3e:	4b15      	ldr	r3, [pc, #84]	@ (8001b94 <HAL_UART_MspInit+0x88>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <HAL_UART_MspInit+0x88>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	4a10      	ldr	r2, [pc, #64]	@ (8001b94 <HAL_UART_MspInit+0x88>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b94 <HAL_UART_MspInit+0x88>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b66:	230c      	movs	r3, #12
 8001b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b72:	2303      	movs	r3, #3
 8001b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b76:	2307      	movs	r3, #7
 8001b78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4805      	ldr	r0, [pc, #20]	@ (8001b98 <HAL_UART_MspInit+0x8c>)
 8001b82:	f000 f9b9 	bl	8001ef8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b86:	bf00      	nop
 8001b88:	3728      	adds	r7, #40	@ 0x28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40004400 	.word	0x40004400
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40020000 	.word	0x40020000

08001b9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bd4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ba0:	f7ff fbf4 	bl	800138c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ba4:	480c      	ldr	r0, [pc, #48]	@ (8001bd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ba6:	490d      	ldr	r1, [pc, #52]	@ (8001bdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8001be0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bac:	e002      	b.n	8001bb4 <LoopCopyDataInit>

08001bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb2:	3304      	adds	r3, #4

08001bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb8:	d3f9      	bcc.n	8001bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bba:	4a0a      	ldr	r2, [pc, #40]	@ (8001be4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bbc:	4c0a      	ldr	r4, [pc, #40]	@ (8001be8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc0:	e001      	b.n	8001bc6 <LoopFillZerobss>

08001bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc4:	3204      	adds	r2, #4

08001bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc8:	d3fb      	bcc.n	8001bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bca:	f004 fb31 	bl	8006230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bce:	f7ff fa91 	bl	80010f4 <main>
  bx  lr    
 8001bd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bd8:	20005400 	.word	0x20005400
  ldr r1, =_edata
 8001bdc:	200056f4 	.word	0x200056f4
  ldr r2, =_sidata
 8001be0:	08006528 	.word	0x08006528
  ldr r2, =_sbss
 8001be4:	2000a70c 	.word	0x2000a70c
  ldr r4, =_ebss
 8001be8:	2000ab70 	.word	0x2000ab70

08001bec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bec:	e7fe      	b.n	8001bec <ADC_IRQHandler>
	...

08001bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <HAL_Init+0x40>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c30 <HAL_Init+0x40>)
 8001bfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c00:	4b0b      	ldr	r3, [pc, #44]	@ (8001c30 <HAL_Init+0x40>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0a      	ldr	r2, [pc, #40]	@ (8001c30 <HAL_Init+0x40>)
 8001c06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c0c:	4b08      	ldr	r3, [pc, #32]	@ (8001c30 <HAL_Init+0x40>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a07      	ldr	r2, [pc, #28]	@ (8001c30 <HAL_Init+0x40>)
 8001c12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f000 f92b 	bl	8001e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f000 f808 	bl	8001c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c24:	f7ff fb50 	bl	80012c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023c00 	.word	0x40023c00

08001c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c3c:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <HAL_InitTick+0x54>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b12      	ldr	r3, [pc, #72]	@ (8001c8c <HAL_InitTick+0x58>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	4619      	mov	r1, r3
 8001c46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 f943 	bl	8001ede <HAL_SYSTICK_Config>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00e      	b.n	8001c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b0f      	cmp	r3, #15
 8001c66:	d80a      	bhi.n	8001c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	f000 f90b 	bl	8001e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c74:	4a06      	ldr	r2, [pc, #24]	@ (8001c90 <HAL_InitTick+0x5c>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e000      	b.n	8001c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20005678 	.word	0x20005678
 8001c8c:	200056f0 	.word	0x200056f0
 8001c90:	200056ec 	.word	0x200056ec

08001c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c98:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <HAL_IncTick+0x20>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <HAL_IncTick+0x24>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4a04      	ldr	r2, [pc, #16]	@ (8001cb8 <HAL_IncTick+0x24>)
 8001ca6:	6013      	str	r3, [r2, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	200056f0 	.word	0x200056f0
 8001cb8:	2000a78c 	.word	0x2000a78c

08001cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	@ (8001cd0 <HAL_GetTick+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	2000a78c 	.word	0x2000a78c

08001cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d06:	4a04      	ldr	r2, [pc, #16]	@ (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	60d3      	str	r3, [r2, #12]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d20:	4b04      	ldr	r3, [pc, #16]	@ (8001d34 <__NVIC_GetPriorityGrouping+0x18>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	0a1b      	lsrs	r3, r3, #8
 8001d26:	f003 0307 	and.w	r3, r3, #7
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	db0b      	blt.n	8001d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	f003 021f 	and.w	r2, r3, #31
 8001d50:	4907      	ldr	r1, [pc, #28]	@ (8001d70 <__NVIC_EnableIRQ+0x38>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	095b      	lsrs	r3, r3, #5
 8001d58:	2001      	movs	r0, #1
 8001d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000e100 	.word	0xe000e100

08001d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	db0a      	blt.n	8001d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	490c      	ldr	r1, [pc, #48]	@ (8001dc0 <__NVIC_SetPriority+0x4c>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	0112      	lsls	r2, r2, #4
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	440b      	add	r3, r1
 8001d98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d9c:	e00a      	b.n	8001db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4908      	ldr	r1, [pc, #32]	@ (8001dc4 <__NVIC_SetPriority+0x50>)
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	3b04      	subs	r3, #4
 8001dac:	0112      	lsls	r2, r2, #4
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	440b      	add	r3, r1
 8001db2:	761a      	strb	r2, [r3, #24]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000e100 	.word	0xe000e100
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	@ 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f1c3 0307 	rsb	r3, r3, #7
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	bf28      	it	cs
 8001de6:	2304      	movcs	r3, #4
 8001de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3304      	adds	r3, #4
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d902      	bls.n	8001df8 <NVIC_EncodePriority+0x30>
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3b03      	subs	r3, #3
 8001df6:	e000      	b.n	8001dfa <NVIC_EncodePriority+0x32>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43da      	mvns	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e10:	f04f 31ff 	mov.w	r1, #4294967295
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1a:	43d9      	mvns	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	4313      	orrs	r3, r2
         );
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3724      	adds	r7, #36	@ 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e40:	d301      	bcc.n	8001e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e42:	2301      	movs	r3, #1
 8001e44:	e00f      	b.n	8001e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e46:	4a0a      	ldr	r2, [pc, #40]	@ (8001e70 <SysTick_Config+0x40>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4e:	210f      	movs	r1, #15
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295
 8001e54:	f7ff ff8e 	bl	8001d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e58:	4b05      	ldr	r3, [pc, #20]	@ (8001e70 <SysTick_Config+0x40>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5e:	4b04      	ldr	r3, [pc, #16]	@ (8001e70 <SysTick_Config+0x40>)
 8001e60:	2207      	movs	r2, #7
 8001e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	e000e010 	.word	0xe000e010

08001e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ff29 	bl	8001cd4 <__NVIC_SetPriorityGrouping>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e9c:	f7ff ff3e 	bl	8001d1c <__NVIC_GetPriorityGrouping>
 8001ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	6978      	ldr	r0, [r7, #20]
 8001ea8:	f7ff ff8e 	bl	8001dc8 <NVIC_EncodePriority>
 8001eac:	4602      	mov	r2, r0
 8001eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff5d 	bl	8001d74 <__NVIC_SetPriority>
}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff31 	bl	8001d38 <__NVIC_EnableIRQ>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ffa2 	bl	8001e30 <SysTick_Config>
 8001eec:	4603      	mov	r3, r0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b089      	sub	sp, #36	@ 0x24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
 8001f12:	e16b      	b.n	80021ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f14:	2201      	movs	r2, #1
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	f040 815a 	bne.w	80021e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d005      	beq.n	8001f4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d130      	bne.n	8001fac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	2203      	movs	r2, #3
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f80:	2201      	movs	r2, #1
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 0201 	and.w	r2, r3, #1
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d017      	beq.n	8001fe8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d123      	bne.n	800203c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	08da      	lsrs	r2, r3, #3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3208      	adds	r2, #8
 8001ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	220f      	movs	r2, #15
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	08da      	lsrs	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3208      	adds	r2, #8
 8002036:	69b9      	ldr	r1, [r7, #24]
 8002038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	2203      	movs	r2, #3
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0203 	and.w	r2, r3, #3
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80b4 	beq.w	80021e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	4b60      	ldr	r3, [pc, #384]	@ (8002204 <HAL_GPIO_Init+0x30c>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002086:	4a5f      	ldr	r2, [pc, #380]	@ (8002204 <HAL_GPIO_Init+0x30c>)
 8002088:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800208c:	6453      	str	r3, [r2, #68]	@ 0x44
 800208e:	4b5d      	ldr	r3, [pc, #372]	@ (8002204 <HAL_GPIO_Init+0x30c>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800209a:	4a5b      	ldr	r2, [pc, #364]	@ (8002208 <HAL_GPIO_Init+0x310>)
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	089b      	lsrs	r3, r3, #2
 80020a0:	3302      	adds	r3, #2
 80020a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	220f      	movs	r2, #15
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a52      	ldr	r2, [pc, #328]	@ (800220c <HAL_GPIO_Init+0x314>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d02b      	beq.n	800211e <HAL_GPIO_Init+0x226>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a51      	ldr	r2, [pc, #324]	@ (8002210 <HAL_GPIO_Init+0x318>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d025      	beq.n	800211a <HAL_GPIO_Init+0x222>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a50      	ldr	r2, [pc, #320]	@ (8002214 <HAL_GPIO_Init+0x31c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d01f      	beq.n	8002116 <HAL_GPIO_Init+0x21e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002218 <HAL_GPIO_Init+0x320>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d019      	beq.n	8002112 <HAL_GPIO_Init+0x21a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4e      	ldr	r2, [pc, #312]	@ (800221c <HAL_GPIO_Init+0x324>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d013      	beq.n	800210e <HAL_GPIO_Init+0x216>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002220 <HAL_GPIO_Init+0x328>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d00d      	beq.n	800210a <HAL_GPIO_Init+0x212>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a4c      	ldr	r2, [pc, #304]	@ (8002224 <HAL_GPIO_Init+0x32c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d007      	beq.n	8002106 <HAL_GPIO_Init+0x20e>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002228 <HAL_GPIO_Init+0x330>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d101      	bne.n	8002102 <HAL_GPIO_Init+0x20a>
 80020fe:	2307      	movs	r3, #7
 8002100:	e00e      	b.n	8002120 <HAL_GPIO_Init+0x228>
 8002102:	2308      	movs	r3, #8
 8002104:	e00c      	b.n	8002120 <HAL_GPIO_Init+0x228>
 8002106:	2306      	movs	r3, #6
 8002108:	e00a      	b.n	8002120 <HAL_GPIO_Init+0x228>
 800210a:	2305      	movs	r3, #5
 800210c:	e008      	b.n	8002120 <HAL_GPIO_Init+0x228>
 800210e:	2304      	movs	r3, #4
 8002110:	e006      	b.n	8002120 <HAL_GPIO_Init+0x228>
 8002112:	2303      	movs	r3, #3
 8002114:	e004      	b.n	8002120 <HAL_GPIO_Init+0x228>
 8002116:	2302      	movs	r3, #2
 8002118:	e002      	b.n	8002120 <HAL_GPIO_Init+0x228>
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <HAL_GPIO_Init+0x228>
 800211e:	2300      	movs	r3, #0
 8002120:	69fa      	ldr	r2, [r7, #28]
 8002122:	f002 0203 	and.w	r2, r2, #3
 8002126:	0092      	lsls	r2, r2, #2
 8002128:	4093      	lsls	r3, r2
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002130:	4935      	ldr	r1, [pc, #212]	@ (8002208 <HAL_GPIO_Init+0x310>)
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	089b      	lsrs	r3, r3, #2
 8002136:	3302      	adds	r3, #2
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800213e:	4b3b      	ldr	r3, [pc, #236]	@ (800222c <HAL_GPIO_Init+0x334>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	43db      	mvns	r3, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4013      	ands	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002162:	4a32      	ldr	r2, [pc, #200]	@ (800222c <HAL_GPIO_Init+0x334>)
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002168:	4b30      	ldr	r3, [pc, #192]	@ (800222c <HAL_GPIO_Init+0x334>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800218c:	4a27      	ldr	r2, [pc, #156]	@ (800222c <HAL_GPIO_Init+0x334>)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002192:	4b26      	ldr	r3, [pc, #152]	@ (800222c <HAL_GPIO_Init+0x334>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021b6:	4a1d      	ldr	r2, [pc, #116]	@ (800222c <HAL_GPIO_Init+0x334>)
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021bc:	4b1b      	ldr	r3, [pc, #108]	@ (800222c <HAL_GPIO_Init+0x334>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021e0:	4a12      	ldr	r2, [pc, #72]	@ (800222c <HAL_GPIO_Init+0x334>)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3301      	adds	r3, #1
 80021ea:	61fb      	str	r3, [r7, #28]
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	2b0f      	cmp	r3, #15
 80021f0:	f67f ae90 	bls.w	8001f14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021f4:	bf00      	nop
 80021f6:	bf00      	nop
 80021f8:	3724      	adds	r7, #36	@ 0x24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800
 8002208:	40013800 	.word	0x40013800
 800220c:	40020000 	.word	0x40020000
 8002210:	40020400 	.word	0x40020400
 8002214:	40020800 	.word	0x40020800
 8002218:	40020c00 	.word	0x40020c00
 800221c:	40021000 	.word	0x40021000
 8002220:	40021400 	.word	0x40021400
 8002224:	40021800 	.word	0x40021800
 8002228:	40021c00 	.word	0x40021c00
 800222c:	40013c00 	.word	0x40013c00

08002230 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	887b      	ldrh	r3, [r7, #2]
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
 800224c:	e001      	b.n	8002252 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002252:	7bfb      	ldrb	r3, [r7, #15]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
 800226c:	4613      	mov	r3, r2
 800226e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002270:	787b      	ldrb	r3, [r7, #1]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800227c:	e003      	b.n	8002286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800227e:	887b      	ldrh	r3, [r7, #2]
 8002280:	041a      	lsls	r2, r3, #16
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	619a      	str	r2, [r3, #24]
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b086      	sub	sp, #24
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f003 fc5b 	bl	8005b64 <USB_GetMode>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	f040 80fb 	bne.w	80024ac <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f003 fc1e 	bl	8005afc <USB_ReadInterrupts>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 80f1 	beq.w	80024aa <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f003 fc15 	bl	8005afc <USB_ReadInterrupts>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80022dc:	d104      	bne.n	80022e8 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80022e6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f003 fc05 	bl	8005afc <USB_ReadInterrupts>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80022fc:	d104      	bne.n	8002308 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002306:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f003 fbf5 	bl	8005afc <USB_ReadInterrupts>
 8002312:	4603      	mov	r3, r0
 8002314:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002318:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800231c:	d104      	bne.n	8002328 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002326:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f003 fbe5 	bl	8005afc <USB_ReadInterrupts>
 8002332:	4603      	mov	r3, r0
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b02      	cmp	r3, #2
 800233a:	d103      	bne.n	8002344 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2202      	movs	r2, #2
 8002342:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f003 fbd7 	bl	8005afc <USB_ReadInterrupts>
 800234e:	4603      	mov	r3, r0
 8002350:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002354:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002358:	d120      	bne.n	800239c <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002362:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b00      	cmp	r3, #0
 8002372:	d113      	bne.n	800239c <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002374:	2110      	movs	r1, #16
 8002376:	6938      	ldr	r0, [r7, #16]
 8002378:	f003 fb08 	bl	800598c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800237c:	6938      	ldr	r0, [r7, #16]
 800237e:	f003 fb37 	bl	80059f0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	7a5b      	ldrb	r3, [r3, #9]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d105      	bne.n	8002396 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2101      	movs	r1, #1
 8002390:	4618      	mov	r0, r3
 8002392:	f003 fbf5 	bl	8005b80 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f003 feb1 	bl	80060fe <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f003 fbab 	bl	8005afc <USB_ReadInterrupts>
 80023a6:	4603      	mov	r3, r0
 80023a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023b0:	d102      	bne.n	80023b8 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f001 fca1 	bl	8003cfa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f003 fb9d 	bl	8005afc <USB_ReadInterrupts>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d106      	bne.n	80023da <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f003 fe7a 	bl	80060c6 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2208      	movs	r2, #8
 80023d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f003 fb8c 	bl	8005afc <USB_ReadInterrupts>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023ee:	d139      	bne.n	8002464 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f003 fc00 	bl	8005bfa <USB_HC_ReadInterrupt>
 80023fa:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	e025      	b.n	800244e <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	fa22 f303 	lsr.w	r3, r2, r3
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d018      	beq.n	8002448 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	4413      	add	r3, r2
 800241e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002428:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800242c:	d106      	bne.n	800243c <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	4619      	mov	r1, r3
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f859 	bl	80024ec <HCD_HC_IN_IRQHandler>
 800243a:	e005      	b.n	8002448 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	4619      	mov	r1, r3
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 febb 	bl	80031be <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	3301      	adds	r3, #1
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	795b      	ldrb	r3, [r3, #5]
 8002452:	461a      	mov	r2, r3
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	4293      	cmp	r3, r2
 8002458:	d3d3      	bcc.n	8002402 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002462:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f003 fb47 	bl	8005afc <USB_ReadInterrupts>
 800246e:	4603      	mov	r3, r0
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	2b10      	cmp	r3, #16
 8002476:	d101      	bne.n	800247c <HAL_HCD_IRQHandler+0x1ea>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <HAL_HCD_IRQHandler+0x1ec>
 800247c:	2300      	movs	r3, #0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d014      	beq.n	80024ac <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699a      	ldr	r2, [r3, #24]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0210 	bic.w	r2, r2, #16
 8002490:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f001 fb52 	bl	8003b3c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699a      	ldr	r2, [r3, #24]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0210 	orr.w	r2, r2, #16
 80024a6:	619a      	str	r2, [r3, #24]
 80024a8:	e000      	b.n	80024ac <HAL_HCD_IRQHandler+0x21a>
      return;
 80024aa:	bf00      	nop
    }
  }
}
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <HAL_HCD_Stop+0x16>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e00d      	b.n	80024e4 <HAL_HCD_Stop+0x32>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f003 fcc1 	bl	8005e5c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	78fa      	ldrb	r2, [r7, #3]
 8002508:	4611      	mov	r1, r2
 800250a:	4618      	mov	r0, r3
 800250c:	f003 fb09 	bl	8005b22 <USB_ReadChInterrupts>
 8002510:	4603      	mov	r3, r0
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b04      	cmp	r3, #4
 8002518:	d11a      	bne.n	8002550 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800251a:	78fb      	ldrb	r3, [r7, #3]
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4413      	add	r3, r2
 8002522:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002526:	461a      	mov	r2, r3
 8002528:	2304      	movs	r3, #4
 800252a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800252c:	78fa      	ldrb	r2, [r7, #3]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	334d      	adds	r3, #77	@ 0x4d
 800253c:	2207      	movs	r2, #7
 800253e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f003 fb67 	bl	8005c1c <USB_HC_Halt>
 800254e:	e09e      	b.n	800268e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f003 fae2 	bl	8005b22 <USB_ReadChInterrupts>
 800255e:	4603      	mov	r3, r0
 8002560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002564:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002568:	d11b      	bne.n	80025a2 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800256a:	78fb      	ldrb	r3, [r7, #3]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002576:	461a      	mov	r2, r3
 8002578:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800257c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	334d      	adds	r3, #77	@ 0x4d
 800258e:	2208      	movs	r2, #8
 8002590:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	78fa      	ldrb	r2, [r7, #3]
 8002598:	4611      	mov	r1, r2
 800259a:	4618      	mov	r0, r3
 800259c:	f003 fb3e 	bl	8005c1c <USB_HC_Halt>
 80025a0:	e075      	b.n	800268e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	78fa      	ldrb	r2, [r7, #3]
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 fab9 	bl	8005b22 <USB_ReadChInterrupts>
 80025b0:	4603      	mov	r3, r0
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d11a      	bne.n	80025f0 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025c6:	461a      	mov	r2, r3
 80025c8:	2308      	movs	r3, #8
 80025ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	334d      	adds	r3, #77	@ 0x4d
 80025dc:	2206      	movs	r2, #6
 80025de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f003 fb17 	bl	8005c1c <USB_HC_Halt>
 80025ee:	e04e      	b.n	800268e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	4611      	mov	r1, r2
 80025f8:	4618      	mov	r0, r3
 80025fa:	f003 fa92 	bl	8005b22 <USB_ReadChInterrupts>
 80025fe:	4603      	mov	r3, r0
 8002600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002604:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002608:	d11b      	bne.n	8002642 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800260a:	78fb      	ldrb	r3, [r7, #3]
 800260c:	015a      	lsls	r2, r3, #5
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4413      	add	r3, r2
 8002612:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002616:	461a      	mov	r2, r3
 8002618:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800261c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800261e:	78fa      	ldrb	r2, [r7, #3]
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	1a9b      	subs	r3, r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	334d      	adds	r3, #77	@ 0x4d
 800262e:	2209      	movs	r2, #9
 8002630:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	78fa      	ldrb	r2, [r7, #3]
 8002638:	4611      	mov	r1, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f003 faee 	bl	8005c1c <USB_HC_Halt>
 8002640:	e025      	b.n	800268e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	78fa      	ldrb	r2, [r7, #3]
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f003 fa69 	bl	8005b22 <USB_ReadChInterrupts>
 8002650:	4603      	mov	r3, r0
 8002652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002656:	2b80      	cmp	r3, #128	@ 0x80
 8002658:	d119      	bne.n	800268e <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	015a      	lsls	r2, r3, #5
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4413      	add	r3, r2
 8002662:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002666:	461a      	mov	r2, r3
 8002668:	2380      	movs	r3, #128	@ 0x80
 800266a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	1a9b      	subs	r3, r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	334d      	adds	r3, #77	@ 0x4d
 800267c:	2207      	movs	r2, #7
 800267e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f003 fac7 	bl	8005c1c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	78fa      	ldrb	r2, [r7, #3]
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f003 fa43 	bl	8005b22 <USB_ReadChInterrupts>
 800269c:	4603      	mov	r3, r0
 800269e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026a6:	d112      	bne.n	80026ce <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	4611      	mov	r1, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f003 fab3 	bl	8005c1c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80026b6:	78fb      	ldrb	r3, [r7, #3]
 80026b8:	015a      	lsls	r2, r3, #5
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c2:	461a      	mov	r2, r3
 80026c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026c8:	6093      	str	r3, [r2, #8]
 80026ca:	f000 bd75 	b.w	80031b8 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	78fa      	ldrb	r2, [r7, #3]
 80026d4:	4611      	mov	r1, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f003 fa23 	bl	8005b22 <USB_ReadChInterrupts>
 80026dc:	4603      	mov	r3, r0
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	f040 8128 	bne.w	8002938 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026f4:	461a      	mov	r2, r3
 80026f6:	2320      	movs	r3, #32
 80026f8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	1a9b      	subs	r3, r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	331b      	adds	r3, #27
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d119      	bne.n	8002744 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	331b      	adds	r3, #27
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	78fa      	ldrb	r2, [r7, #3]
 8002734:	0151      	lsls	r1, r2, #5
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	440a      	add	r2, r1
 800273a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800273e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002742:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	799b      	ldrb	r3, [r3, #6]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01b      	beq.n	8002784 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800274c:	78fa      	ldrb	r2, [r7, #3]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	3330      	adds	r3, #48	@ 0x30
 800275c:	6819      	ldr	r1, [r3, #0]
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4413      	add	r3, r2
 8002766:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	1ac9      	subs	r1, r1, r3
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	1a9b      	subs	r3, r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4403      	add	r3, r0
 8002780:	3338      	adds	r3, #56	@ 0x38
 8002782:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	334d      	adds	r3, #77	@ 0x4d
 8002794:	2201      	movs	r2, #1
 8002796:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	3344      	adds	r3, #68	@ 0x44
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027b8:	461a      	mov	r2, r3
 80027ba:	2301      	movs	r3, #1
 80027bc:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027be:	78fa      	ldrb	r2, [r7, #3]
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	1a9b      	subs	r3, r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	3326      	adds	r3, #38	@ 0x26
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	1a9b      	subs	r3, r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	3326      	adds	r3, #38	@ 0x26
 80027e4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d110      	bne.n	800280c <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	4611      	mov	r1, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 fa12 	bl	8005c1c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002804:	461a      	mov	r2, r3
 8002806:	2310      	movs	r3, #16
 8002808:	6093      	str	r3, [r2, #8]
 800280a:	e03d      	b.n	8002888 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	1a9b      	subs	r3, r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	3326      	adds	r3, #38	@ 0x26
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b03      	cmp	r3, #3
 8002820:	d00a      	beq.n	8002838 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002822:	78fa      	ldrb	r2, [r7, #3]
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	1a9b      	subs	r3, r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	3326      	adds	r3, #38	@ 0x26
 8002832:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002834:	2b01      	cmp	r3, #1
 8002836:	d127      	bne.n	8002888 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4413      	add	r3, r2
 8002840:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	78fa      	ldrb	r2, [r7, #3]
 8002848:	0151      	lsls	r1, r2, #5
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	440a      	add	r2, r1
 800284e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002852:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002856:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	334c      	adds	r3, #76	@ 0x4c
 8002868:	2201      	movs	r2, #1
 800286a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800286c:	78fa      	ldrb	r2, [r7, #3]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	1a9b      	subs	r3, r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	334c      	adds	r3, #76	@ 0x4c
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	78fb      	ldrb	r3, [r7, #3]
 8002880:	4619      	mov	r1, r3
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f003 fc49 	bl	800611a <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	799b      	ldrb	r3, [r3, #6]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d13b      	bne.n	8002908 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	3338      	adds	r3, #56	@ 0x38
 80028a0:	6819      	ldr	r1, [r3, #0]
 80028a2:	78fa      	ldrb	r2, [r7, #3]
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	1a9b      	subs	r3, r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4403      	add	r3, r0
 80028b0:	3328      	adds	r3, #40	@ 0x28
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	440b      	add	r3, r1
 80028b6:	1e59      	subs	r1, r3, #1
 80028b8:	78fa      	ldrb	r2, [r7, #3]
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4403      	add	r3, r0
 80028c6:	3328      	adds	r3, #40	@ 0x28
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 8470 	beq.w	80031b8 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80028d8:	78fa      	ldrb	r2, [r7, #3]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	333c      	adds	r3, #60	@ 0x3c
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	78fa      	ldrb	r2, [r7, #3]
 80028ec:	f083 0301 	eor.w	r3, r3, #1
 80028f0:	b2d8      	uxtb	r0, r3
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	333c      	adds	r3, #60	@ 0x3c
 8002900:	4602      	mov	r2, r0
 8002902:	701a      	strb	r2, [r3, #0]
 8002904:	f000 bc58 	b.w	80031b8 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	333c      	adds	r3, #60	@ 0x3c
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	f083 0301 	eor.w	r3, r3, #1
 8002920:	b2d8      	uxtb	r0, r3
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	333c      	adds	r3, #60	@ 0x3c
 8002930:	4602      	mov	r2, r0
 8002932:	701a      	strb	r2, [r3, #0]
 8002934:	f000 bc40 	b.w	80031b8 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f003 f8ee 	bl	8005b22 <USB_ReadChInterrupts>
 8002946:	4603      	mov	r3, r0
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b20      	cmp	r3, #32
 800294e:	d131      	bne.n	80029b4 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4413      	add	r3, r2
 8002958:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800295c:	461a      	mov	r2, r3
 800295e:	2320      	movs	r3, #32
 8002960:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002962:	78fa      	ldrb	r2, [r7, #3]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	1a9b      	subs	r3, r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	331a      	adds	r3, #26
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b01      	cmp	r3, #1
 8002976:	f040 841f 	bne.w	80031b8 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800297a:	78fa      	ldrb	r2, [r7, #3]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	1a9b      	subs	r3, r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	331b      	adds	r3, #27
 800298a:	2201      	movs	r2, #1
 800298c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800298e:	78fa      	ldrb	r2, [r7, #3]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	334d      	adds	r3, #77	@ 0x4d
 800299e:	2203      	movs	r2, #3
 80029a0:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	78fa      	ldrb	r2, [r7, #3]
 80029a8:	4611      	mov	r1, r2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f003 f936 	bl	8005c1c <USB_HC_Halt>
 80029b0:	f000 bc02 	b.w	80031b8 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f003 f8b0 	bl	8005b22 <USB_ReadChInterrupts>
 80029c2:	4603      	mov	r3, r0
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	f040 8305 	bne.w	8002fd8 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80029ce:	78fb      	ldrb	r3, [r7, #3]
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029da:	461a      	mov	r2, r3
 80029dc:	2302      	movs	r3, #2
 80029de:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80029e0:	78fa      	ldrb	r2, [r7, #3]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	334d      	adds	r3, #77	@ 0x4d
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d114      	bne.n	8002a20 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	334d      	adds	r3, #77	@ 0x4d
 8002a06:	2202      	movs	r2, #2
 8002a08:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	334c      	adds	r3, #76	@ 0x4c
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	e2cc      	b.n	8002fba <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	334d      	adds	r3, #77	@ 0x4d
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b06      	cmp	r3, #6
 8002a34:	d114      	bne.n	8002a60 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a36:	78fa      	ldrb	r2, [r7, #3]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	1a9b      	subs	r3, r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	334d      	adds	r3, #77	@ 0x4d
 8002a46:	2202      	movs	r2, #2
 8002a48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002a4a:	78fa      	ldrb	r2, [r7, #3]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	334c      	adds	r3, #76	@ 0x4c
 8002a5a:	2205      	movs	r2, #5
 8002a5c:	701a      	strb	r2, [r3, #0]
 8002a5e:	e2ac      	b.n	8002fba <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002a60:	78fa      	ldrb	r2, [r7, #3]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	334d      	adds	r3, #77	@ 0x4d
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b07      	cmp	r3, #7
 8002a74:	d00b      	beq.n	8002a8e <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	1a9b      	subs	r3, r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	334d      	adds	r3, #77	@ 0x4d
 8002a86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002a88:	2b09      	cmp	r3, #9
 8002a8a:	f040 80a6 	bne.w	8002bda <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	334d      	adds	r3, #77	@ 0x4d
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002aa2:	78fa      	ldrb	r2, [r7, #3]
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	1a9b      	subs	r3, r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	3344      	adds	r3, #68	@ 0x44
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	1c59      	adds	r1, r3, #1
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4403      	add	r3, r0
 8002ac2:	3344      	adds	r3, #68	@ 0x44
 8002ac4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ac6:	78fa      	ldrb	r2, [r7, #3]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	3344      	adds	r3, #68	@ 0x44
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d943      	bls.n	8002b64 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002adc:	78fa      	ldrb	r2, [r7, #3]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	1a9b      	subs	r3, r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	3344      	adds	r3, #68	@ 0x44
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	331a      	adds	r3, #26
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d123      	bne.n	8002b4e <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002b06:	78fa      	ldrb	r2, [r7, #3]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	1a9b      	subs	r3, r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	331b      	adds	r3, #27
 8002b16:	2200      	movs	r2, #0
 8002b18:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002b1a:	78fa      	ldrb	r2, [r7, #3]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	1a9b      	subs	r3, r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	331c      	adds	r3, #28
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	0151      	lsls	r1, r2, #5
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	440a      	add	r2, r1
 8002b44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b4c:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	334c      	adds	r3, #76	@ 0x4c
 8002b5e:	2204      	movs	r2, #4
 8002b60:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b62:	e229      	b.n	8002fb8 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	334c      	adds	r3, #76	@ 0x4c
 8002b74:	2202      	movs	r2, #2
 8002b76:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	3326      	adds	r3, #38	@ 0x26
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00b      	beq.n	8002ba6 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	3326      	adds	r3, #38	@ 0x26
 8002b9e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	f040 8209 	bne.w	8002fb8 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ba6:	78fb      	ldrb	r3, [r7, #3]
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002bbc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002bc4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002bd8:	e1ee      	b.n	8002fb8 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002bda:	78fa      	ldrb	r2, [r7, #3]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	1a9b      	subs	r3, r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	334d      	adds	r3, #77	@ 0x4d
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b05      	cmp	r3, #5
 8002bee:	f040 80c8 	bne.w	8002d82 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bf2:	78fa      	ldrb	r2, [r7, #3]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	1a9b      	subs	r3, r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	334d      	adds	r3, #77	@ 0x4d
 8002c02:	2202      	movs	r2, #2
 8002c04:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	1a9b      	subs	r3, r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	331b      	adds	r3, #27
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	f040 81ce 	bne.w	8002fba <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	3326      	adds	r3, #38	@ 0x26
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d16b      	bne.n	8002d0c <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002c34:	78fa      	ldrb	r2, [r7, #3]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	3348      	adds	r3, #72	@ 0x48
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	1c59      	adds	r1, r3, #1
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4403      	add	r3, r0
 8002c54:	3348      	adds	r3, #72	@ 0x48
 8002c56:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002c58:	78fa      	ldrb	r2, [r7, #3]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	3348      	adds	r3, #72	@ 0x48
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d943      	bls.n	8002cf6 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3348      	adds	r3, #72	@ 0x48
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	1a9b      	subs	r3, r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	331b      	adds	r3, #27
 8002c92:	2200      	movs	r2, #0
 8002c94:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3344      	adds	r3, #68	@ 0x44
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d809      	bhi.n	8002cc0 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002cac:	78fa      	ldrb	r2, [r7, #3]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	331c      	adds	r3, #28
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002cc0:	78fb      	ldrb	r3, [r7, #3]
 8002cc2:	015a      	lsls	r2, r3, #5
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	0151      	lsls	r1, r2, #5
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	440a      	add	r2, r1
 8002cd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cde:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ce0:	78fa      	ldrb	r2, [r7, #3]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	1a9b      	subs	r3, r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	334c      	adds	r3, #76	@ 0x4c
 8002cf0:	2204      	movs	r2, #4
 8002cf2:	701a      	strb	r2, [r3, #0]
 8002cf4:	e014      	b.n	8002d20 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	1a9b      	subs	r3, r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	334c      	adds	r3, #76	@ 0x4c
 8002d06:	2202      	movs	r2, #2
 8002d08:	701a      	strb	r2, [r3, #0]
 8002d0a:	e009      	b.n	8002d20 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d0c:	78fa      	ldrb	r2, [r7, #3]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	334c      	adds	r3, #76	@ 0x4c
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	3326      	adds	r3, #38	@ 0x26
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00b      	beq.n	8002d4e <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	3326      	adds	r3, #38	@ 0x26
 8002d46:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	f040 8136 	bne.w	8002fba <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002d64:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d6c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d6e:	78fb      	ldrb	r3, [r7, #3]
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	e11b      	b.n	8002fba <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	334d      	adds	r3, #77	@ 0x4d
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	f040 8081 	bne.w	8002e9c <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d9a:	78fa      	ldrb	r2, [r7, #3]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	1a9b      	subs	r3, r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	334d      	adds	r3, #77	@ 0x4d
 8002daa:	2202      	movs	r2, #2
 8002dac:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002dae:	78fa      	ldrb	r2, [r7, #3]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	331b      	adds	r3, #27
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	f040 80fa 	bne.w	8002fba <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002dc6:	78fa      	ldrb	r2, [r7, #3]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	334c      	adds	r3, #76	@ 0x4c
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	0151      	lsls	r1, r2, #5
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	440a      	add	r2, r1
 8002df0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002df8:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	0151      	lsls	r1, r2, #5
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	440a      	add	r2, r1
 8002e10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e18:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002e1a:	78fb      	ldrb	r3, [r7, #3]
 8002e1c:	015a      	lsls	r2, r3, #5
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4413      	add	r3, r2
 8002e22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	0151      	lsls	r1, r2, #5
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	440a      	add	r2, r1
 8002e30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e34:	f023 0320 	bic.w	r3, r3, #32
 8002e38:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	1a9b      	subs	r3, r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	3326      	adds	r3, #38	@ 0x26
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00b      	beq.n	8002e68 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	3326      	adds	r3, #38	@ 0x26
 8002e60:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	f040 80a9 	bne.w	8002fba <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002e7e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e86:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e94:	461a      	mov	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	e08e      	b.n	8002fba <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002e9c:	78fa      	ldrb	r2, [r7, #3]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	334d      	adds	r3, #77	@ 0x4d
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d143      	bne.n	8002f3a <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	334d      	adds	r3, #77	@ 0x4d
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	334c      	adds	r3, #76	@ 0x4c
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	3326      	adds	r3, #38	@ 0x26
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	3326      	adds	r3, #38	@ 0x26
 8002f00:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d159      	bne.n	8002fba <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f1c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f24:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f26:	78fb      	ldrb	r3, [r7, #3]
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f32:	461a      	mov	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	e03f      	b.n	8002fba <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002f3a:	78fa      	ldrb	r2, [r7, #3]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	1a9b      	subs	r3, r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	334d      	adds	r3, #77	@ 0x4d
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d126      	bne.n	8002f9e <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	334d      	adds	r3, #77	@ 0x4d
 8002f60:	2202      	movs	r2, #2
 8002f62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	3344      	adds	r3, #68	@ 0x44
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	1c59      	adds	r1, r3, #1
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	1a9b      	subs	r3, r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4403      	add	r3, r0
 8002f84:	3344      	adds	r3, #68	@ 0x44
 8002f86:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	334c      	adds	r3, #76	@ 0x4c
 8002f98:	2204      	movs	r2, #4
 8002f9a:	701a      	strb	r2, [r3, #0]
 8002f9c:	e00d      	b.n	8002fba <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	334d      	adds	r3, #77	@ 0x4d
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	f000 8100 	beq.w	80031b6 <HCD_HC_IN_IRQHandler+0xcca>
 8002fb6:	e000      	b.n	8002fba <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fb8:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002fba:	78fa      	ldrb	r2, [r7, #3]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	334c      	adds	r3, #76	@ 0x4c
 8002fca:	781a      	ldrb	r2, [r3, #0]
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	4619      	mov	r1, r3
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f003 f8a2 	bl	800611a <HAL_HCD_HC_NotifyURBChange_Callback>
 8002fd6:	e0ef      	b.n	80031b8 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	4611      	mov	r1, r2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f002 fd9e 	bl	8005b22 <USB_ReadChInterrupts>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fec:	2b40      	cmp	r3, #64	@ 0x40
 8002fee:	d12f      	bne.n	8003050 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	2340      	movs	r3, #64	@ 0x40
 8003000:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003002:	78fa      	ldrb	r2, [r7, #3]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	334d      	adds	r3, #77	@ 0x4d
 8003012:	2205      	movs	r2, #5
 8003014:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003016:	78fa      	ldrb	r2, [r7, #3]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	331a      	adds	r3, #26
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d109      	bne.n	8003040 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	3344      	adds	r3, #68	@ 0x44
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f002 fde7 	bl	8005c1c <USB_HC_Halt>
 800304e:	e0b3      	b.n	80031b8 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	4611      	mov	r1, r2
 8003058:	4618      	mov	r0, r3
 800305a:	f002 fd62 	bl	8005b22 <USB_ReadChInterrupts>
 800305e:	4603      	mov	r3, r0
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b10      	cmp	r3, #16
 8003066:	f040 80a7 	bne.w	80031b8 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	1a9b      	subs	r3, r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	3326      	adds	r3, #38	@ 0x26
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b03      	cmp	r3, #3
 800307e:	d11b      	bne.n	80030b8 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	3344      	adds	r3, #68	@ 0x44
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003094:	78fa      	ldrb	r2, [r7, #3]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	1a9b      	subs	r3, r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	334d      	adds	r3, #77	@ 0x4d
 80030a4:	2204      	movs	r2, #4
 80030a6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f002 fdb3 	bl	8005c1c <USB_HC_Halt>
 80030b6:	e03f      	b.n	8003138 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030b8:	78fa      	ldrb	r2, [r7, #3]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	3326      	adds	r3, #38	@ 0x26
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00a      	beq.n	80030e4 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80030ce:	78fa      	ldrb	r2, [r7, #3]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	3326      	adds	r3, #38	@ 0x26
 80030de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d129      	bne.n	8003138 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	3344      	adds	r3, #68	@ 0x44
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	799b      	ldrb	r3, [r3, #6]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <HCD_HC_IN_IRQHandler+0xc2a>
 8003100:	78fa      	ldrb	r2, [r7, #3]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	1a9b      	subs	r3, r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	331b      	adds	r3, #27
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d110      	bne.n	8003138 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003116:	78fa      	ldrb	r2, [r7, #3]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	1a9b      	subs	r3, r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	334d      	adds	r3, #77	@ 0x4d
 8003126:	2204      	movs	r2, #4
 8003128:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	4611      	mov	r1, r2
 8003132:	4618      	mov	r0, r3
 8003134:	f002 fd72 	bl	8005c1c <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	331b      	adds	r3, #27
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d129      	bne.n	80031a2 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	331b      	adds	r3, #27
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4413      	add	r3, r2
 800316a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	0151      	lsls	r1, r2, #5
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	440a      	add	r2, r1
 8003178:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800317c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003180:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	4413      	add	r3, r2
 800318a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	0151      	lsls	r1, r2, #5
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	440a      	add	r2, r1
 8003198:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800319c:	f043 0320 	orr.w	r3, r3, #32
 80031a0:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031ae:	461a      	mov	r2, r3
 80031b0:	2310      	movs	r3, #16
 80031b2:	6093      	str	r3, [r2, #8]
 80031b4:	e000      	b.n	80031b8 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80031b6:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b086      	sub	sp, #24
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	460b      	mov	r3, r1
 80031c8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	4611      	mov	r1, r2
 80031dc:	4618      	mov	r0, r3
 80031de:	f002 fca0 	bl	8005b22 <USB_ReadChInterrupts>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d11b      	bne.n	8003224 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031f8:	461a      	mov	r2, r3
 80031fa:	2304      	movs	r3, #4
 80031fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	334d      	adds	r3, #77	@ 0x4d
 800320e:	2207      	movs	r2, #7
 8003210:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	4611      	mov	r1, r2
 800321a:	4618      	mov	r0, r3
 800321c:	f002 fcfe 	bl	8005c1c <USB_HC_Halt>
 8003220:	f000 bc89 	b.w	8003b36 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f002 fc78 	bl	8005b22 <USB_ReadChInterrupts>
 8003232:	4603      	mov	r3, r0
 8003234:	f003 0320 	and.w	r3, r3, #32
 8003238:	2b20      	cmp	r3, #32
 800323a:	f040 8082 	bne.w	8003342 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4413      	add	r3, r2
 8003246:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800324a:	461a      	mov	r2, r3
 800324c:	2320      	movs	r3, #32
 800324e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	3319      	adds	r3, #25
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d124      	bne.n	80032b0 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	3319      	adds	r3, #25
 8003276:	2200      	movs	r2, #0
 8003278:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	334c      	adds	r3, #76	@ 0x4c
 800328a:	2202      	movs	r2, #2
 800328c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	334d      	adds	r3, #77	@ 0x4d
 800329e:	2203      	movs	r2, #3
 80032a0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	4611      	mov	r1, r2
 80032aa:	4618      	mov	r0, r3
 80032ac:	f002 fcb6 	bl	8005c1c <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	331a      	adds	r3, #26
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	f040 8437 	bne.w	8003b36 <HCD_HC_OUT_IRQHandler+0x978>
 80032c8:	78fa      	ldrb	r2, [r7, #3]
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	331b      	adds	r3, #27
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f040 842b 	bne.w	8003b36 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80032e0:	78fa      	ldrb	r2, [r7, #3]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	3326      	adds	r3, #38	@ 0x26
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d009      	beq.n	800330a <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80032f6:	78fa      	ldrb	r2, [r7, #3]
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	1a9b      	subs	r3, r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	440b      	add	r3, r1
 8003304:	331b      	adds	r3, #27
 8003306:	2201      	movs	r2, #1
 8003308:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	334d      	adds	r3, #77	@ 0x4d
 800331a:	2203      	movs	r2, #3
 800331c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	4611      	mov	r1, r2
 8003326:	4618      	mov	r0, r3
 8003328:	f002 fc78 	bl	8005c1c <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	3344      	adds	r3, #68	@ 0x44
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	e3f9      	b.n	8003b36 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	78fa      	ldrb	r2, [r7, #3]
 8003348:	4611      	mov	r1, r2
 800334a:	4618      	mov	r0, r3
 800334c:	f002 fbe9 	bl	8005b22 <USB_ReadChInterrupts>
 8003350:	4603      	mov	r3, r0
 8003352:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003356:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800335a:	d111      	bne.n	8003380 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4413      	add	r3, r2
 8003364:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003368:	461a      	mov	r2, r3
 800336a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800336e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	4611      	mov	r1, r2
 8003378:	4618      	mov	r0, r3
 800337a:	f002 fc4f 	bl	8005c1c <USB_HC_Halt>
 800337e:	e3da      	b.n	8003b36 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	4611      	mov	r1, r2
 8003388:	4618      	mov	r0, r3
 800338a:	f002 fbca 	bl	8005b22 <USB_ReadChInterrupts>
 800338e:	4603      	mov	r3, r0
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b01      	cmp	r3, #1
 8003396:	d168      	bne.n	800346a <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003398:	78fa      	ldrb	r2, [r7, #3]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	3344      	adds	r3, #68	@ 0x44
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	78fa      	ldrb	r2, [r7, #3]
 80033b2:	4611      	mov	r1, r2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f002 fbb4 	bl	8005b22 <USB_ReadChInterrupts>
 80033ba:	4603      	mov	r3, r0
 80033bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c0:	2b40      	cmp	r3, #64	@ 0x40
 80033c2:	d112      	bne.n	80033ea <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	3319      	adds	r3, #25
 80033d4:	2201      	movs	r2, #1
 80033d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e4:	461a      	mov	r2, r3
 80033e6:	2340      	movs	r3, #64	@ 0x40
 80033e8:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	1a9b      	subs	r3, r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	331b      	adds	r3, #27
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d019      	beq.n	8003434 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	331b      	adds	r3, #27
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	78fa      	ldrb	r2, [r7, #3]
 8003424:	0151      	lsls	r1, r2, #5
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	440a      	add	r2, r1
 800342a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800342e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003432:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4413      	add	r3, r2
 800343c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003440:	461a      	mov	r2, r3
 8003442:	2301      	movs	r3, #1
 8003444:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	334d      	adds	r3, #77	@ 0x4d
 8003456:	2201      	movs	r2, #1
 8003458:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	4611      	mov	r1, r2
 8003462:	4618      	mov	r0, r3
 8003464:	f002 fbda 	bl	8005c1c <USB_HC_Halt>
 8003468:	e365      	b.n	8003b36 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	78fa      	ldrb	r2, [r7, #3]
 8003470:	4611      	mov	r1, r2
 8003472:	4618      	mov	r0, r3
 8003474:	f002 fb55 	bl	8005b22 <USB_ReadChInterrupts>
 8003478:	4603      	mov	r3, r0
 800347a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800347e:	2b40      	cmp	r3, #64	@ 0x40
 8003480:	d139      	bne.n	80034f6 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003482:	78fa      	ldrb	r2, [r7, #3]
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	1a9b      	subs	r3, r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	334d      	adds	r3, #77	@ 0x4d
 8003492:	2205      	movs	r2, #5
 8003494:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	331a      	adds	r3, #26
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d109      	bne.n	80034c0 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80034ac:	78fa      	ldrb	r2, [r7, #3]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	3319      	adds	r3, #25
 80034bc:	2201      	movs	r2, #1
 80034be:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	3344      	adds	r3, #68	@ 0x44
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	78fa      	ldrb	r2, [r7, #3]
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f002 fb9d 	bl	8005c1c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80034e2:	78fb      	ldrb	r3, [r7, #3]
 80034e4:	015a      	lsls	r2, r3, #5
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4413      	add	r3, r2
 80034ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034ee:	461a      	mov	r2, r3
 80034f0:	2340      	movs	r3, #64	@ 0x40
 80034f2:	6093      	str	r3, [r2, #8]
 80034f4:	e31f      	b.n	8003b36 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	78fa      	ldrb	r2, [r7, #3]
 80034fc:	4611      	mov	r1, r2
 80034fe:	4618      	mov	r0, r3
 8003500:	f002 fb0f 	bl	8005b22 <USB_ReadChInterrupts>
 8003504:	4603      	mov	r3, r0
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b08      	cmp	r3, #8
 800350c:	d11a      	bne.n	8003544 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4413      	add	r3, r2
 8003516:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800351a:	461a      	mov	r2, r3
 800351c:	2308      	movs	r3, #8
 800351e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003520:	78fa      	ldrb	r2, [r7, #3]
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	334d      	adds	r3, #77	@ 0x4d
 8003530:	2206      	movs	r2, #6
 8003532:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	4611      	mov	r1, r2
 800353c:	4618      	mov	r0, r3
 800353e:	f002 fb6d 	bl	8005c1c <USB_HC_Halt>
 8003542:	e2f8      	b.n	8003b36 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f002 fae8 	bl	8005b22 <USB_ReadChInterrupts>
 8003552:	4603      	mov	r3, r0
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b10      	cmp	r3, #16
 800355a:	d144      	bne.n	80035e6 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	3344      	adds	r3, #68	@ 0x44
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	334d      	adds	r3, #77	@ 0x4d
 8003580:	2204      	movs	r2, #4
 8003582:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003584:	78fa      	ldrb	r2, [r7, #3]
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	1a9b      	subs	r3, r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	3319      	adds	r3, #25
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d114      	bne.n	80035c4 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800359a:	78fa      	ldrb	r2, [r7, #3]
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	3318      	adds	r3, #24
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d109      	bne.n	80035c4 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80035b0:	78fa      	ldrb	r2, [r7, #3]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	3319      	adds	r3, #25
 80035c0:	2201      	movs	r2, #1
 80035c2:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	78fa      	ldrb	r2, [r7, #3]
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f002 fb25 	bl	8005c1c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80035d2:	78fb      	ldrb	r3, [r7, #3]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035de:	461a      	mov	r2, r3
 80035e0:	2310      	movs	r3, #16
 80035e2:	6093      	str	r3, [r2, #8]
 80035e4:	e2a7      	b.n	8003b36 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	4611      	mov	r1, r2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f002 fa97 	bl	8005b22 <USB_ReadChInterrupts>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035fa:	2b80      	cmp	r3, #128	@ 0x80
 80035fc:	f040 8083 	bne.w	8003706 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	799b      	ldrb	r3, [r3, #6]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d111      	bne.n	800362c <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003608:	78fa      	ldrb	r2, [r7, #3]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	334d      	adds	r3, #77	@ 0x4d
 8003618:	2207      	movs	r2, #7
 800361a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	4611      	mov	r1, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f002 faf9 	bl	8005c1c <USB_HC_Halt>
 800362a:	e062      	b.n	80036f2 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800362c:	78fa      	ldrb	r2, [r7, #3]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	3344      	adds	r3, #68	@ 0x44
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	1c59      	adds	r1, r3, #1
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4403      	add	r3, r0
 800364c:	3344      	adds	r3, #68	@ 0x44
 800364e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003650:	78fa      	ldrb	r2, [r7, #3]
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	1a9b      	subs	r3, r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	3344      	adds	r3, #68	@ 0x44
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b02      	cmp	r3, #2
 8003664:	d922      	bls.n	80036ac <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	3344      	adds	r3, #68	@ 0x44
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800367a:	78fa      	ldrb	r2, [r7, #3]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	334c      	adds	r3, #76	@ 0x4c
 800368a:	2204      	movs	r2, #4
 800368c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800368e:	78fa      	ldrb	r2, [r7, #3]
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	334c      	adds	r3, #76	@ 0x4c
 800369e:	781a      	ldrb	r2, [r3, #0]
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	4619      	mov	r1, r3
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f002 fd38 	bl	800611a <HAL_HCD_HC_NotifyURBChange_Callback>
 80036aa:	e022      	b.n	80036f2 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036ac:	78fa      	ldrb	r2, [r7, #3]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	334c      	adds	r3, #76	@ 0x4c
 80036bc:	2202      	movs	r2, #2
 80036be:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036d6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036de:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80036e0:	78fb      	ldrb	r3, [r7, #3]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ec:	461a      	mov	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036fe:	461a      	mov	r2, r3
 8003700:	2380      	movs	r3, #128	@ 0x80
 8003702:	6093      	str	r3, [r2, #8]
 8003704:	e217      	b.n	8003b36 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	4611      	mov	r1, r2
 800370e:	4618      	mov	r0, r3
 8003710:	f002 fa07 	bl	8005b22 <USB_ReadChInterrupts>
 8003714:	4603      	mov	r3, r0
 8003716:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800371a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800371e:	d11b      	bne.n	8003758 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003720:	78fa      	ldrb	r2, [r7, #3]
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	1a9b      	subs	r3, r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	334d      	adds	r3, #77	@ 0x4d
 8003730:	2209      	movs	r2, #9
 8003732:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	78fa      	ldrb	r2, [r7, #3]
 800373a:	4611      	mov	r1, r2
 800373c:	4618      	mov	r0, r3
 800373e:	f002 fa6d 	bl	8005c1c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003742:	78fb      	ldrb	r3, [r7, #3]
 8003744:	015a      	lsls	r2, r3, #5
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	4413      	add	r3, r2
 800374a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800374e:	461a      	mov	r2, r3
 8003750:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003754:	6093      	str	r3, [r2, #8]
 8003756:	e1ee      	b.n	8003b36 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	78fa      	ldrb	r2, [r7, #3]
 800375e:	4611      	mov	r1, r2
 8003760:	4618      	mov	r0, r3
 8003762:	f002 f9de 	bl	8005b22 <USB_ReadChInterrupts>
 8003766:	4603      	mov	r3, r0
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b02      	cmp	r3, #2
 800376e:	f040 81df 	bne.w	8003b30 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003772:	78fb      	ldrb	r3, [r7, #3]
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	4413      	add	r3, r2
 800377a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800377e:	461a      	mov	r2, r3
 8003780:	2302      	movs	r3, #2
 8003782:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003784:	78fa      	ldrb	r2, [r7, #3]
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	4613      	mov	r3, r2
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	334d      	adds	r3, #77	@ 0x4d
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b01      	cmp	r3, #1
 8003798:	f040 8093 	bne.w	80038c2 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800379c:	78fa      	ldrb	r2, [r7, #3]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	1a9b      	subs	r3, r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	334d      	adds	r3, #77	@ 0x4d
 80037ac:	2202      	movs	r2, #2
 80037ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80037b0:	78fa      	ldrb	r2, [r7, #3]
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	334c      	adds	r3, #76	@ 0x4c
 80037c0:	2201      	movs	r2, #1
 80037c2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80037c4:	78fa      	ldrb	r2, [r7, #3]
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	1a9b      	subs	r3, r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	3326      	adds	r3, #38	@ 0x26
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d00b      	beq.n	80037f2 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80037da:	78fa      	ldrb	r2, [r7, #3]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	3326      	adds	r3, #38	@ 0x26
 80037ea:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	f040 8190 	bne.w	8003b12 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	799b      	ldrb	r3, [r3, #6]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d115      	bne.n	8003826 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80037fa:	78fa      	ldrb	r2, [r7, #3]
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	333d      	adds	r3, #61	@ 0x3d
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	78fa      	ldrb	r2, [r7, #3]
 800380e:	f083 0301 	eor.w	r3, r3, #1
 8003812:	b2d8      	uxtb	r0, r3
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	1a9b      	subs	r3, r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	440b      	add	r3, r1
 8003820:	333d      	adds	r3, #61	@ 0x3d
 8003822:	4602      	mov	r2, r0
 8003824:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	799b      	ldrb	r3, [r3, #6]
 800382a:	2b01      	cmp	r3, #1
 800382c:	f040 8171 	bne.w	8003b12 <HCD_HC_OUT_IRQHandler+0x954>
 8003830:	78fa      	ldrb	r2, [r7, #3]
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	3334      	adds	r3, #52	@ 0x34
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 8165 	beq.w	8003b12 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003848:	78fa      	ldrb	r2, [r7, #3]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	3334      	adds	r3, #52	@ 0x34
 8003858:	6819      	ldr	r1, [r3, #0]
 800385a:	78fa      	ldrb	r2, [r7, #3]
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4403      	add	r3, r0
 8003868:	3328      	adds	r3, #40	@ 0x28
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	440b      	add	r3, r1
 800386e:	1e59      	subs	r1, r3, #1
 8003870:	78fa      	ldrb	r2, [r7, #3]
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4403      	add	r3, r0
 800387e:	3328      	adds	r3, #40	@ 0x28
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	fbb1 f3f3 	udiv	r3, r1, r3
 8003886:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 813f 	beq.w	8003b12 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003894:	78fa      	ldrb	r2, [r7, #3]
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	333d      	adds	r3, #61	@ 0x3d
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	78fa      	ldrb	r2, [r7, #3]
 80038a8:	f083 0301 	eor.w	r3, r3, #1
 80038ac:	b2d8      	uxtb	r0, r3
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	333d      	adds	r3, #61	@ 0x3d
 80038bc:	4602      	mov	r2, r0
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	e127      	b.n	8003b12 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80038c2:	78fa      	ldrb	r2, [r7, #3]
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	334d      	adds	r3, #77	@ 0x4d
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d120      	bne.n	800391a <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038d8:	78fa      	ldrb	r2, [r7, #3]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	334d      	adds	r3, #77	@ 0x4d
 80038e8:	2202      	movs	r2, #2
 80038ea:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80038ec:	78fa      	ldrb	r2, [r7, #3]
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	1a9b      	subs	r3, r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	331b      	adds	r3, #27
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	f040 8107 	bne.w	8003b12 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003904:	78fa      	ldrb	r2, [r7, #3]
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	4613      	mov	r3, r2
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	334c      	adds	r3, #76	@ 0x4c
 8003914:	2202      	movs	r2, #2
 8003916:	701a      	strb	r2, [r3, #0]
 8003918:	e0fb      	b.n	8003b12 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	334d      	adds	r3, #77	@ 0x4d
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b04      	cmp	r3, #4
 800392e:	d13a      	bne.n	80039a6 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	334d      	adds	r3, #77	@ 0x4d
 8003940:	2202      	movs	r2, #2
 8003942:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003944:	78fa      	ldrb	r2, [r7, #3]
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	4613      	mov	r3, r2
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	1a9b      	subs	r3, r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	334c      	adds	r3, #76	@ 0x4c
 8003954:	2202      	movs	r2, #2
 8003956:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	331b      	adds	r3, #27
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b01      	cmp	r3, #1
 800396c:	f040 80d1 	bne.w	8003b12 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003970:	78fa      	ldrb	r2, [r7, #3]
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	4613      	mov	r3, r2
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	331b      	adds	r3, #27
 8003980:	2200      	movs	r2, #0
 8003982:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4413      	add	r3, r2
 800398c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	78fa      	ldrb	r2, [r7, #3]
 8003994:	0151      	lsls	r1, r2, #5
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	440a      	add	r2, r1
 800399a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800399e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039a2:	6053      	str	r3, [r2, #4]
 80039a4:	e0b5      	b.n	8003b12 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80039a6:	78fa      	ldrb	r2, [r7, #3]
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	4613      	mov	r3, r2
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	1a9b      	subs	r3, r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	334d      	adds	r3, #77	@ 0x4d
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b05      	cmp	r3, #5
 80039ba:	d114      	bne.n	80039e6 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	334d      	adds	r3, #77	@ 0x4d
 80039cc:	2202      	movs	r2, #2
 80039ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80039d0:	78fa      	ldrb	r2, [r7, #3]
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	1a9b      	subs	r3, r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	334c      	adds	r3, #76	@ 0x4c
 80039e0:	2202      	movs	r2, #2
 80039e2:	701a      	strb	r2, [r3, #0]
 80039e4:	e095      	b.n	8003b12 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80039e6:	78fa      	ldrb	r2, [r7, #3]
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	1a9b      	subs	r3, r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	440b      	add	r3, r1
 80039f4:	334d      	adds	r3, #77	@ 0x4d
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b06      	cmp	r3, #6
 80039fa:	d114      	bne.n	8003a26 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039fc:	78fa      	ldrb	r2, [r7, #3]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	334d      	adds	r3, #77	@ 0x4d
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003a10:	78fa      	ldrb	r2, [r7, #3]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	334c      	adds	r3, #76	@ 0x4c
 8003a20:	2205      	movs	r2, #5
 8003a22:	701a      	strb	r2, [r3, #0]
 8003a24:	e075      	b.n	8003b12 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003a26:	78fa      	ldrb	r2, [r7, #3]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	334d      	adds	r3, #77	@ 0x4d
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b07      	cmp	r3, #7
 8003a3a:	d00a      	beq.n	8003a52 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	1a9b      	subs	r3, r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	334d      	adds	r3, #77	@ 0x4d
 8003a4c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003a4e:	2b09      	cmp	r3, #9
 8003a50:	d170      	bne.n	8003b34 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a52:	78fa      	ldrb	r2, [r7, #3]
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	1a9b      	subs	r3, r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	334d      	adds	r3, #77	@ 0x4d
 8003a62:	2202      	movs	r2, #2
 8003a64:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003a66:	78fa      	ldrb	r2, [r7, #3]
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	1a9b      	subs	r3, r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	3344      	adds	r3, #68	@ 0x44
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	1c59      	adds	r1, r3, #1
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4403      	add	r3, r0
 8003a86:	3344      	adds	r3, #68	@ 0x44
 8003a88:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a8a:	78fa      	ldrb	r2, [r7, #3]
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	3344      	adds	r3, #68	@ 0x44
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d914      	bls.n	8003aca <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003aa0:	78fa      	ldrb	r2, [r7, #3]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	1a9b      	subs	r3, r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	3344      	adds	r3, #68	@ 0x44
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ab4:	78fa      	ldrb	r2, [r7, #3]
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	1a9b      	subs	r3, r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	334c      	adds	r3, #76	@ 0x4c
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ac8:	e022      	b.n	8003b10 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003aca:	78fa      	ldrb	r2, [r7, #3]
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	334c      	adds	r3, #76	@ 0x4c
 8003ada:	2202      	movs	r2, #2
 8003adc:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ade:	78fb      	ldrb	r3, [r7, #3]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003af4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003afc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003afe:	78fb      	ldrb	r3, [r7, #3]
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b10:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003b12:	78fa      	ldrb	r2, [r7, #3]
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	1a9b      	subs	r3, r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	334c      	adds	r3, #76	@ 0x4c
 8003b22:	781a      	ldrb	r2, [r3, #0]
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	4619      	mov	r1, r3
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f002 faf6 	bl	800611a <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b2e:	e002      	b.n	8003b36 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003b30:	bf00      	nop
 8003b32:	e000      	b.n	8003b36 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003b34:	bf00      	nop
  }
}
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08a      	sub	sp, #40	@ 0x28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	f003 030f 	and.w	r3, r3, #15
 8003b5c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	0c5b      	lsrs	r3, r3, #17
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	091b      	lsrs	r3, r3, #4
 8003b6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b70:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d004      	beq.n	8003b82 <HCD_RXQLVL_IRQHandler+0x46>
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2b05      	cmp	r3, #5
 8003b7c:	f000 80b6 	beq.w	8003cec <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003b80:	e0b7      	b.n	8003cf2 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80b3 	beq.w	8003cf0 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	1a9b      	subs	r3, r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	440b      	add	r3, r1
 8003b98:	332c      	adds	r3, #44	@ 0x2c
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 80a7 	beq.w	8003cf0 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	3338      	adds	r3, #56	@ 0x38
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	18d1      	adds	r1, r2, r3
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4403      	add	r3, r0
 8003bc6:	3334      	adds	r3, #52	@ 0x34
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4299      	cmp	r1, r3
 8003bcc:	f200 8083 	bhi.w	8003cd6 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	332c      	adds	r3, #44	@ 0x2c
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	b292      	uxth	r2, r2
 8003bea:	4619      	mov	r1, r3
 8003bec:	f001 ff2e 	bl	8005a4c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	332c      	adds	r3, #44	@ 0x2c
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	18d1      	adds	r1, r2, r3
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	1a9b      	subs	r3, r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4403      	add	r3, r0
 8003c14:	332c      	adds	r3, #44	@ 0x2c
 8003c16:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	1a9b      	subs	r3, r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	3338      	adds	r3, #56	@ 0x38
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	18d1      	adds	r1, r2, r3
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4613      	mov	r3, r2
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	1a9b      	subs	r3, r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4403      	add	r3, r0
 8003c3c:	3338      	adds	r3, #56	@ 0x38
 8003c3e:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	0cdb      	lsrs	r3, r3, #19
 8003c50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c54:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	440b      	add	r3, r1
 8003c64:	3328      	adds	r3, #40	@ 0x28
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d13f      	bne.n	8003cf0 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d03c      	beq.n	8003cf0 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c8c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c94:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4613      	mov	r3, r2
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	1a9b      	subs	r3, r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	333c      	adds	r3, #60	@ 0x3c
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	f083 0301 	eor.w	r3, r3, #1
 8003cbe:	b2d8      	uxtb	r0, r3
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	333c      	adds	r3, #60	@ 0x3c
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	701a      	strb	r2, [r3, #0]
      break;
 8003cd4:	e00c      	b.n	8003cf0 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	1a9b      	subs	r3, r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	334c      	adds	r3, #76	@ 0x4c
 8003ce6:	2204      	movs	r2, #4
 8003ce8:	701a      	strb	r2, [r3, #0]
      break;
 8003cea:	e001      	b.n	8003cf0 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003cec:	bf00      	nop
 8003cee:	e000      	b.n	8003cf2 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003cf0:	bf00      	nop
  }
}
 8003cf2:	bf00      	nop
 8003cf4:	3728      	adds	r7, #40	@ 0x28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b086      	sub	sp, #24
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003d26:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d10b      	bne.n	8003d4a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d102      	bne.n	8003d42 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f002 f9d0 	bl	80060e2 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f043 0302 	orr.w	r3, r3, #2
 8003d48:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d132      	bne.n	8003dba <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f043 0308 	orr.w	r3, r3, #8
 8003d5a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d126      	bne.n	8003db4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	7a5b      	ldrb	r3, [r3, #9]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d113      	bne.n	8003d96 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003d74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d78:	d106      	bne.n	8003d88 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2102      	movs	r1, #2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f001 fefd 	bl	8005b80 <USB_InitFSLSPClkSel>
 8003d86:	e011      	b.n	8003dac <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f001 fef6 	bl	8005b80 <USB_InitFSLSPClkSel>
 8003d94:	e00a      	b.n	8003dac <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	79db      	ldrb	r3, [r3, #7]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d106      	bne.n	8003dac <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003da4:	461a      	mov	r2, r3
 8003da6:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003daa:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f002 f9c2 	bl	8006136 <HAL_HCD_PortEnabled_Callback>
 8003db2:	e002      	b.n	8003dba <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f002 f9cc 	bl	8006152 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f003 0320 	and.w	r3, r3, #32
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d103      	bne.n	8003dcc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f043 0320 	orr.w	r3, r3, #32
 8003dca:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	6013      	str	r3, [r2, #0]
}
 8003dd8:	bf00      	nop
 8003dda:	3718      	adds	r7, #24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e267      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d075      	beq.n	8003eea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003dfe:	4b88      	ldr	r3, [pc, #544]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d00c      	beq.n	8003e24 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e0a:	4b85      	ldr	r3, [pc, #532]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d112      	bne.n	8003e3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e16:	4b82      	ldr	r3, [pc, #520]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e22:	d10b      	bne.n	8003e3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e24:	4b7e      	ldr	r3, [pc, #504]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d05b      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x108>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d157      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e242      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e44:	d106      	bne.n	8003e54 <HAL_RCC_OscConfig+0x74>
 8003e46:	4b76      	ldr	r3, [pc, #472]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a75      	ldr	r2, [pc, #468]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	e01d      	b.n	8003e90 <HAL_RCC_OscConfig+0xb0>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e5c:	d10c      	bne.n	8003e78 <HAL_RCC_OscConfig+0x98>
 8003e5e:	4b70      	ldr	r3, [pc, #448]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a6f      	ldr	r2, [pc, #444]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	4b6d      	ldr	r3, [pc, #436]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a6c      	ldr	r2, [pc, #432]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	e00b      	b.n	8003e90 <HAL_RCC_OscConfig+0xb0>
 8003e78:	4b69      	ldr	r3, [pc, #420]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a68      	ldr	r2, [pc, #416]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	4b66      	ldr	r3, [pc, #408]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a65      	ldr	r2, [pc, #404]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d013      	beq.n	8003ec0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7fd ff10 	bl	8001cbc <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7fd ff0c 	bl	8001cbc <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	@ 0x64
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e207      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb2:	4b5b      	ldr	r3, [pc, #364]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0f0      	beq.n	8003ea0 <HAL_RCC_OscConfig+0xc0>
 8003ebe:	e014      	b.n	8003eea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec0:	f7fd fefc 	bl	8001cbc <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec8:	f7fd fef8 	bl	8001cbc <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	@ 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e1f3      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eda:	4b51      	ldr	r3, [pc, #324]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0xe8>
 8003ee6:	e000      	b.n	8003eea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d063      	beq.n	8003fbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 030c 	and.w	r3, r3, #12
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00b      	beq.n	8003f1a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f02:	4b47      	ldr	r3, [pc, #284]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d11c      	bne.n	8003f48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f0e:	4b44      	ldr	r3, [pc, #272]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d116      	bne.n	8003f48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1a:	4b41      	ldr	r3, [pc, #260]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <HAL_RCC_OscConfig+0x152>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d001      	beq.n	8003f32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e1c7      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f32:	4b3b      	ldr	r3, [pc, #236]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	4937      	ldr	r1, [pc, #220]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f46:	e03a      	b.n	8003fbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d020      	beq.n	8003f92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f50:	4b34      	ldr	r3, [pc, #208]	@ (8004024 <HAL_RCC_OscConfig+0x244>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f56:	f7fd feb1 	bl	8001cbc <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f5e:	f7fd fead 	bl	8001cbc <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e1a8      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f70:	4b2b      	ldr	r3, [pc, #172]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f0      	beq.n	8003f5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f7c:	4b28      	ldr	r3, [pc, #160]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4925      	ldr	r1, [pc, #148]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	600b      	str	r3, [r1, #0]
 8003f90:	e015      	b.n	8003fbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f92:	4b24      	ldr	r3, [pc, #144]	@ (8004024 <HAL_RCC_OscConfig+0x244>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f98:	f7fd fe90 	bl	8001cbc <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa0:	f7fd fe8c 	bl	8001cbc <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e187      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d036      	beq.n	8004038 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d016      	beq.n	8004000 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fd2:	4b15      	ldr	r3, [pc, #84]	@ (8004028 <HAL_RCC_OscConfig+0x248>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd8:	f7fd fe70 	bl	8001cbc <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe0:	f7fd fe6c 	bl	8001cbc <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e167      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x200>
 8003ffe:	e01b      	b.n	8004038 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004000:	4b09      	ldr	r3, [pc, #36]	@ (8004028 <HAL_RCC_OscConfig+0x248>)
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004006:	f7fd fe59 	bl	8001cbc <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800400c:	e00e      	b.n	800402c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800400e:	f7fd fe55 	bl	8001cbc <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d907      	bls.n	800402c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e150      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
 8004020:	40023800 	.word	0x40023800
 8004024:	42470000 	.word	0x42470000
 8004028:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800402c:	4b88      	ldr	r3, [pc, #544]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 800402e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1ea      	bne.n	800400e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 8097 	beq.w	8004174 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004046:	2300      	movs	r3, #0
 8004048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800404a:	4b81      	ldr	r3, [pc, #516]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10f      	bne.n	8004076 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]
 800405a:	4b7d      	ldr	r3, [pc, #500]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 800405c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405e:	4a7c      	ldr	r2, [pc, #496]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 8004060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004064:	6413      	str	r3, [r2, #64]	@ 0x40
 8004066:	4b7a      	ldr	r3, [pc, #488]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800406e:	60bb      	str	r3, [r7, #8]
 8004070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004072:	2301      	movs	r3, #1
 8004074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004076:	4b77      	ldr	r3, [pc, #476]	@ (8004254 <HAL_RCC_OscConfig+0x474>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407e:	2b00      	cmp	r3, #0
 8004080:	d118      	bne.n	80040b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004082:	4b74      	ldr	r3, [pc, #464]	@ (8004254 <HAL_RCC_OscConfig+0x474>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a73      	ldr	r2, [pc, #460]	@ (8004254 <HAL_RCC_OscConfig+0x474>)
 8004088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800408c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800408e:	f7fd fe15 	bl	8001cbc <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004096:	f7fd fe11 	bl	8001cbc <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e10c      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004254 <HAL_RCC_OscConfig+0x474>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0f0      	beq.n	8004096 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d106      	bne.n	80040ca <HAL_RCC_OscConfig+0x2ea>
 80040bc:	4b64      	ldr	r3, [pc, #400]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c0:	4a63      	ldr	r2, [pc, #396]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040c8:	e01c      	b.n	8004104 <HAL_RCC_OscConfig+0x324>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b05      	cmp	r3, #5
 80040d0:	d10c      	bne.n	80040ec <HAL_RCC_OscConfig+0x30c>
 80040d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 80040d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d6:	4a5e      	ldr	r2, [pc, #376]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 80040d8:	f043 0304 	orr.w	r3, r3, #4
 80040dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80040de:	4b5c      	ldr	r3, [pc, #368]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 80040e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e2:	4a5b      	ldr	r2, [pc, #364]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ea:	e00b      	b.n	8004104 <HAL_RCC_OscConfig+0x324>
 80040ec:	4b58      	ldr	r3, [pc, #352]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 80040ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f0:	4a57      	ldr	r2, [pc, #348]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 80040f2:	f023 0301 	bic.w	r3, r3, #1
 80040f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040f8:	4b55      	ldr	r3, [pc, #340]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 80040fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040fc:	4a54      	ldr	r2, [pc, #336]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 80040fe:	f023 0304 	bic.w	r3, r3, #4
 8004102:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d015      	beq.n	8004138 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410c:	f7fd fdd6 	bl	8001cbc <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004112:	e00a      	b.n	800412a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004114:	f7fd fdd2 	bl	8001cbc <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004122:	4293      	cmp	r3, r2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e0cb      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800412a:	4b49      	ldr	r3, [pc, #292]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 800412c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0ee      	beq.n	8004114 <HAL_RCC_OscConfig+0x334>
 8004136:	e014      	b.n	8004162 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004138:	f7fd fdc0 	bl	8001cbc <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800413e:	e00a      	b.n	8004156 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004140:	f7fd fdbc 	bl	8001cbc <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800414e:	4293      	cmp	r3, r2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e0b5      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004156:	4b3e      	ldr	r3, [pc, #248]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 8004158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1ee      	bne.n	8004140 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004162:	7dfb      	ldrb	r3, [r7, #23]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d105      	bne.n	8004174 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004168:	4b39      	ldr	r3, [pc, #228]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 800416a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416c:	4a38      	ldr	r2, [pc, #224]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 800416e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004172:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 80a1 	beq.w	80042c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800417e:	4b34      	ldr	r3, [pc, #208]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 030c 	and.w	r3, r3, #12
 8004186:	2b08      	cmp	r3, #8
 8004188:	d05c      	beq.n	8004244 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	2b02      	cmp	r3, #2
 8004190:	d141      	bne.n	8004216 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004192:	4b31      	ldr	r3, [pc, #196]	@ (8004258 <HAL_RCC_OscConfig+0x478>)
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004198:	f7fd fd90 	bl	8001cbc <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a0:	f7fd fd8c 	bl	8001cbc <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e087      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b2:	4b27      	ldr	r3, [pc, #156]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1f0      	bne.n	80041a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69da      	ldr	r2, [r3, #28]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041cc:	019b      	lsls	r3, r3, #6
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	3b01      	subs	r3, #1
 80041d8:	041b      	lsls	r3, r3, #16
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e0:	061b      	lsls	r3, r3, #24
 80041e2:	491b      	ldr	r1, [pc, #108]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004258 <HAL_RCC_OscConfig+0x478>)
 80041ea:	2201      	movs	r2, #1
 80041ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ee:	f7fd fd65 	bl	8001cbc <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f6:	f7fd fd61 	bl	8001cbc <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e05c      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004208:	4b11      	ldr	r3, [pc, #68]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0f0      	beq.n	80041f6 <HAL_RCC_OscConfig+0x416>
 8004214:	e054      	b.n	80042c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004216:	4b10      	ldr	r3, [pc, #64]	@ (8004258 <HAL_RCC_OscConfig+0x478>)
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7fd fd4e 	bl	8001cbc <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004224:	f7fd fd4a 	bl	8001cbc <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e045      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004236:	4b06      	ldr	r3, [pc, #24]	@ (8004250 <HAL_RCC_OscConfig+0x470>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f0      	bne.n	8004224 <HAL_RCC_OscConfig+0x444>
 8004242:	e03d      	b.n	80042c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d107      	bne.n	800425c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e038      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
 8004250:	40023800 	.word	0x40023800
 8004254:	40007000 	.word	0x40007000
 8004258:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800425c:	4b1b      	ldr	r3, [pc, #108]	@ (80042cc <HAL_RCC_OscConfig+0x4ec>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d028      	beq.n	80042bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004274:	429a      	cmp	r2, r3
 8004276:	d121      	bne.n	80042bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004282:	429a      	cmp	r2, r3
 8004284:	d11a      	bne.n	80042bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800428c:	4013      	ands	r3, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004292:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004294:	4293      	cmp	r3, r2
 8004296:	d111      	bne.n	80042bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a2:	085b      	lsrs	r3, r3, #1
 80042a4:	3b01      	subs	r3, #1
 80042a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d107      	bne.n	80042bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d001      	beq.n	80042c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40023800 	.word	0x40023800

080042d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0cc      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042e4:	4b68      	ldr	r3, [pc, #416]	@ (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d90c      	bls.n	800430c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b65      	ldr	r3, [pc, #404]	@ (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fa:	4b63      	ldr	r3, [pc, #396]	@ (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d001      	beq.n	800430c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0b8      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d020      	beq.n	800435a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004324:	4b59      	ldr	r3, [pc, #356]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	4a58      	ldr	r2, [pc, #352]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800432e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800433c:	4b53      	ldr	r3, [pc, #332]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	4a52      	ldr	r2, [pc, #328]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004346:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004348:	4b50      	ldr	r3, [pc, #320]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	494d      	ldr	r1, [pc, #308]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004356:	4313      	orrs	r3, r2
 8004358:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d044      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436e:	4b47      	ldr	r3, [pc, #284]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d119      	bne.n	80043ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e07f      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d003      	beq.n	800438e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800438a:	2b03      	cmp	r3, #3
 800438c:	d107      	bne.n	800439e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438e:	4b3f      	ldr	r3, [pc, #252]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e06f      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439e:	4b3b      	ldr	r3, [pc, #236]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e067      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ae:	4b37      	ldr	r3, [pc, #220]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f023 0203 	bic.w	r2, r3, #3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	4934      	ldr	r1, [pc, #208]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043c0:	f7fd fc7c 	bl	8001cbc <HAL_GetTick>
 80043c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c6:	e00a      	b.n	80043de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c8:	f7fd fc78 	bl	8001cbc <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e04f      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043de:	4b2b      	ldr	r3, [pc, #172]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 020c 	and.w	r2, r3, #12
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d1eb      	bne.n	80043c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043f0:	4b25      	ldr	r3, [pc, #148]	@ (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d20c      	bcs.n	8004418 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fe:	4b22      	ldr	r3, [pc, #136]	@ (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004406:	4b20      	ldr	r3, [pc, #128]	@ (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d001      	beq.n	8004418 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e032      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004424:	4b19      	ldr	r3, [pc, #100]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	4916      	ldr	r1, [pc, #88]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d009      	beq.n	8004456 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004442:	4b12      	ldr	r3, [pc, #72]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	490e      	ldr	r1, [pc, #56]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	4313      	orrs	r3, r2
 8004454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004456:	f000 f821 	bl	800449c <HAL_RCC_GetSysClockFreq>
 800445a:	4602      	mov	r2, r0
 800445c:	4b0b      	ldr	r3, [pc, #44]	@ (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	091b      	lsrs	r3, r3, #4
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	490a      	ldr	r1, [pc, #40]	@ (8004490 <HAL_RCC_ClockConfig+0x1c0>)
 8004468:	5ccb      	ldrb	r3, [r1, r3]
 800446a:	fa22 f303 	lsr.w	r3, r2, r3
 800446e:	4a09      	ldr	r2, [pc, #36]	@ (8004494 <HAL_RCC_ClockConfig+0x1c4>)
 8004470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004472:	4b09      	ldr	r3, [pc, #36]	@ (8004498 <HAL_RCC_ClockConfig+0x1c8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7fd fbdc 	bl	8001c34 <HAL_InitTick>

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40023c00 	.word	0x40023c00
 800448c:	40023800 	.word	0x40023800
 8004490:	08006500 	.word	0x08006500
 8004494:	20005678 	.word	0x20005678
 8004498:	200056ec 	.word	0x200056ec

0800449c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800449c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a0:	b094      	sub	sp, #80	@ 0x50
 80044a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044b4:	4b79      	ldr	r3, [pc, #484]	@ (800469c <HAL_RCC_GetSysClockFreq+0x200>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 030c 	and.w	r3, r3, #12
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d00d      	beq.n	80044dc <HAL_RCC_GetSysClockFreq+0x40>
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	f200 80e1 	bhi.w	8004688 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <HAL_RCC_GetSysClockFreq+0x34>
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d003      	beq.n	80044d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ce:	e0db      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044d0:	4b73      	ldr	r3, [pc, #460]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80044d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044d4:	e0db      	b.n	800468e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044d6:	4b73      	ldr	r3, [pc, #460]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80044d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044da:	e0d8      	b.n	800468e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044dc:	4b6f      	ldr	r3, [pc, #444]	@ (800469c <HAL_RCC_GetSysClockFreq+0x200>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044e6:	4b6d      	ldr	r3, [pc, #436]	@ (800469c <HAL_RCC_GetSysClockFreq+0x200>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d063      	beq.n	80045ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044f2:	4b6a      	ldr	r3, [pc, #424]	@ (800469c <HAL_RCC_GetSysClockFreq+0x200>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	099b      	lsrs	r3, r3, #6
 80044f8:	2200      	movs	r2, #0
 80044fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80044fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004504:	633b      	str	r3, [r7, #48]	@ 0x30
 8004506:	2300      	movs	r3, #0
 8004508:	637b      	str	r3, [r7, #52]	@ 0x34
 800450a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800450e:	4622      	mov	r2, r4
 8004510:	462b      	mov	r3, r5
 8004512:	f04f 0000 	mov.w	r0, #0
 8004516:	f04f 0100 	mov.w	r1, #0
 800451a:	0159      	lsls	r1, r3, #5
 800451c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004520:	0150      	lsls	r0, r2, #5
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	4621      	mov	r1, r4
 8004528:	1a51      	subs	r1, r2, r1
 800452a:	6139      	str	r1, [r7, #16]
 800452c:	4629      	mov	r1, r5
 800452e:	eb63 0301 	sbc.w	r3, r3, r1
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004540:	4659      	mov	r1, fp
 8004542:	018b      	lsls	r3, r1, #6
 8004544:	4651      	mov	r1, sl
 8004546:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800454a:	4651      	mov	r1, sl
 800454c:	018a      	lsls	r2, r1, #6
 800454e:	4651      	mov	r1, sl
 8004550:	ebb2 0801 	subs.w	r8, r2, r1
 8004554:	4659      	mov	r1, fp
 8004556:	eb63 0901 	sbc.w	r9, r3, r1
 800455a:	f04f 0200 	mov.w	r2, #0
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004566:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800456a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800456e:	4690      	mov	r8, r2
 8004570:	4699      	mov	r9, r3
 8004572:	4623      	mov	r3, r4
 8004574:	eb18 0303 	adds.w	r3, r8, r3
 8004578:	60bb      	str	r3, [r7, #8]
 800457a:	462b      	mov	r3, r5
 800457c:	eb49 0303 	adc.w	r3, r9, r3
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800458e:	4629      	mov	r1, r5
 8004590:	024b      	lsls	r3, r1, #9
 8004592:	4621      	mov	r1, r4
 8004594:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004598:	4621      	mov	r1, r4
 800459a:	024a      	lsls	r2, r1, #9
 800459c:	4610      	mov	r0, r2
 800459e:	4619      	mov	r1, r3
 80045a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045a2:	2200      	movs	r2, #0
 80045a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045ac:	f7fb fe14 	bl	80001d8 <__aeabi_uldivmod>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	4613      	mov	r3, r2
 80045b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045b8:	e058      	b.n	800466c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ba:	4b38      	ldr	r3, [pc, #224]	@ (800469c <HAL_RCC_GetSysClockFreq+0x200>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	099b      	lsrs	r3, r3, #6
 80045c0:	2200      	movs	r2, #0
 80045c2:	4618      	mov	r0, r3
 80045c4:	4611      	mov	r1, r2
 80045c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045ca:	623b      	str	r3, [r7, #32]
 80045cc:	2300      	movs	r3, #0
 80045ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80045d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045d4:	4642      	mov	r2, r8
 80045d6:	464b      	mov	r3, r9
 80045d8:	f04f 0000 	mov.w	r0, #0
 80045dc:	f04f 0100 	mov.w	r1, #0
 80045e0:	0159      	lsls	r1, r3, #5
 80045e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045e6:	0150      	lsls	r0, r2, #5
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4641      	mov	r1, r8
 80045ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80045f2:	4649      	mov	r1, r9
 80045f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004604:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004608:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800460c:	ebb2 040a 	subs.w	r4, r2, sl
 8004610:	eb63 050b 	sbc.w	r5, r3, fp
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	00eb      	lsls	r3, r5, #3
 800461e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004622:	00e2      	lsls	r2, r4, #3
 8004624:	4614      	mov	r4, r2
 8004626:	461d      	mov	r5, r3
 8004628:	4643      	mov	r3, r8
 800462a:	18e3      	adds	r3, r4, r3
 800462c:	603b      	str	r3, [r7, #0]
 800462e:	464b      	mov	r3, r9
 8004630:	eb45 0303 	adc.w	r3, r5, r3
 8004634:	607b      	str	r3, [r7, #4]
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004642:	4629      	mov	r1, r5
 8004644:	028b      	lsls	r3, r1, #10
 8004646:	4621      	mov	r1, r4
 8004648:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800464c:	4621      	mov	r1, r4
 800464e:	028a      	lsls	r2, r1, #10
 8004650:	4610      	mov	r0, r2
 8004652:	4619      	mov	r1, r3
 8004654:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004656:	2200      	movs	r2, #0
 8004658:	61bb      	str	r3, [r7, #24]
 800465a:	61fa      	str	r2, [r7, #28]
 800465c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004660:	f7fb fdba 	bl	80001d8 <__aeabi_uldivmod>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4613      	mov	r3, r2
 800466a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800466c:	4b0b      	ldr	r3, [pc, #44]	@ (800469c <HAL_RCC_GetSysClockFreq+0x200>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	0c1b      	lsrs	r3, r3, #16
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	3301      	adds	r3, #1
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800467c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800467e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004680:	fbb2 f3f3 	udiv	r3, r2, r3
 8004684:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004686:	e002      	b.n	800468e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004688:	4b05      	ldr	r3, [pc, #20]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800468a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800468c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800468e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004690:	4618      	mov	r0, r3
 8004692:	3750      	adds	r7, #80	@ 0x50
 8004694:	46bd      	mov	sp, r7
 8004696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800469a:	bf00      	nop
 800469c:	40023800 	.word	0x40023800
 80046a0:	00f42400 	.word	0x00f42400
 80046a4:	007a1200 	.word	0x007a1200

080046a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046ac:	4b03      	ldr	r3, [pc, #12]	@ (80046bc <HAL_RCC_GetHCLKFreq+0x14>)
 80046ae:	681b      	ldr	r3, [r3, #0]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	20005678 	.word	0x20005678

080046c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046c4:	f7ff fff0 	bl	80046a8 <HAL_RCC_GetHCLKFreq>
 80046c8:	4602      	mov	r2, r0
 80046ca:	4b05      	ldr	r3, [pc, #20]	@ (80046e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	0a9b      	lsrs	r3, r3, #10
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	4903      	ldr	r1, [pc, #12]	@ (80046e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046d6:	5ccb      	ldrb	r3, [r1, r3]
 80046d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046dc:	4618      	mov	r0, r3
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40023800 	.word	0x40023800
 80046e4:	08006510 	.word	0x08006510

080046e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046ec:	f7ff ffdc 	bl	80046a8 <HAL_RCC_GetHCLKFreq>
 80046f0:	4602      	mov	r2, r0
 80046f2:	4b05      	ldr	r3, [pc, #20]	@ (8004708 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	0b5b      	lsrs	r3, r3, #13
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	4903      	ldr	r1, [pc, #12]	@ (800470c <HAL_RCC_GetPCLK2Freq+0x24>)
 80046fe:	5ccb      	ldrb	r3, [r1, r3]
 8004700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004704:	4618      	mov	r0, r3
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40023800 	.word	0x40023800
 800470c:	08006510 	.word	0x08006510

08004710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e041      	b.n	80047a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d106      	bne.n	800473c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7fd f864 	bl	8001804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3304      	adds	r3, #4
 800474c:	4619      	mov	r1, r3
 800474e:	4610      	mov	r0, r2
 8004750:	f000 fa88 	bl	8004c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d001      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e04e      	b.n	8004866 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68da      	ldr	r2, [r3, #12]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0201 	orr.w	r2, r2, #1
 80047de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a23      	ldr	r2, [pc, #140]	@ (8004874 <HAL_TIM_Base_Start_IT+0xc4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d022      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x80>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047f2:	d01d      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x80>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004878 <HAL_TIM_Base_Start_IT+0xc8>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d018      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x80>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a1e      	ldr	r2, [pc, #120]	@ (800487c <HAL_TIM_Base_Start_IT+0xcc>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d013      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x80>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a1c      	ldr	r2, [pc, #112]	@ (8004880 <HAL_TIM_Base_Start_IT+0xd0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00e      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x80>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a1b      	ldr	r2, [pc, #108]	@ (8004884 <HAL_TIM_Base_Start_IT+0xd4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d009      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x80>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a19      	ldr	r2, [pc, #100]	@ (8004888 <HAL_TIM_Base_Start_IT+0xd8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d004      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x80>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a18      	ldr	r2, [pc, #96]	@ (800488c <HAL_TIM_Base_Start_IT+0xdc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d111      	bne.n	8004854 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2b06      	cmp	r3, #6
 8004840:	d010      	beq.n	8004864 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0201 	orr.w	r2, r2, #1
 8004850:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004852:	e007      	b.n	8004864 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0201 	orr.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40010000 	.word	0x40010000
 8004878:	40000400 	.word	0x40000400
 800487c:	40000800 	.word	0x40000800
 8004880:	40000c00 	.word	0x40000c00
 8004884:	40010400 	.word	0x40010400
 8004888:	40014000 	.word	0x40014000
 800488c:	40001800 	.word	0x40001800

08004890 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d020      	beq.n	80048f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01b      	beq.n	80048f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0202 	mvn.w	r2, #2
 80048c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f9a3 	bl	8004c26 <HAL_TIM_IC_CaptureCallback>
 80048e0:	e005      	b.n	80048ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f995 	bl	8004c12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f9a6 	bl	8004c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d020      	beq.n	8004940 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d01b      	beq.n	8004940 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0204 	mvn.w	r2, #4
 8004910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2202      	movs	r2, #2
 8004916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f97d 	bl	8004c26 <HAL_TIM_IC_CaptureCallback>
 800492c:	e005      	b.n	800493a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f96f 	bl	8004c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f980 	bl	8004c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d020      	beq.n	800498c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f003 0308 	and.w	r3, r3, #8
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01b      	beq.n	800498c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0208 	mvn.w	r2, #8
 800495c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2204      	movs	r2, #4
 8004962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f957 	bl	8004c26 <HAL_TIM_IC_CaptureCallback>
 8004978:	e005      	b.n	8004986 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f949 	bl	8004c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f95a 	bl	8004c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 0310 	and.w	r3, r3, #16
 8004992:	2b00      	cmp	r3, #0
 8004994:	d020      	beq.n	80049d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01b      	beq.n	80049d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0210 	mvn.w	r2, #16
 80049a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2208      	movs	r2, #8
 80049ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f931 	bl	8004c26 <HAL_TIM_IC_CaptureCallback>
 80049c4:	e005      	b.n	80049d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f923 	bl	8004c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f934 	bl	8004c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00c      	beq.n	80049fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d007      	beq.n	80049fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0201 	mvn.w	r2, #1
 80049f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f901 	bl	8004bfe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00c      	beq.n	8004a20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d007      	beq.n	8004a20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fae8 	bl	8004ff0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00c      	beq.n	8004a44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d007      	beq.n	8004a44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f905 	bl	8004c4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00c      	beq.n	8004a68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d007      	beq.n	8004a68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0220 	mvn.w	r2, #32
 8004a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 faba 	bl	8004fdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a68:	bf00      	nop
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_TIM_ConfigClockSource+0x1c>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e0b4      	b.n	8004bf6 <HAL_TIM_ConfigClockSource+0x186>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004aaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ab2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ac4:	d03e      	beq.n	8004b44 <HAL_TIM_ConfigClockSource+0xd4>
 8004ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aca:	f200 8087 	bhi.w	8004bdc <HAL_TIM_ConfigClockSource+0x16c>
 8004ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ad2:	f000 8086 	beq.w	8004be2 <HAL_TIM_ConfigClockSource+0x172>
 8004ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ada:	d87f      	bhi.n	8004bdc <HAL_TIM_ConfigClockSource+0x16c>
 8004adc:	2b70      	cmp	r3, #112	@ 0x70
 8004ade:	d01a      	beq.n	8004b16 <HAL_TIM_ConfigClockSource+0xa6>
 8004ae0:	2b70      	cmp	r3, #112	@ 0x70
 8004ae2:	d87b      	bhi.n	8004bdc <HAL_TIM_ConfigClockSource+0x16c>
 8004ae4:	2b60      	cmp	r3, #96	@ 0x60
 8004ae6:	d050      	beq.n	8004b8a <HAL_TIM_ConfigClockSource+0x11a>
 8004ae8:	2b60      	cmp	r3, #96	@ 0x60
 8004aea:	d877      	bhi.n	8004bdc <HAL_TIM_ConfigClockSource+0x16c>
 8004aec:	2b50      	cmp	r3, #80	@ 0x50
 8004aee:	d03c      	beq.n	8004b6a <HAL_TIM_ConfigClockSource+0xfa>
 8004af0:	2b50      	cmp	r3, #80	@ 0x50
 8004af2:	d873      	bhi.n	8004bdc <HAL_TIM_ConfigClockSource+0x16c>
 8004af4:	2b40      	cmp	r3, #64	@ 0x40
 8004af6:	d058      	beq.n	8004baa <HAL_TIM_ConfigClockSource+0x13a>
 8004af8:	2b40      	cmp	r3, #64	@ 0x40
 8004afa:	d86f      	bhi.n	8004bdc <HAL_TIM_ConfigClockSource+0x16c>
 8004afc:	2b30      	cmp	r3, #48	@ 0x30
 8004afe:	d064      	beq.n	8004bca <HAL_TIM_ConfigClockSource+0x15a>
 8004b00:	2b30      	cmp	r3, #48	@ 0x30
 8004b02:	d86b      	bhi.n	8004bdc <HAL_TIM_ConfigClockSource+0x16c>
 8004b04:	2b20      	cmp	r3, #32
 8004b06:	d060      	beq.n	8004bca <HAL_TIM_ConfigClockSource+0x15a>
 8004b08:	2b20      	cmp	r3, #32
 8004b0a:	d867      	bhi.n	8004bdc <HAL_TIM_ConfigClockSource+0x16c>
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d05c      	beq.n	8004bca <HAL_TIM_ConfigClockSource+0x15a>
 8004b10:	2b10      	cmp	r3, #16
 8004b12:	d05a      	beq.n	8004bca <HAL_TIM_ConfigClockSource+0x15a>
 8004b14:	e062      	b.n	8004bdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b26:	f000 f9bd 	bl	8004ea4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	609a      	str	r2, [r3, #8]
      break;
 8004b42:	e04f      	b.n	8004be4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b54:	f000 f9a6 	bl	8004ea4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689a      	ldr	r2, [r3, #8]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b66:	609a      	str	r2, [r3, #8]
      break;
 8004b68:	e03c      	b.n	8004be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b76:	461a      	mov	r2, r3
 8004b78:	f000 f91a 	bl	8004db0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2150      	movs	r1, #80	@ 0x50
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 f973 	bl	8004e6e <TIM_ITRx_SetConfig>
      break;
 8004b88:	e02c      	b.n	8004be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b96:	461a      	mov	r2, r3
 8004b98:	f000 f939 	bl	8004e0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2160      	movs	r1, #96	@ 0x60
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 f963 	bl	8004e6e <TIM_ITRx_SetConfig>
      break;
 8004ba8:	e01c      	b.n	8004be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	f000 f8fa 	bl	8004db0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2140      	movs	r1, #64	@ 0x40
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 f953 	bl	8004e6e <TIM_ITRx_SetConfig>
      break;
 8004bc8:	e00c      	b.n	8004be4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	f000 f94a 	bl	8004e6e <TIM_ITRx_SetConfig>
      break;
 8004bda:	e003      	b.n	8004be4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	73fb      	strb	r3, [r7, #15]
      break;
 8004be0:	e000      	b.n	8004be4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004be2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b083      	sub	sp, #12
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
	...

08004c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a43      	ldr	r2, [pc, #268]	@ (8004d84 <TIM_Base_SetConfig+0x120>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d013      	beq.n	8004ca4 <TIM_Base_SetConfig+0x40>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c82:	d00f      	beq.n	8004ca4 <TIM_Base_SetConfig+0x40>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a40      	ldr	r2, [pc, #256]	@ (8004d88 <TIM_Base_SetConfig+0x124>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00b      	beq.n	8004ca4 <TIM_Base_SetConfig+0x40>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a3f      	ldr	r2, [pc, #252]	@ (8004d8c <TIM_Base_SetConfig+0x128>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d007      	beq.n	8004ca4 <TIM_Base_SetConfig+0x40>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a3e      	ldr	r2, [pc, #248]	@ (8004d90 <TIM_Base_SetConfig+0x12c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d003      	beq.n	8004ca4 <TIM_Base_SetConfig+0x40>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a3d      	ldr	r2, [pc, #244]	@ (8004d94 <TIM_Base_SetConfig+0x130>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d108      	bne.n	8004cb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a32      	ldr	r2, [pc, #200]	@ (8004d84 <TIM_Base_SetConfig+0x120>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d02b      	beq.n	8004d16 <TIM_Base_SetConfig+0xb2>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cc4:	d027      	beq.n	8004d16 <TIM_Base_SetConfig+0xb2>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a2f      	ldr	r2, [pc, #188]	@ (8004d88 <TIM_Base_SetConfig+0x124>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d023      	beq.n	8004d16 <TIM_Base_SetConfig+0xb2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a2e      	ldr	r2, [pc, #184]	@ (8004d8c <TIM_Base_SetConfig+0x128>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d01f      	beq.n	8004d16 <TIM_Base_SetConfig+0xb2>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a2d      	ldr	r2, [pc, #180]	@ (8004d90 <TIM_Base_SetConfig+0x12c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d01b      	beq.n	8004d16 <TIM_Base_SetConfig+0xb2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a2c      	ldr	r2, [pc, #176]	@ (8004d94 <TIM_Base_SetConfig+0x130>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d017      	beq.n	8004d16 <TIM_Base_SetConfig+0xb2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a2b      	ldr	r2, [pc, #172]	@ (8004d98 <TIM_Base_SetConfig+0x134>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d013      	beq.n	8004d16 <TIM_Base_SetConfig+0xb2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a2a      	ldr	r2, [pc, #168]	@ (8004d9c <TIM_Base_SetConfig+0x138>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00f      	beq.n	8004d16 <TIM_Base_SetConfig+0xb2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a29      	ldr	r2, [pc, #164]	@ (8004da0 <TIM_Base_SetConfig+0x13c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00b      	beq.n	8004d16 <TIM_Base_SetConfig+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a28      	ldr	r2, [pc, #160]	@ (8004da4 <TIM_Base_SetConfig+0x140>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d007      	beq.n	8004d16 <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a27      	ldr	r2, [pc, #156]	@ (8004da8 <TIM_Base_SetConfig+0x144>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d003      	beq.n	8004d16 <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a26      	ldr	r2, [pc, #152]	@ (8004dac <TIM_Base_SetConfig+0x148>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d108      	bne.n	8004d28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a0e      	ldr	r2, [pc, #56]	@ (8004d84 <TIM_Base_SetConfig+0x120>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d003      	beq.n	8004d56 <TIM_Base_SetConfig+0xf2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a10      	ldr	r2, [pc, #64]	@ (8004d94 <TIM_Base_SetConfig+0x130>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d103      	bne.n	8004d5e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	691a      	ldr	r2, [r3, #16]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f043 0204 	orr.w	r2, r3, #4
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	601a      	str	r2, [r3, #0]
}
 8004d76:	bf00      	nop
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40010000 	.word	0x40010000
 8004d88:	40000400 	.word	0x40000400
 8004d8c:	40000800 	.word	0x40000800
 8004d90:	40000c00 	.word	0x40000c00
 8004d94:	40010400 	.word	0x40010400
 8004d98:	40014000 	.word	0x40014000
 8004d9c:	40014400 	.word	0x40014400
 8004da0:	40014800 	.word	0x40014800
 8004da4:	40001800 	.word	0x40001800
 8004da8:	40001c00 	.word	0x40001c00
 8004dac:	40002000 	.word	0x40002000

08004db0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	f023 0201 	bic.w	r2, r3, #1
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f023 030a 	bic.w	r3, r3, #10
 8004dec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	621a      	str	r2, [r3, #32]
}
 8004e02:	bf00      	nop
 8004e04:	371c      	adds	r7, #28
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b087      	sub	sp, #28
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	60f8      	str	r0, [r7, #12]
 8004e16:	60b9      	str	r1, [r7, #8]
 8004e18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	f023 0210 	bic.w	r2, r3, #16
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	031b      	lsls	r3, r3, #12
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	011b      	lsls	r3, r3, #4
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	621a      	str	r2, [r3, #32]
}
 8004e62:	bf00      	nop
 8004e64:	371c      	adds	r7, #28
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b085      	sub	sp, #20
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f043 0307 	orr.w	r3, r3, #7
 8004e90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	609a      	str	r2, [r3, #8]
}
 8004e98:	bf00      	nop
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ebe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	021a      	lsls	r2, r3, #8
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	609a      	str	r2, [r3, #8]
}
 8004ed8:	bf00      	nop
 8004eda:	371c      	adds	r7, #28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d101      	bne.n	8004efc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	e05a      	b.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a21      	ldr	r2, [pc, #132]	@ (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d022      	beq.n	8004f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f48:	d01d      	beq.n	8004f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a1d      	ldr	r2, [pc, #116]	@ (8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d018      	beq.n	8004f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a1b      	ldr	r2, [pc, #108]	@ (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d013      	beq.n	8004f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a1a      	ldr	r2, [pc, #104]	@ (8004fcc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00e      	beq.n	8004f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a18      	ldr	r2, [pc, #96]	@ (8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d009      	beq.n	8004f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a17      	ldr	r2, [pc, #92]	@ (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d004      	beq.n	8004f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a15      	ldr	r2, [pc, #84]	@ (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d10c      	bne.n	8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	40010000 	.word	0x40010000
 8004fc4:	40000400 	.word	0x40000400
 8004fc8:	40000800 	.word	0x40000800
 8004fcc:	40000c00 	.word	0x40000c00
 8004fd0:	40010400 	.word	0x40010400
 8004fd4:	40014000 	.word	0x40014000
 8004fd8:	40001800 	.word	0x40001800

08004fdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e042      	b.n	800509c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fc fd6e 	bl	8001b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2224      	movs	r2, #36	@ 0x24
 8005034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005046:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fa09 	bl	8005460 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	691a      	ldr	r2, [r3, #16]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800505c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	695a      	ldr	r2, [r3, #20]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800506c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68da      	ldr	r2, [r3, #12]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800507c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2220      	movs	r2, #32
 8005088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b08a      	sub	sp, #40	@ 0x28
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	603b      	str	r3, [r7, #0]
 80050b0:	4613      	mov	r3, r2
 80050b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	d175      	bne.n	80051b0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <HAL_UART_Transmit+0x2c>
 80050ca:	88fb      	ldrh	r3, [r7, #6]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e06e      	b.n	80051b2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2221      	movs	r2, #33	@ 0x21
 80050de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050e2:	f7fc fdeb 	bl	8001cbc <HAL_GetTick>
 80050e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	88fa      	ldrh	r2, [r7, #6]
 80050ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	88fa      	ldrh	r2, [r7, #6]
 80050f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050fc:	d108      	bne.n	8005110 <HAL_UART_Transmit+0x6c>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d104      	bne.n	8005110 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005106:	2300      	movs	r3, #0
 8005108:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	61bb      	str	r3, [r7, #24]
 800510e:	e003      	b.n	8005118 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005114:	2300      	movs	r3, #0
 8005116:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005118:	e02e      	b.n	8005178 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2200      	movs	r2, #0
 8005122:	2180      	movs	r1, #128	@ 0x80
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 f8df 	bl	80052e8 <UART_WaitOnFlagUntilTimeout>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d005      	beq.n	800513c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2220      	movs	r2, #32
 8005134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e03a      	b.n	80051b2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10b      	bne.n	800515a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	461a      	mov	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005150:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	3302      	adds	r3, #2
 8005156:	61bb      	str	r3, [r7, #24]
 8005158:	e007      	b.n	800516a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	781a      	ldrb	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	3301      	adds	r3, #1
 8005168:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800516e:	b29b      	uxth	r3, r3
 8005170:	3b01      	subs	r3, #1
 8005172:	b29a      	uxth	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800517c:	b29b      	uxth	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1cb      	bne.n	800511a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2200      	movs	r2, #0
 800518a:	2140      	movs	r1, #64	@ 0x40
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f8ab 	bl	80052e8 <UART_WaitOnFlagUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e006      	b.n	80051b2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	e000      	b.n	80051b2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80051b0:	2302      	movs	r3, #2
  }
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3720      	adds	r7, #32
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b08a      	sub	sp, #40	@ 0x28
 80051be:	af02      	add	r7, sp, #8
 80051c0:	60f8      	str	r0, [r7, #12]
 80051c2:	60b9      	str	r1, [r7, #8]
 80051c4:	603b      	str	r3, [r7, #0]
 80051c6:	4613      	mov	r3, r2
 80051c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b20      	cmp	r3, #32
 80051d8:	f040 8081 	bne.w	80052de <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <HAL_UART_Receive+0x2e>
 80051e2:	88fb      	ldrh	r3, [r7, #6]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e079      	b.n	80052e0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2222      	movs	r2, #34	@ 0x22
 80051f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005200:	f7fc fd5c 	bl	8001cbc <HAL_GetTick>
 8005204:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	88fa      	ldrh	r2, [r7, #6]
 800520a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	88fa      	ldrh	r2, [r7, #6]
 8005210:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800521a:	d108      	bne.n	800522e <HAL_UART_Receive+0x74>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d104      	bne.n	800522e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005224:	2300      	movs	r3, #0
 8005226:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	61bb      	str	r3, [r7, #24]
 800522c:	e003      	b.n	8005236 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005232:	2300      	movs	r3, #0
 8005234:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005236:	e047      	b.n	80052c8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2200      	movs	r2, #0
 8005240:	2120      	movs	r1, #32
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 f850 	bl	80052e8 <UART_WaitOnFlagUntilTimeout>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d005      	beq.n	800525a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2220      	movs	r2, #32
 8005252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e042      	b.n	80052e0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10c      	bne.n	800527a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	b29b      	uxth	r3, r3
 8005268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526c:	b29a      	uxth	r2, r3
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	3302      	adds	r3, #2
 8005276:	61bb      	str	r3, [r7, #24]
 8005278:	e01f      	b.n	80052ba <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005282:	d007      	beq.n	8005294 <HAL_UART_Receive+0xda>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10a      	bne.n	80052a2 <HAL_UART_Receive+0xe8>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d106      	bne.n	80052a2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	b2da      	uxtb	r2, r3
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	701a      	strb	r2, [r3, #0]
 80052a0:	e008      	b.n	80052b4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	3301      	adds	r3, #1
 80052b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052be:	b29b      	uxth	r3, r3
 80052c0:	3b01      	subs	r3, #1
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1b2      	bne.n	8005238 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	e000      	b.n	80052e0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80052de:	2302      	movs	r3, #2
  }
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3720      	adds	r7, #32
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	603b      	str	r3, [r7, #0]
 80052f4:	4613      	mov	r3, r2
 80052f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f8:	e03b      	b.n	8005372 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005300:	d037      	beq.n	8005372 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005302:	f7fc fcdb 	bl	8001cbc <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	6a3a      	ldr	r2, [r7, #32]
 800530e:	429a      	cmp	r2, r3
 8005310:	d302      	bcc.n	8005318 <UART_WaitOnFlagUntilTimeout+0x30>
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e03a      	b.n	8005392 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f003 0304 	and.w	r3, r3, #4
 8005326:	2b00      	cmp	r3, #0
 8005328:	d023      	beq.n	8005372 <UART_WaitOnFlagUntilTimeout+0x8a>
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b80      	cmp	r3, #128	@ 0x80
 800532e:	d020      	beq.n	8005372 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2b40      	cmp	r3, #64	@ 0x40
 8005334:	d01d      	beq.n	8005372 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0308 	and.w	r3, r3, #8
 8005340:	2b08      	cmp	r3, #8
 8005342:	d116      	bne.n	8005372 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 f81d 	bl	800539a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2208      	movs	r2, #8
 8005364:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e00f      	b.n	8005392 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	4013      	ands	r3, r2
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	429a      	cmp	r2, r3
 8005380:	bf0c      	ite	eq
 8005382:	2301      	moveq	r3, #1
 8005384:	2300      	movne	r3, #0
 8005386:	b2db      	uxtb	r3, r3
 8005388:	461a      	mov	r2, r3
 800538a:	79fb      	ldrb	r3, [r7, #7]
 800538c:	429a      	cmp	r2, r3
 800538e:	d0b4      	beq.n	80052fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800539a:	b480      	push	{r7}
 800539c:	b095      	sub	sp, #84	@ 0x54
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	330c      	adds	r3, #12
 80053a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ac:	e853 3f00 	ldrex	r3, [r3]
 80053b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	330c      	adds	r3, #12
 80053c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053c2:	643a      	str	r2, [r7, #64]	@ 0x40
 80053c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053ca:	e841 2300 	strex	r3, r2, [r1]
 80053ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1e5      	bne.n	80053a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3314      	adds	r3, #20
 80053dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	f023 0301 	bic.w	r3, r3, #1
 80053ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	3314      	adds	r3, #20
 80053f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e5      	bne.n	80053d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540e:	2b01      	cmp	r3, #1
 8005410:	d119      	bne.n	8005446 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	330c      	adds	r3, #12
 8005418:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	60bb      	str	r3, [r7, #8]
   return(result);
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f023 0310 	bic.w	r3, r3, #16
 8005428:	647b      	str	r3, [r7, #68]	@ 0x44
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	330c      	adds	r3, #12
 8005430:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005432:	61ba      	str	r2, [r7, #24]
 8005434:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	6979      	ldr	r1, [r7, #20]
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	613b      	str	r3, [r7, #16]
   return(result);
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1e5      	bne.n	8005412 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2220      	movs	r2, #32
 800544a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005454:	bf00      	nop
 8005456:	3754      	adds	r7, #84	@ 0x54
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005464:	b0c0      	sub	sp, #256	@ 0x100
 8005466:	af00      	add	r7, sp, #0
 8005468:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800546c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800547c:	68d9      	ldr	r1, [r3, #12]
 800547e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	ea40 0301 	orr.w	r3, r0, r1
 8005488:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800548a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	431a      	orrs	r2, r3
 8005498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	431a      	orrs	r2, r3
 80054a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80054b8:	f021 010c 	bic.w	r1, r1, #12
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054c6:	430b      	orrs	r3, r1
 80054c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80054d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054da:	6999      	ldr	r1, [r3, #24]
 80054dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	ea40 0301 	orr.w	r3, r0, r1
 80054e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4b8f      	ldr	r3, [pc, #572]	@ (800572c <UART_SetConfig+0x2cc>)
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d005      	beq.n	8005500 <UART_SetConfig+0xa0>
 80054f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	4b8d      	ldr	r3, [pc, #564]	@ (8005730 <UART_SetConfig+0x2d0>)
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d104      	bne.n	800550a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005500:	f7ff f8f2 	bl	80046e8 <HAL_RCC_GetPCLK2Freq>
 8005504:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005508:	e003      	b.n	8005512 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800550a:	f7ff f8d9 	bl	80046c0 <HAL_RCC_GetPCLK1Freq>
 800550e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800551c:	f040 810c 	bne.w	8005738 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005524:	2200      	movs	r2, #0
 8005526:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800552a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800552e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005532:	4622      	mov	r2, r4
 8005534:	462b      	mov	r3, r5
 8005536:	1891      	adds	r1, r2, r2
 8005538:	65b9      	str	r1, [r7, #88]	@ 0x58
 800553a:	415b      	adcs	r3, r3
 800553c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800553e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005542:	4621      	mov	r1, r4
 8005544:	eb12 0801 	adds.w	r8, r2, r1
 8005548:	4629      	mov	r1, r5
 800554a:	eb43 0901 	adc.w	r9, r3, r1
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	f04f 0300 	mov.w	r3, #0
 8005556:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800555a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800555e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005562:	4690      	mov	r8, r2
 8005564:	4699      	mov	r9, r3
 8005566:	4623      	mov	r3, r4
 8005568:	eb18 0303 	adds.w	r3, r8, r3
 800556c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005570:	462b      	mov	r3, r5
 8005572:	eb49 0303 	adc.w	r3, r9, r3
 8005576:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800557a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005586:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800558a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800558e:	460b      	mov	r3, r1
 8005590:	18db      	adds	r3, r3, r3
 8005592:	653b      	str	r3, [r7, #80]	@ 0x50
 8005594:	4613      	mov	r3, r2
 8005596:	eb42 0303 	adc.w	r3, r2, r3
 800559a:	657b      	str	r3, [r7, #84]	@ 0x54
 800559c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80055a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80055a4:	f7fa fe18 	bl	80001d8 <__aeabi_uldivmod>
 80055a8:	4602      	mov	r2, r0
 80055aa:	460b      	mov	r3, r1
 80055ac:	4b61      	ldr	r3, [pc, #388]	@ (8005734 <UART_SetConfig+0x2d4>)
 80055ae:	fba3 2302 	umull	r2, r3, r3, r2
 80055b2:	095b      	lsrs	r3, r3, #5
 80055b4:	011c      	lsls	r4, r3, #4
 80055b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055ba:	2200      	movs	r2, #0
 80055bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80055c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80055c8:	4642      	mov	r2, r8
 80055ca:	464b      	mov	r3, r9
 80055cc:	1891      	adds	r1, r2, r2
 80055ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80055d0:	415b      	adcs	r3, r3
 80055d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80055d8:	4641      	mov	r1, r8
 80055da:	eb12 0a01 	adds.w	sl, r2, r1
 80055de:	4649      	mov	r1, r9
 80055e0:	eb43 0b01 	adc.w	fp, r3, r1
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055f8:	4692      	mov	sl, r2
 80055fa:	469b      	mov	fp, r3
 80055fc:	4643      	mov	r3, r8
 80055fe:	eb1a 0303 	adds.w	r3, sl, r3
 8005602:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005606:	464b      	mov	r3, r9
 8005608:	eb4b 0303 	adc.w	r3, fp, r3
 800560c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800561c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005620:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005624:	460b      	mov	r3, r1
 8005626:	18db      	adds	r3, r3, r3
 8005628:	643b      	str	r3, [r7, #64]	@ 0x40
 800562a:	4613      	mov	r3, r2
 800562c:	eb42 0303 	adc.w	r3, r2, r3
 8005630:	647b      	str	r3, [r7, #68]	@ 0x44
 8005632:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005636:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800563a:	f7fa fdcd 	bl	80001d8 <__aeabi_uldivmod>
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	4611      	mov	r1, r2
 8005644:	4b3b      	ldr	r3, [pc, #236]	@ (8005734 <UART_SetConfig+0x2d4>)
 8005646:	fba3 2301 	umull	r2, r3, r3, r1
 800564a:	095b      	lsrs	r3, r3, #5
 800564c:	2264      	movs	r2, #100	@ 0x64
 800564e:	fb02 f303 	mul.w	r3, r2, r3
 8005652:	1acb      	subs	r3, r1, r3
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800565a:	4b36      	ldr	r3, [pc, #216]	@ (8005734 <UART_SetConfig+0x2d4>)
 800565c:	fba3 2302 	umull	r2, r3, r3, r2
 8005660:	095b      	lsrs	r3, r3, #5
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005668:	441c      	add	r4, r3
 800566a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800566e:	2200      	movs	r2, #0
 8005670:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005674:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005678:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800567c:	4642      	mov	r2, r8
 800567e:	464b      	mov	r3, r9
 8005680:	1891      	adds	r1, r2, r2
 8005682:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005684:	415b      	adcs	r3, r3
 8005686:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005688:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800568c:	4641      	mov	r1, r8
 800568e:	1851      	adds	r1, r2, r1
 8005690:	6339      	str	r1, [r7, #48]	@ 0x30
 8005692:	4649      	mov	r1, r9
 8005694:	414b      	adcs	r3, r1
 8005696:	637b      	str	r3, [r7, #52]	@ 0x34
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	f04f 0300 	mov.w	r3, #0
 80056a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80056a4:	4659      	mov	r1, fp
 80056a6:	00cb      	lsls	r3, r1, #3
 80056a8:	4651      	mov	r1, sl
 80056aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ae:	4651      	mov	r1, sl
 80056b0:	00ca      	lsls	r2, r1, #3
 80056b2:	4610      	mov	r0, r2
 80056b4:	4619      	mov	r1, r3
 80056b6:	4603      	mov	r3, r0
 80056b8:	4642      	mov	r2, r8
 80056ba:	189b      	adds	r3, r3, r2
 80056bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056c0:	464b      	mov	r3, r9
 80056c2:	460a      	mov	r2, r1
 80056c4:	eb42 0303 	adc.w	r3, r2, r3
 80056c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80056dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80056e0:	460b      	mov	r3, r1
 80056e2:	18db      	adds	r3, r3, r3
 80056e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056e6:	4613      	mov	r3, r2
 80056e8:	eb42 0303 	adc.w	r3, r2, r3
 80056ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80056f6:	f7fa fd6f 	bl	80001d8 <__aeabi_uldivmod>
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005734 <UART_SetConfig+0x2d4>)
 8005700:	fba3 1302 	umull	r1, r3, r3, r2
 8005704:	095b      	lsrs	r3, r3, #5
 8005706:	2164      	movs	r1, #100	@ 0x64
 8005708:	fb01 f303 	mul.w	r3, r1, r3
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	3332      	adds	r3, #50	@ 0x32
 8005712:	4a08      	ldr	r2, [pc, #32]	@ (8005734 <UART_SetConfig+0x2d4>)
 8005714:	fba2 2303 	umull	r2, r3, r2, r3
 8005718:	095b      	lsrs	r3, r3, #5
 800571a:	f003 0207 	and.w	r2, r3, #7
 800571e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4422      	add	r2, r4
 8005726:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005728:	e106      	b.n	8005938 <UART_SetConfig+0x4d8>
 800572a:	bf00      	nop
 800572c:	40011000 	.word	0x40011000
 8005730:	40011400 	.word	0x40011400
 8005734:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800573c:	2200      	movs	r2, #0
 800573e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005742:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005746:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800574a:	4642      	mov	r2, r8
 800574c:	464b      	mov	r3, r9
 800574e:	1891      	adds	r1, r2, r2
 8005750:	6239      	str	r1, [r7, #32]
 8005752:	415b      	adcs	r3, r3
 8005754:	627b      	str	r3, [r7, #36]	@ 0x24
 8005756:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800575a:	4641      	mov	r1, r8
 800575c:	1854      	adds	r4, r2, r1
 800575e:	4649      	mov	r1, r9
 8005760:	eb43 0501 	adc.w	r5, r3, r1
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	f04f 0300 	mov.w	r3, #0
 800576c:	00eb      	lsls	r3, r5, #3
 800576e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005772:	00e2      	lsls	r2, r4, #3
 8005774:	4614      	mov	r4, r2
 8005776:	461d      	mov	r5, r3
 8005778:	4643      	mov	r3, r8
 800577a:	18e3      	adds	r3, r4, r3
 800577c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005780:	464b      	mov	r3, r9
 8005782:	eb45 0303 	adc.w	r3, r5, r3
 8005786:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800578a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005796:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	f04f 0300 	mov.w	r3, #0
 80057a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80057a6:	4629      	mov	r1, r5
 80057a8:	008b      	lsls	r3, r1, #2
 80057aa:	4621      	mov	r1, r4
 80057ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057b0:	4621      	mov	r1, r4
 80057b2:	008a      	lsls	r2, r1, #2
 80057b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80057b8:	f7fa fd0e 	bl	80001d8 <__aeabi_uldivmod>
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	4b60      	ldr	r3, [pc, #384]	@ (8005944 <UART_SetConfig+0x4e4>)
 80057c2:	fba3 2302 	umull	r2, r3, r3, r2
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	011c      	lsls	r4, r3, #4
 80057ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ce:	2200      	movs	r2, #0
 80057d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80057d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80057dc:	4642      	mov	r2, r8
 80057de:	464b      	mov	r3, r9
 80057e0:	1891      	adds	r1, r2, r2
 80057e2:	61b9      	str	r1, [r7, #24]
 80057e4:	415b      	adcs	r3, r3
 80057e6:	61fb      	str	r3, [r7, #28]
 80057e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057ec:	4641      	mov	r1, r8
 80057ee:	1851      	adds	r1, r2, r1
 80057f0:	6139      	str	r1, [r7, #16]
 80057f2:	4649      	mov	r1, r9
 80057f4:	414b      	adcs	r3, r1
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005804:	4659      	mov	r1, fp
 8005806:	00cb      	lsls	r3, r1, #3
 8005808:	4651      	mov	r1, sl
 800580a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800580e:	4651      	mov	r1, sl
 8005810:	00ca      	lsls	r2, r1, #3
 8005812:	4610      	mov	r0, r2
 8005814:	4619      	mov	r1, r3
 8005816:	4603      	mov	r3, r0
 8005818:	4642      	mov	r2, r8
 800581a:	189b      	adds	r3, r3, r2
 800581c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005820:	464b      	mov	r3, r9
 8005822:	460a      	mov	r2, r1
 8005824:	eb42 0303 	adc.w	r3, r2, r3
 8005828:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800582c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005836:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005844:	4649      	mov	r1, r9
 8005846:	008b      	lsls	r3, r1, #2
 8005848:	4641      	mov	r1, r8
 800584a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800584e:	4641      	mov	r1, r8
 8005850:	008a      	lsls	r2, r1, #2
 8005852:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005856:	f7fa fcbf 	bl	80001d8 <__aeabi_uldivmod>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	4611      	mov	r1, r2
 8005860:	4b38      	ldr	r3, [pc, #224]	@ (8005944 <UART_SetConfig+0x4e4>)
 8005862:	fba3 2301 	umull	r2, r3, r3, r1
 8005866:	095b      	lsrs	r3, r3, #5
 8005868:	2264      	movs	r2, #100	@ 0x64
 800586a:	fb02 f303 	mul.w	r3, r2, r3
 800586e:	1acb      	subs	r3, r1, r3
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	3332      	adds	r3, #50	@ 0x32
 8005874:	4a33      	ldr	r2, [pc, #204]	@ (8005944 <UART_SetConfig+0x4e4>)
 8005876:	fba2 2303 	umull	r2, r3, r2, r3
 800587a:	095b      	lsrs	r3, r3, #5
 800587c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005880:	441c      	add	r4, r3
 8005882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005886:	2200      	movs	r2, #0
 8005888:	673b      	str	r3, [r7, #112]	@ 0x70
 800588a:	677a      	str	r2, [r7, #116]	@ 0x74
 800588c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005890:	4642      	mov	r2, r8
 8005892:	464b      	mov	r3, r9
 8005894:	1891      	adds	r1, r2, r2
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	415b      	adcs	r3, r3
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058a0:	4641      	mov	r1, r8
 80058a2:	1851      	adds	r1, r2, r1
 80058a4:	6039      	str	r1, [r7, #0]
 80058a6:	4649      	mov	r1, r9
 80058a8:	414b      	adcs	r3, r1
 80058aa:	607b      	str	r3, [r7, #4]
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	f04f 0300 	mov.w	r3, #0
 80058b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058b8:	4659      	mov	r1, fp
 80058ba:	00cb      	lsls	r3, r1, #3
 80058bc:	4651      	mov	r1, sl
 80058be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058c2:	4651      	mov	r1, sl
 80058c4:	00ca      	lsls	r2, r1, #3
 80058c6:	4610      	mov	r0, r2
 80058c8:	4619      	mov	r1, r3
 80058ca:	4603      	mov	r3, r0
 80058cc:	4642      	mov	r2, r8
 80058ce:	189b      	adds	r3, r3, r2
 80058d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058d2:	464b      	mov	r3, r9
 80058d4:	460a      	mov	r2, r1
 80058d6:	eb42 0303 	adc.w	r3, r2, r3
 80058da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80058e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80058e8:	f04f 0200 	mov.w	r2, #0
 80058ec:	f04f 0300 	mov.w	r3, #0
 80058f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80058f4:	4649      	mov	r1, r9
 80058f6:	008b      	lsls	r3, r1, #2
 80058f8:	4641      	mov	r1, r8
 80058fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058fe:	4641      	mov	r1, r8
 8005900:	008a      	lsls	r2, r1, #2
 8005902:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005906:	f7fa fc67 	bl	80001d8 <__aeabi_uldivmod>
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	4b0d      	ldr	r3, [pc, #52]	@ (8005944 <UART_SetConfig+0x4e4>)
 8005910:	fba3 1302 	umull	r1, r3, r3, r2
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	2164      	movs	r1, #100	@ 0x64
 8005918:	fb01 f303 	mul.w	r3, r1, r3
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	011b      	lsls	r3, r3, #4
 8005920:	3332      	adds	r3, #50	@ 0x32
 8005922:	4a08      	ldr	r2, [pc, #32]	@ (8005944 <UART_SetConfig+0x4e4>)
 8005924:	fba2 2303 	umull	r2, r3, r2, r3
 8005928:	095b      	lsrs	r3, r3, #5
 800592a:	f003 020f 	and.w	r2, r3, #15
 800592e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4422      	add	r2, r4
 8005936:	609a      	str	r2, [r3, #8]
}
 8005938:	bf00      	nop
 800593a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800593e:	46bd      	mov	sp, r7
 8005940:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005944:	51eb851f 	.word	0x51eb851f

08005948 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f043 0201 	orr.w	r2, r3, #1
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f023 0201 	bic.w	r2, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	3301      	adds	r3, #1
 800599e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059a6:	d901      	bls.n	80059ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e01b      	b.n	80059e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	daf2      	bge.n	800599a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	019b      	lsls	r3, r3, #6
 80059bc:	f043 0220 	orr.w	r2, r3, #32
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3301      	adds	r3, #1
 80059c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059d0:	d901      	bls.n	80059d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e006      	b.n	80059e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	f003 0320 	and.w	r3, r3, #32
 80059de:	2b20      	cmp	r3, #32
 80059e0:	d0f0      	beq.n	80059c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059f8:	2300      	movs	r3, #0
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3301      	adds	r3, #1
 8005a00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a08:	d901      	bls.n	8005a0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e018      	b.n	8005a40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	daf2      	bge.n	80059fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2210      	movs	r2, #16
 8005a1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3301      	adds	r3, #1
 8005a24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a2c:	d901      	bls.n	8005a32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e006      	b.n	8005a40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	f003 0310 	and.w	r3, r3, #16
 8005a3a:	2b10      	cmp	r3, #16
 8005a3c:	d0f0      	beq.n	8005a20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b08b      	sub	sp, #44	@ 0x2c
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	4613      	mov	r3, r2
 8005a58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a62:	88fb      	ldrh	r3, [r7, #6]
 8005a64:	089b      	lsrs	r3, r3, #2
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a6a:	88fb      	ldrh	r3, [r7, #6]
 8005a6c:	f003 0303 	and.w	r3, r3, #3
 8005a70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a72:	2300      	movs	r3, #0
 8005a74:	623b      	str	r3, [r7, #32]
 8005a76:	e014      	b.n	8005aa2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a82:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a86:	3301      	adds	r3, #1
 8005a88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a92:	3301      	adds	r3, #1
 8005a94:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a98:	3301      	adds	r3, #1
 8005a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	623b      	str	r3, [r7, #32]
 8005aa2:	6a3a      	ldr	r2, [r7, #32]
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d3e6      	bcc.n	8005a78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005aaa:	8bfb      	ldrh	r3, [r7, #30]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01e      	beq.n	8005aee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005aba:	461a      	mov	r2, r3
 8005abc:	f107 0310 	add.w	r3, r7, #16
 8005ac0:	6812      	ldr	r2, [r2, #0]
 8005ac2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad4:	701a      	strb	r2, [r3, #0]
      i++;
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	623b      	str	r3, [r7, #32]
      pDest++;
 8005adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ade:	3301      	adds	r3, #1
 8005ae0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005ae2:	8bfb      	ldrh	r3, [r7, #30]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ae8:	8bfb      	ldrh	r3, [r7, #30]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1ea      	bne.n	8005ac4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	372c      	adds	r7, #44	@ 0x2c
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	4013      	ands	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b14:	68fb      	ldr	r3, [r7, #12]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b085      	sub	sp, #20
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005b32:	78fb      	ldrb	r3, [r7, #3]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005b42:	78fb      	ldrb	r3, [r7, #3]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	4013      	ands	r3, r2
 8005b54:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b56:	68bb      	ldr	r3, [r7, #8]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	f003 0301 	and.w	r3, r3, #1
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005b9e:	f023 0303 	bic.w	r3, r3, #3
 8005ba2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	78fb      	ldrb	r3, [r7, #3]
 8005bae:	f003 0303 	and.w	r3, r3, #3
 8005bb2:	68f9      	ldr	r1, [r7, #12]
 8005bb4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005bbc:	78fb      	ldrb	r3, [r7, #3]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d107      	bne.n	8005bd2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bc8:	461a      	mov	r2, r3
 8005bca:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005bce:	6053      	str	r3, [r2, #4]
 8005bd0:	e00c      	b.n	8005bec <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005bd2:	78fb      	ldrb	r3, [r7, #3]
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d107      	bne.n	8005be8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bde:	461a      	mov	r2, r3
 8005be0:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005be4:	6053      	str	r3, [r2, #4]
 8005be6:	e001      	b.n	8005bec <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	b29b      	uxth	r3, r3
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b089      	sub	sp, #36	@ 0x24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	460b      	mov	r3, r1
 8005c26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005c2c:	78fb      	ldrb	r3, [r7, #3]
 8005c2e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	0c9b      	lsrs	r3, r3, #18
 8005c44:	f003 0303 	and.w	r3, r3, #3
 8005c48:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	0fdb      	lsrs	r3, r3, #31
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	0fdb      	lsrs	r3, r3, #31
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f003 0320 	and.w	r3, r3, #32
 8005c7e:	2b20      	cmp	r3, #32
 8005c80:	d10d      	bne.n	8005c9e <USB_HC_Halt+0x82>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10a      	bne.n	8005c9e <USB_HC_Halt+0x82>
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d005      	beq.n	8005c9a <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d002      	beq.n	8005c9a <USB_HC_Halt+0x7e>
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d101      	bne.n	8005c9e <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e0d8      	b.n	8005e50 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <USB_HC_Halt+0x8e>
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d173      	bne.n	8005d92 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	0151      	lsls	r1, r2, #5
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	440a      	add	r2, r1
 8005cc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cc4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005cc8:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f003 0320 	and.w	r3, r3, #32
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d14a      	bne.n	8005d6c <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cda:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d133      	bne.n	8005d4a <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	0151      	lsls	r1, r2, #5
 8005cf4:	69fa      	ldr	r2, [r7, #28]
 8005cf6:	440a      	add	r2, r1
 8005cf8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cfc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005d00:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	0151      	lsls	r1, r2, #5
 8005d14:	69fa      	ldr	r2, [r7, #28]
 8005d16:	440a      	add	r2, r1
 8005d18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d20:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	3301      	adds	r3, #1
 8005d26:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d2e:	d82e      	bhi.n	8005d8e <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d46:	d0ec      	beq.n	8005d22 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d48:	e081      	b.n	8005e4e <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	0151      	lsls	r1, r2, #5
 8005d5c:	69fa      	ldr	r2, [r7, #28]
 8005d5e:	440a      	add	r2, r1
 8005d60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d64:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d68:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d6a:	e070      	b.n	8005e4e <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	0151      	lsls	r1, r2, #5
 8005d7e:	69fa      	ldr	r2, [r7, #28]
 8005d80:	440a      	add	r2, r1
 8005d82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d8a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d8c:	e05f      	b.n	8005e4e <USB_HC_Halt+0x232>
            break;
 8005d8e:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d90:	e05d      	b.n	8005e4e <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	0151      	lsls	r1, r2, #5
 8005da4:	69fa      	ldr	r2, [r7, #28]
 8005da6:	440a      	add	r2, r1
 8005da8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005dac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005db0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d133      	bne.n	8005e2a <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	0151      	lsls	r1, r2, #5
 8005dd4:	69fa      	ldr	r2, [r7, #28]
 8005dd6:	440a      	add	r2, r1
 8005dd8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ddc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005de0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005dfc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e00:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	3301      	adds	r3, #1
 8005e06:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e0e:	d81d      	bhi.n	8005e4c <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e26:	d0ec      	beq.n	8005e02 <USB_HC_Halt+0x1e6>
 8005e28:	e011      	b.n	8005e4e <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	0151      	lsls	r1, r2, #5
 8005e3c:	69fa      	ldr	r2, [r7, #28]
 8005e3e:	440a      	add	r2, r1
 8005e40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	e000      	b.n	8005e4e <USB_HC_Halt+0x232>
          break;
 8005e4c:	bf00      	nop
    }
  }

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3724      	adds	r7, #36	@ 0x24
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e64:	2300      	movs	r3, #0
 8005e66:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7ff fd7a 	bl	800596a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e76:	2110      	movs	r1, #16
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f7ff fd87 	bl	800598c <USB_FlushTxFifo>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7ff fdb1 	bl	80059f0 <USB_FlushRxFifo>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005e98:	2300      	movs	r3, #0
 8005e9a:	61bb      	str	r3, [r7, #24]
 8005e9c:	e01f      	b.n	8005ede <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005eb4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ebc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005ec4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	3301      	adds	r3, #1
 8005edc:	61bb      	str	r3, [r7, #24]
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	2b0f      	cmp	r3, #15
 8005ee2:	d9dc      	bls.n	8005e9e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	61bb      	str	r3, [r7, #24]
 8005ee8:	e034      	b.n	8005f54 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f00:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f08:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f10:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f1e:	461a      	mov	r2, r3
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3301      	adds	r3, #1
 8005f28:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f30:	d80c      	bhi.n	8005f4c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f48:	d0ec      	beq.n	8005f24 <USB_StopHost+0xc8>
 8005f4a:	e000      	b.n	8005f4e <USB_StopHost+0xf2>
        break;
 8005f4c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	3301      	adds	r3, #1
 8005f52:	61bb      	str	r3, [r7, #24]
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	2b0f      	cmp	r3, #15
 8005f58:	d9c7      	bls.n	8005eea <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f60:	461a      	mov	r2, r3
 8005f62:	f04f 33ff 	mov.w	r3, #4294967295
 8005f66:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f6e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7ff fce9 	bl	8005948 <USB_EnableGlobalInt>

  return ret;
 8005f76:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3720      	adds	r7, #32
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f804 	bl	8005fa4 <USBH_HandleSof>
}
 8005f9c:	bf00      	nop
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b0b      	cmp	r3, #11
 8005fb4:	d10a      	bne.n	8005fcc <USBH_HandleSof+0x28>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d005      	beq.n	8005fcc <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	4798      	blx	r3
  }
}
 8005fcc:	bf00      	nop
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8005fe4:	bf00      	nop
}
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8006008:	bf00      	nop
}
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f883 	bl	800616e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	791b      	ldrb	r3, [r3, #4]
 800606c:	4619      	mov	r1, r3
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f80b 	bl	800608a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	795b      	ldrb	r3, [r3, #5]
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f805 	bl	800608a <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	460b      	mov	r3, r1
 8006094:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006096:	78fb      	ldrb	r3, [r7, #3]
 8006098:	2b0f      	cmp	r3, #15
 800609a:	d80d      	bhi.n	80060b8 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800609c:	78fb      	ldrb	r3, [r7, #3]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	33e0      	adds	r3, #224	@ 0xe0
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	78fb      	ldrb	r3, [r7, #3]
 80060aa:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80060ae:	6879      	ldr	r1, [r7, #4]
 80060b0:	33e0      	adds	r3, #224	@ 0xe0
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	440b      	add	r3, r1
 80060b6:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b082      	sub	sp, #8
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7ff ff53 	bl	8005f80 <USBH_LL_IncTimer>
}
 80060da:	bf00      	nop
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b082      	sub	sp, #8
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff ff8f 	bl	8006014 <USBH_LL_Connect>
}
 80060f6:	bf00      	nop
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b082      	sub	sp, #8
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff ff98 	bl	8006042 <USBH_LL_Disconnect>
}
 8006112:	bf00      	nop
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800611a:	b480      	push	{r7}
 800611c:	b083      	sub	sp, #12
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	460b      	mov	r3, r1
 8006124:	70fb      	strb	r3, [r7, #3]
 8006126:	4613      	mov	r3, r2
 8006128:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800612a:	bf00      	nop
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b082      	sub	sp, #8
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff ff45 	bl	8005fd4 <USBH_LL_PortEnabled>
}
 800614a:	bf00      	nop
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b082      	sub	sp, #8
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006160:	4618      	mov	r0, r3
 8006162:	f7ff ff45 	bl	8005ff0 <USBH_LL_PortDisabled>
}
 8006166:	bf00      	nop
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8006184:	4618      	mov	r0, r3
 8006186:	f7fc f994 	bl	80024b2 <HAL_HCD_Stop>
 800618a:	4603      	mov	r3, r0
 800618c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800618e:	7bfb      	ldrb	r3, [r7, #15]
 8006190:	4618      	mov	r0, r3
 8006192:	f000 f807 	bl	80061a4 <USBH_Get_USB_Status>
 8006196:	4603      	mov	r3, r0
 8006198:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800619a:	7bbb      	ldrb	r3, [r7, #14]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	4603      	mov	r3, r0
 80061ac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80061b2:	79fb      	ldrb	r3, [r7, #7]
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d817      	bhi.n	80061e8 <USBH_Get_USB_Status+0x44>
 80061b8:	a201      	add	r2, pc, #4	@ (adr r2, 80061c0 <USBH_Get_USB_Status+0x1c>)
 80061ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061be:	bf00      	nop
 80061c0:	080061d1 	.word	0x080061d1
 80061c4:	080061d7 	.word	0x080061d7
 80061c8:	080061dd 	.word	0x080061dd
 80061cc:	080061e3 	.word	0x080061e3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	73fb      	strb	r3, [r7, #15]
    break;
 80061d4:	e00b      	b.n	80061ee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80061d6:	2302      	movs	r3, #2
 80061d8:	73fb      	strb	r3, [r7, #15]
    break;
 80061da:	e008      	b.n	80061ee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80061dc:	2301      	movs	r3, #1
 80061de:	73fb      	strb	r3, [r7, #15]
    break;
 80061e0:	e005      	b.n	80061ee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80061e2:	2302      	movs	r3, #2
 80061e4:	73fb      	strb	r3, [r7, #15]
    break;
 80061e6:	e002      	b.n	80061ee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80061e8:	2302      	movs	r3, #2
 80061ea:	73fb      	strb	r3, [r7, #15]
    break;
 80061ec:	bf00      	nop
  }
  return usb_status;
 80061ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <memset>:
 80061fc:	4402      	add	r2, r0
 80061fe:	4603      	mov	r3, r0
 8006200:	4293      	cmp	r3, r2
 8006202:	d100      	bne.n	8006206 <memset+0xa>
 8006204:	4770      	bx	lr
 8006206:	f803 1b01 	strb.w	r1, [r3], #1
 800620a:	e7f9      	b.n	8006200 <memset+0x4>

0800620c <strncmp>:
 800620c:	b510      	push	{r4, lr}
 800620e:	b16a      	cbz	r2, 800622c <strncmp+0x20>
 8006210:	3901      	subs	r1, #1
 8006212:	1884      	adds	r4, r0, r2
 8006214:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006218:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800621c:	429a      	cmp	r2, r3
 800621e:	d103      	bne.n	8006228 <strncmp+0x1c>
 8006220:	42a0      	cmp	r0, r4
 8006222:	d001      	beq.n	8006228 <strncmp+0x1c>
 8006224:	2a00      	cmp	r2, #0
 8006226:	d1f5      	bne.n	8006214 <strncmp+0x8>
 8006228:	1ad0      	subs	r0, r2, r3
 800622a:	bd10      	pop	{r4, pc}
 800622c:	4610      	mov	r0, r2
 800622e:	e7fc      	b.n	800622a <strncmp+0x1e>

08006230 <__libc_init_array>:
 8006230:	b570      	push	{r4, r5, r6, lr}
 8006232:	4d0d      	ldr	r5, [pc, #52]	@ (8006268 <__libc_init_array+0x38>)
 8006234:	4c0d      	ldr	r4, [pc, #52]	@ (800626c <__libc_init_array+0x3c>)
 8006236:	1b64      	subs	r4, r4, r5
 8006238:	10a4      	asrs	r4, r4, #2
 800623a:	2600      	movs	r6, #0
 800623c:	42a6      	cmp	r6, r4
 800623e:	d109      	bne.n	8006254 <__libc_init_array+0x24>
 8006240:	4d0b      	ldr	r5, [pc, #44]	@ (8006270 <__libc_init_array+0x40>)
 8006242:	4c0c      	ldr	r4, [pc, #48]	@ (8006274 <__libc_init_array+0x44>)
 8006244:	f000 f818 	bl	8006278 <_init>
 8006248:	1b64      	subs	r4, r4, r5
 800624a:	10a4      	asrs	r4, r4, #2
 800624c:	2600      	movs	r6, #0
 800624e:	42a6      	cmp	r6, r4
 8006250:	d105      	bne.n	800625e <__libc_init_array+0x2e>
 8006252:	bd70      	pop	{r4, r5, r6, pc}
 8006254:	f855 3b04 	ldr.w	r3, [r5], #4
 8006258:	4798      	blx	r3
 800625a:	3601      	adds	r6, #1
 800625c:	e7ee      	b.n	800623c <__libc_init_array+0xc>
 800625e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006262:	4798      	blx	r3
 8006264:	3601      	adds	r6, #1
 8006266:	e7f2      	b.n	800624e <__libc_init_array+0x1e>
 8006268:	08006520 	.word	0x08006520
 800626c:	08006520 	.word	0x08006520
 8006270:	08006520 	.word	0x08006520
 8006274:	08006524 	.word	0x08006524

08006278 <_init>:
 8006278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627a:	bf00      	nop
 800627c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800627e:	bc08      	pop	{r3}
 8006280:	469e      	mov	lr, r3
 8006282:	4770      	bx	lr

08006284 <_fini>:
 8006284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006286:	bf00      	nop
 8006288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800628a:	bc08      	pop	{r3}
 800628c:	469e      	mov	lr, r3
 800628e:	4770      	bx	lr
