
UART_programmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092fc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08009484  08009484  0000a484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094b4  080094b4  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080094b4  080094b4  0000a4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094bc  080094bc  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094bc  080094bc  0000a4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080094c0  080094c0  0000a4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080094c4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a64  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ae0  20000ae0  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001904f  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004325  00000000  00000000  000240fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e0  00000000  00000000  00028420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f36  00000000  00000000  00029800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002454c  00000000  00000000  0002a736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d073  00000000  00000000  0004ec82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce16f  00000000  00000000  0006bcf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00139e64  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054fc  00000000  00000000  00139ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0013f3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800946c 	.word	0x0800946c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800946c 	.word	0x0800946c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08c      	sub	sp, #48	@ 0x30
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 031c 	add.w	r3, r7, #28
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	61bb      	str	r3, [r7, #24]
 800050e:	4b72      	ldr	r3, [pc, #456]	@ (80006d8 <MX_GPIO_Init+0x1e4>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a71      	ldr	r2, [pc, #452]	@ (80006d8 <MX_GPIO_Init+0x1e4>)
 8000514:	f043 0310 	orr.w	r3, r3, #16
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b6f      	ldr	r3, [pc, #444]	@ (80006d8 <MX_GPIO_Init+0x1e4>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0310 	and.w	r3, r3, #16
 8000522:	61bb      	str	r3, [r7, #24]
 8000524:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
 800052a:	4b6b      	ldr	r3, [pc, #428]	@ (80006d8 <MX_GPIO_Init+0x1e4>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	4a6a      	ldr	r2, [pc, #424]	@ (80006d8 <MX_GPIO_Init+0x1e4>)
 8000530:	f043 0304 	orr.w	r3, r3, #4
 8000534:	6313      	str	r3, [r2, #48]	@ 0x30
 8000536:	4b68      	ldr	r3, [pc, #416]	@ (80006d8 <MX_GPIO_Init+0x1e4>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	f003 0304 	and.w	r3, r3, #4
 800053e:	617b      	str	r3, [r7, #20]
 8000540:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	613b      	str	r3, [r7, #16]
 8000546:	4b64      	ldr	r3, [pc, #400]	@ (80006d8 <MX_GPIO_Init+0x1e4>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	4a63      	ldr	r2, [pc, #396]	@ (80006d8 <MX_GPIO_Init+0x1e4>)
 800054c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000550:	6313      	str	r3, [r2, #48]	@ 0x30
 8000552:	4b61      	ldr	r3, [pc, #388]	@ (80006d8 <MX_GPIO_Init+0x1e4>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800055a:	613b      	str	r3, [r7, #16]
 800055c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	4b5d      	ldr	r3, [pc, #372]	@ (80006d8 <MX_GPIO_Init+0x1e4>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	4a5c      	ldr	r2, [pc, #368]	@ (80006d8 <MX_GPIO_Init+0x1e4>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	6313      	str	r3, [r2, #48]	@ 0x30
 800056e:	4b5a      	ldr	r3, [pc, #360]	@ (80006d8 <MX_GPIO_Init+0x1e4>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	4b56      	ldr	r3, [pc, #344]	@ (80006d8 <MX_GPIO_Init+0x1e4>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	4a55      	ldr	r2, [pc, #340]	@ (80006d8 <MX_GPIO_Init+0x1e4>)
 8000584:	f043 0302 	orr.w	r3, r3, #2
 8000588:	6313      	str	r3, [r2, #48]	@ 0x30
 800058a:	4b53      	ldr	r3, [pc, #332]	@ (80006d8 <MX_GPIO_Init+0x1e4>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	f003 0302 	and.w	r3, r3, #2
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	4b4f      	ldr	r3, [pc, #316]	@ (80006d8 <MX_GPIO_Init+0x1e4>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a4e      	ldr	r2, [pc, #312]	@ (80006d8 <MX_GPIO_Init+0x1e4>)
 80005a0:	f043 0308 	orr.w	r3, r3, #8
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b4c      	ldr	r3, [pc, #304]	@ (80006d8 <MX_GPIO_Init+0x1e4>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f003 0308 	and.w	r3, r3, #8
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2108      	movs	r1, #8
 80005b6:	4849      	ldr	r0, [pc, #292]	@ (80006dc <MX_GPIO_Init+0x1e8>)
 80005b8:	f000 ff9e 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2101      	movs	r1, #1
 80005c0:	4847      	ldr	r0, [pc, #284]	@ (80006e0 <MX_GPIO_Init+0x1ec>)
 80005c2:	f000 ff99 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005c6:	2200      	movs	r2, #0
 80005c8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80005cc:	4845      	ldr	r0, [pc, #276]	@ (80006e4 <MX_GPIO_Init+0x1f0>)
 80005ce:	f000 ff93 	bl	80014f8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005d2:	2308      	movs	r3, #8
 80005d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2300      	movs	r3, #0
 80005e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	4619      	mov	r1, r3
 80005e8:	483c      	ldr	r0, [pc, #240]	@ (80006dc <MX_GPIO_Init+0x1e8>)
 80005ea:	f000 fdd1 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005ee:	2301      	movs	r3, #1
 80005f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f2:	2301      	movs	r3, #1
 80005f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	2300      	movs	r3, #0
 80005fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	4619      	mov	r1, r3
 8000604:	4836      	ldr	r0, [pc, #216]	@ (80006e0 <MX_GPIO_Init+0x1ec>)
 8000606:	f000 fdc3 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800060a:	2308      	movs	r3, #8
 800060c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060e:	2302      	movs	r3, #2
 8000610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	2300      	movs	r3, #0
 8000618:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800061a:	2305      	movs	r3, #5
 800061c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	4619      	mov	r1, r3
 8000624:	482e      	ldr	r0, [pc, #184]	@ (80006e0 <MX_GPIO_Init+0x1ec>)
 8000626:	f000 fdb3 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800062a:	2301      	movs	r3, #1
 800062c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800062e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	4619      	mov	r1, r3
 800063e:	482a      	ldr	r0, [pc, #168]	@ (80006e8 <MX_GPIO_Init+0x1f4>)
 8000640:	f000 fda6 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000644:	2304      	movs	r3, #4
 8000646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000648:	2300      	movs	r3, #0
 800064a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000650:	f107 031c 	add.w	r3, r7, #28
 8000654:	4619      	mov	r1, r3
 8000656:	4825      	ldr	r0, [pc, #148]	@ (80006ec <MX_GPIO_Init+0x1f8>)
 8000658:	f000 fd9a 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800065c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000662:	2302      	movs	r3, #2
 8000664:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2300      	movs	r3, #0
 800066c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800066e:	2305      	movs	r3, #5
 8000670:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	481c      	ldr	r0, [pc, #112]	@ (80006ec <MX_GPIO_Init+0x1f8>)
 800067a:	f000 fd89 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800067e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000682:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	2301      	movs	r3, #1
 8000686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2300      	movs	r3, #0
 800068e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4619      	mov	r1, r3
 8000696:	4813      	ldr	r0, [pc, #76]	@ (80006e4 <MX_GPIO_Init+0x1f0>)
 8000698:	f000 fd7a 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800069c:	2320      	movs	r3, #32
 800069e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a0:	2300      	movs	r3, #0
 80006a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 031c 	add.w	r3, r7, #28
 80006ac:	4619      	mov	r1, r3
 80006ae:	480d      	ldr	r0, [pc, #52]	@ (80006e4 <MX_GPIO_Init+0x1f0>)
 80006b0:	f000 fd6e 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006b8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80006bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	4619      	mov	r1, r3
 80006c8:	4804      	ldr	r0, [pc, #16]	@ (80006dc <MX_GPIO_Init+0x1e8>)
 80006ca:	f000 fd61 	bl	8001190 <HAL_GPIO_Init>

}
 80006ce:	bf00      	nop
 80006d0:	3730      	adds	r7, #48	@ 0x30
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40020800 	.word	0x40020800
 80006e4:	40020c00 	.word	0x40020c00
 80006e8:	40020000 	.word	0x40020000
 80006ec:	40020400 	.word	0x40020400

080006f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f4:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <MX_I2C1_Init+0x50>)
 80006f6:	4a13      	ldr	r2, [pc, #76]	@ (8000744 <MX_I2C1_Init+0x54>)
 80006f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006fa:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <MX_I2C1_Init+0x50>)
 80006fc:	4a12      	ldr	r2, [pc, #72]	@ (8000748 <MX_I2C1_Init+0x58>)
 80006fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000700:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000706:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070c:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <MX_I2C1_Init+0x50>)
 800070e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000712:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000714:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800071a:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000720:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800072c:	4804      	ldr	r0, [pc, #16]	@ (8000740 <MX_I2C1_Init+0x50>)
 800072e:	f003 f80d 	bl	800374c <HAL_I2C_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000738:	f000 f9b8 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000098 	.word	0x20000098
 8000744:	40005400 	.word	0x40005400
 8000748:	000186a0 	.word	0x000186a0

0800074c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	@ 0x28
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a19      	ldr	r2, [pc, #100]	@ (80007d0 <HAL_I2C_MspInit+0x84>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d12c      	bne.n	80007c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <HAL_I2C_MspInit+0x88>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a17      	ldr	r2, [pc, #92]	@ (80007d4 <HAL_I2C_MspInit+0x88>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <HAL_I2C_MspInit+0x88>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800078a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800078e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000790:	2312      	movs	r3, #18
 8000792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000794:	2301      	movs	r3, #1
 8000796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800079c:	2304      	movs	r3, #4
 800079e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	480c      	ldr	r0, [pc, #48]	@ (80007d8 <HAL_I2C_MspInit+0x8c>)
 80007a8:	f000 fcf2 	bl	8001190 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <HAL_I2C_MspInit+0x88>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b4:	4a07      	ldr	r2, [pc, #28]	@ (80007d4 <HAL_I2C_MspInit+0x88>)
 80007b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80007bc:	4b05      	ldr	r3, [pc, #20]	@ (80007d4 <HAL_I2C_MspInit+0x88>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007c8:	bf00      	nop
 80007ca:	3728      	adds	r7, #40	@ 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40005400 	.word	0x40005400
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40020400 	.word	0x40020400

080007dc <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007e0:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <MX_I2S3_Init+0x54>)
 80007e2:	4a14      	ldr	r2, [pc, #80]	@ (8000834 <MX_I2S3_Init+0x58>)
 80007e4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007e6:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <MX_I2S3_Init+0x54>)
 80007e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007ec:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ee:	4b10      	ldr	r3, [pc, #64]	@ (8000830 <MX_I2S3_Init+0x54>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_I2S3_Init+0x54>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <MX_I2S3_Init+0x54>)
 80007fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000800:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000802:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <MX_I2S3_Init+0x54>)
 8000804:	4a0c      	ldr	r2, [pc, #48]	@ (8000838 <MX_I2S3_Init+0x5c>)
 8000806:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000808:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_I2S3_Init+0x54>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800080e:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <MX_I2S3_Init+0x54>)
 8000810:	2200      	movs	r2, #0
 8000812:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_I2S3_Init+0x54>)
 8000816:	2200      	movs	r2, #0
 8000818:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	@ (8000830 <MX_I2S3_Init+0x54>)
 800081c:	f003 f8da 	bl	80039d4 <HAL_I2S_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000826:	f000 f941 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000ec 	.word	0x200000ec
 8000834:	40003c00 	.word	0x40003c00
 8000838:	00017700 	.word	0x00017700

0800083c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08e      	sub	sp, #56	@ 0x38
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a31      	ldr	r2, [pc, #196]	@ (800092c <HAL_I2S_MspInit+0xf0>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d15a      	bne.n	8000922 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800086c:	2301      	movs	r3, #1
 800086e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000870:	23c0      	movs	r3, #192	@ 0xc0
 8000872:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000874:	2302      	movs	r3, #2
 8000876:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4618      	mov	r0, r3
 800087e:	f004 f9e1 	bl	8004c44 <HAL_RCCEx_PeriphCLKConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000888:	f000 f910 	bl	8000aac <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	4b27      	ldr	r3, [pc, #156]	@ (8000930 <HAL_I2S_MspInit+0xf4>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000894:	4a26      	ldr	r2, [pc, #152]	@ (8000930 <HAL_I2S_MspInit+0xf4>)
 8000896:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800089a:	6413      	str	r3, [r2, #64]	@ 0x40
 800089c:	4b24      	ldr	r3, [pc, #144]	@ (8000930 <HAL_I2S_MspInit+0xf4>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	4b20      	ldr	r3, [pc, #128]	@ (8000930 <HAL_I2S_MspInit+0xf4>)
 80008ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b0:	4a1f      	ldr	r2, [pc, #124]	@ (8000930 <HAL_I2S_MspInit+0xf4>)
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000930 <HAL_I2S_MspInit+0xf4>)
 80008ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <HAL_I2S_MspInit+0xf4>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008cc:	4a18      	ldr	r2, [pc, #96]	@ (8000930 <HAL_I2S_MspInit+0xf4>)
 80008ce:	f043 0304 	orr.w	r3, r3, #4
 80008d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d4:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <HAL_I2S_MspInit+0xf4>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008e0:	2310      	movs	r3, #16
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f0:	2306      	movs	r3, #6
 80008f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f8:	4619      	mov	r1, r3
 80008fa:	480e      	ldr	r0, [pc, #56]	@ (8000934 <HAL_I2S_MspInit+0xf8>)
 80008fc:	f000 fc48 	bl	8001190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000900:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000912:	2306      	movs	r3, #6
 8000914:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000916:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800091a:	4619      	mov	r1, r3
 800091c:	4806      	ldr	r0, [pc, #24]	@ (8000938 <HAL_I2S_MspInit+0xfc>)
 800091e:	f000 fc37 	bl	8001190 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000922:	bf00      	nop
 8000924:	3738      	adds	r7, #56	@ 0x38
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40003c00 	.word	0x40003c00
 8000930:	40023800 	.word	0x40023800
 8000934:	40020000 	.word	0x40020000
 8000938:	40020800 	.word	0x40020800

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b087      	sub	sp, #28
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

    bool data_sent = false;
 8000942:	2300      	movs	r3, #0
 8000944:	75fb      	strb	r3, [r7, #23]
    char data[20] = "hello world\n\r";
 8000946:	4b20      	ldr	r3, [pc, #128]	@ (80009c8 <main+0x8c>)
 8000948:	463c      	mov	r4, r7
 800094a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800094c:	c407      	stmia	r4!, {r0, r1, r2}
 800094e:	8023      	strh	r3, [r4, #0]
 8000950:	f107 030e 	add.w	r3, r7, #14
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	809a      	strh	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095a:	f000 fa71 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095e:	f000 f83b 	bl	80009d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000962:	f7ff fdc7 	bl	80004f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000966:	f7ff fec3 	bl	80006f0 <MX_I2C1_Init>
  MX_I2S3_Init();
 800096a:	f7ff ff37 	bl	80007dc <MX_I2S3_Init>
  MX_SPI1_Init();
 800096e:	f000 f8a3 	bl	8000ab8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000972:	f008 f937 	bl	8008be4 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000976:	f000 f9c7 	bl	8000d08 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800097a:	f008 f959 	bl	8008c30 <MX_USB_HOST_Process>
    if(HAL_GPIO_ReadPin(B1_GPIO_Port ,B1_Pin ) == GPIO_PIN_SET){
 800097e:	2101      	movs	r1, #1
 8000980:	4812      	ldr	r0, [pc, #72]	@ (80009cc <main+0x90>)
 8000982:	f000 fda1 	bl	80014c8 <HAL_GPIO_ReadPin>
 8000986:	4603      	mov	r3, r0
 8000988:	2b01      	cmp	r3, #1
 800098a:	d114      	bne.n	80009b6 <main+0x7a>
  	  HAL_GPIO_WritePin(LD4_GPIO_Port , LD4_Pin , GPIO_PIN_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000992:	480f      	ldr	r0, [pc, #60]	@ (80009d0 <main+0x94>)
 8000994:	f000 fdb0 	bl	80014f8 <HAL_GPIO_WritePin>
  	  if(data_sent == false){
 8000998:	7dfb      	ldrb	r3, [r7, #23]
 800099a:	f083 0301 	eor.w	r3, r3, #1
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d0ea      	beq.n	800097a <main+0x3e>
  	  	HAL_UART_Transmit(&huart2,data,20,3);
 80009a4:	4639      	mov	r1, r7
 80009a6:	2303      	movs	r3, #3
 80009a8:	2214      	movs	r2, #20
 80009aa:	480a      	ldr	r0, [pc, #40]	@ (80009d4 <main+0x98>)
 80009ac:	f004 fb65 	bl	800507a <HAL_UART_Transmit>
  	  	data_sent = true;
 80009b0:	2301      	movs	r3, #1
 80009b2:	75fb      	strb	r3, [r7, #23]
 80009b4:	e7e1      	b.n	800097a <main+0x3e>
  	  }

    }
    else{
  	  HAL_GPIO_WritePin(LD4_GPIO_Port , LD4_Pin , GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009bc:	4804      	ldr	r0, [pc, #16]	@ (80009d0 <main+0x94>)
 80009be:	f000 fd9b 	bl	80014f8 <HAL_GPIO_WritePin>
    	data_sent = false;
 80009c2:	2300      	movs	r3, #0
 80009c4:	75fb      	strb	r3, [r7, #23]
    MX_USB_HOST_Process();
 80009c6:	e7d8      	b.n	800097a <main+0x3e>
 80009c8:	08009484 	.word	0x08009484
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020c00 	.word	0x40020c00
 80009d4:	20000190 	.word	0x20000190

080009d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b094      	sub	sp, #80	@ 0x50
 80009dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009de:	f107 0320 	add.w	r3, r7, #32
 80009e2:	2230      	movs	r2, #48	@ 0x30
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f008 fcb2 	bl	8009350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	4b28      	ldr	r3, [pc, #160]	@ (8000aa4 <SystemClock_Config+0xcc>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a04:	4a27      	ldr	r2, [pc, #156]	@ (8000aa4 <SystemClock_Config+0xcc>)
 8000a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0c:	4b25      	ldr	r3, [pc, #148]	@ (8000aa4 <SystemClock_Config+0xcc>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	4b22      	ldr	r3, [pc, #136]	@ (8000aa8 <SystemClock_Config+0xd0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a21      	ldr	r2, [pc, #132]	@ (8000aa8 <SystemClock_Config+0xd0>)
 8000a22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa8 <SystemClock_Config+0xd0>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a34:	2301      	movs	r3, #1
 8000a36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a42:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a48:	2308      	movs	r3, #8
 8000a4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a4c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a50:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a52:	2302      	movs	r3, #2
 8000a54:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a56:	2307      	movs	r3, #7
 8000a58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5a:	f107 0320 	add.w	r3, r7, #32
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f003 fc58 	bl	8004314 <HAL_RCC_OscConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a6a:	f000 f81f 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6e:	230f      	movs	r3, #15
 8000a70:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a72:	2302      	movs	r3, #2
 8000a74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a7a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	2105      	movs	r1, #5
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f003 feb9 	bl	8004804 <HAL_RCC_ClockConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a98:	f000 f808 	bl	8000aac <Error_Handler>
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	3750      	adds	r7, #80	@ 0x50
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40007000 	.word	0x40007000

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <Error_Handler+0x8>

08000ab8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000abc:	4b17      	ldr	r3, [pc, #92]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000abe:	4a18      	ldr	r2, [pc, #96]	@ (8000b20 <MX_SPI1_Init+0x68>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ac2:	4b16      	ldr	r3, [pc, #88]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000ac4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ac8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aca:	4b14      	ldr	r3, [pc, #80]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000ae4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ae8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aea:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000afc:	4b07      	ldr	r3, [pc, #28]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000b04:	220a      	movs	r2, #10
 8000b06:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b08:	4804      	ldr	r0, [pc, #16]	@ (8000b1c <MX_SPI1_Init+0x64>)
 8000b0a:	f004 f9dd 	bl	8004ec8 <HAL_SPI_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b14:	f7ff ffca 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000134 	.word	0x20000134
 8000b20:	40013000 	.word	0x40013000

08000b24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	@ 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a19      	ldr	r2, [pc, #100]	@ (8000ba8 <HAL_SPI_MspInit+0x84>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d12b      	bne.n	8000b9e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b18      	ldr	r3, [pc, #96]	@ (8000bac <HAL_SPI_MspInit+0x88>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4e:	4a17      	ldr	r2, [pc, #92]	@ (8000bac <HAL_SPI_MspInit+0x88>)
 8000b50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <HAL_SPI_MspInit+0x88>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <HAL_SPI_MspInit+0x88>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	4a10      	ldr	r2, [pc, #64]	@ (8000bac <HAL_SPI_MspInit+0x88>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b72:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <HAL_SPI_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b7e:	23e0      	movs	r3, #224	@ 0xe0
 8000b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b8e:	2305      	movs	r3, #5
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	@ (8000bb0 <HAL_SPI_MspInit+0x8c>)
 8000b9a:	f000 faf9 	bl	8001190 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	@ 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40013000 	.word	0x40013000
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020000 	.word	0x40020000

08000bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b10      	ldr	r3, [pc, #64]	@ (8000c00 <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c00 <HAL_MspInit+0x4c>)
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bca:	4b0d      	ldr	r3, [pc, #52]	@ (8000c00 <HAL_MspInit+0x4c>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bde:	4a08      	ldr	r2, [pc, #32]	@ (8000c00 <HAL_MspInit+0x4c>)
 8000be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_MspInit+0x4c>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bf2:	2007      	movs	r0, #7
 8000bf4:	f000 fa8a 	bl	800110c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40023800 	.word	0x40023800

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <NMI_Handler+0x4>

08000c0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <BusFault_Handler+0x4>

08000c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <UsageFault_Handler+0x4>

08000c2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5a:	f000 f943 	bl	8000ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c68:	4802      	ldr	r0, [pc, #8]	@ (8000c74 <OTG_FS_IRQHandler+0x10>)
 8000c6a:	f000 ff1b 	bl	8001aa4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200005b8 	.word	0x200005b8

08000c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c80:	4a14      	ldr	r2, [pc, #80]	@ (8000cd4 <_sbrk+0x5c>)
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <_sbrk+0x60>)
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c8c:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c94:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <_sbrk+0x64>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	@ (8000ce0 <_sbrk+0x68>)
 8000c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9a:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d207      	bcs.n	8000cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca8:	f008 fb6a 	bl	8009380 <__errno>
 8000cac:	4603      	mov	r3, r0
 8000cae:	220c      	movs	r2, #12
 8000cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb6:	e009      	b.n	8000ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cbe:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a05      	ldr	r2, [pc, #20]	@ (8000cdc <_sbrk+0x64>)
 8000cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20020000 	.word	0x20020000
 8000cd8:	00000400 	.word	0x00000400
 8000cdc:	2000018c 	.word	0x2000018c
 8000ce0:	20000ae0 	.word	0x20000ae0

08000ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <SystemInit+0x20>)
 8000cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cee:	4a05      	ldr	r2, [pc, #20]	@ (8000d04 <SystemInit+0x20>)
 8000cf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <MX_USART2_UART_Init+0x50>)
 8000d10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d12:	4b10      	ldr	r3, [pc, #64]	@ (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d2e:	220c      	movs	r2, #12
 8000d30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d32:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d3e:	4805      	ldr	r0, [pc, #20]	@ (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d40:	f004 f94b 	bl	8004fda <HAL_UART_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d4a:	f7ff feaf 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000190 	.word	0x20000190
 8000d58:	40004400 	.word	0x40004400

08000d5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	@ 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a19      	ldr	r2, [pc, #100]	@ (8000de0 <HAL_UART_MspInit+0x84>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d12b      	bne.n	8000dd6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <HAL_UART_MspInit+0x88>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d86:	4a17      	ldr	r2, [pc, #92]	@ (8000de4 <HAL_UART_MspInit+0x88>)
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <HAL_UART_MspInit+0x88>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <HAL_UART_MspInit+0x88>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	4a10      	ldr	r2, [pc, #64]	@ (8000de4 <HAL_UART_MspInit+0x88>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000daa:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <HAL_UART_MspInit+0x88>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000db6:	230c      	movs	r3, #12
 8000db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	@ (8000de8 <HAL_UART_MspInit+0x8c>)
 8000dd2:	f000 f9dd 	bl	8001190 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	@ 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40004400 	.word	0x40004400
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020000 	.word	0x40020000

08000dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e24 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000df0:	f7ff ff78 	bl	8000ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df4:	480c      	ldr	r0, [pc, #48]	@ (8000e28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000df6:	490d      	ldr	r1, [pc, #52]	@ (8000e2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1a:	f008 fab7 	bl	800938c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1e:	f7ff fd8d 	bl	800093c <main>
  bx  lr    
 8000e22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e30:	080094c4 	.word	0x080094c4
  ldr r2, =_sbss
 8000e34:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e38:	20000ae0 	.word	0x20000ae0

08000e3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC_IRQHandler>
	...

08000e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e44:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0d      	ldr	r2, [pc, #52]	@ (8000e80 <HAL_Init+0x40>)
 8000e4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e50:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0a      	ldr	r2, [pc, #40]	@ (8000e80 <HAL_Init+0x40>)
 8000e56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a07      	ldr	r2, [pc, #28]	@ (8000e80 <HAL_Init+0x40>)
 8000e62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 f94f 	bl	800110c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 f808 	bl	8000e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e74:	f7ff fe9e 	bl	8000bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023c00 	.word	0x40023c00

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <HAL_InitTick+0x54>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <HAL_InitTick+0x58>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f967 	bl	8001176 <HAL_SYSTICK_Config>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00e      	b.n	8000ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d80a      	bhi.n	8000ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	f000 f92f 	bl	8001122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec4:	4a06      	ldr	r2, [pc, #24]	@ (8000ee0 <HAL_InitTick+0x5c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e000      	b.n	8000ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000004 	.word	0x20000004

08000ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <HAL_IncTick+0x20>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <HAL_IncTick+0x24>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a04      	ldr	r2, [pc, #16]	@ (8000f08 <HAL_IncTick+0x24>)
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008
 8000f08:	200001d8 	.word	0x200001d8

08000f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f10:	4b03      	ldr	r3, [pc, #12]	@ (8000f20 <HAL_GetTick+0x14>)
 8000f12:	681b      	ldr	r3, [r3, #0]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	200001d8 	.word	0x200001d8

08000f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff ffee 	bl	8000f0c <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f3c:	d005      	beq.n	8000f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <HAL_Delay+0x44>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f4a:	bf00      	nop
 8000f4c:	f7ff ffde 	bl	8000f0c <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8f7      	bhi.n	8000f4c <HAL_Delay+0x28>
  {
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000008 	.word	0x20000008

08000f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9e:	4a04      	ldr	r2, [pc, #16]	@ (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	60d3      	str	r3, [r2, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb8:	4b04      	ldr	r3, [pc, #16]	@ (8000fcc <__NVIC_GetPriorityGrouping+0x18>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	f003 0307 	and.w	r3, r3, #7
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	db0b      	blt.n	8000ffa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	f003 021f 	and.w	r2, r3, #31
 8000fe8:	4907      	ldr	r1, [pc, #28]	@ (8001008 <__NVIC_EnableIRQ+0x38>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	095b      	lsrs	r3, r3, #5
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000e100 	.word	0xe000e100

0800100c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	2b00      	cmp	r3, #0
 800101e:	db0a      	blt.n	8001036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	b2da      	uxtb	r2, r3
 8001024:	490c      	ldr	r1, [pc, #48]	@ (8001058 <__NVIC_SetPriority+0x4c>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	0112      	lsls	r2, r2, #4
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	440b      	add	r3, r1
 8001030:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001034:	e00a      	b.n	800104c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4908      	ldr	r1, [pc, #32]	@ (800105c <__NVIC_SetPriority+0x50>)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	3b04      	subs	r3, #4
 8001044:	0112      	lsls	r2, r2, #4
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	440b      	add	r3, r1
 800104a:	761a      	strb	r2, [r3, #24]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000e100 	.word	0xe000e100
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	@ 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f1c3 0307 	rsb	r3, r3, #7
 800107a:	2b04      	cmp	r3, #4
 800107c:	bf28      	it	cs
 800107e:	2304      	movcs	r3, #4
 8001080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3304      	adds	r3, #4
 8001086:	2b06      	cmp	r3, #6
 8001088:	d902      	bls.n	8001090 <NVIC_EncodePriority+0x30>
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3b03      	subs	r3, #3
 800108e:	e000      	b.n	8001092 <NVIC_EncodePriority+0x32>
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	f04f 32ff 	mov.w	r2, #4294967295
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43da      	mvns	r2, r3
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	401a      	ands	r2, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa01 f303 	lsl.w	r3, r1, r3
 80010b2:	43d9      	mvns	r1, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	4313      	orrs	r3, r2
         );
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3724      	adds	r7, #36	@ 0x24
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010d8:	d301      	bcc.n	80010de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010da:	2301      	movs	r3, #1
 80010dc:	e00f      	b.n	80010fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010de:	4a0a      	ldr	r2, [pc, #40]	@ (8001108 <SysTick_Config+0x40>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e6:	210f      	movs	r1, #15
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f7ff ff8e 	bl	800100c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <SysTick_Config+0x40>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f6:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <SysTick_Config+0x40>)
 80010f8:	2207      	movs	r2, #7
 80010fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	e000e010 	.word	0xe000e010

0800110c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff29 	bl	8000f6c <__NVIC_SetPriorityGrouping>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001134:	f7ff ff3e 	bl	8000fb4 <__NVIC_GetPriorityGrouping>
 8001138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	6978      	ldr	r0, [r7, #20]
 8001140:	f7ff ff8e 	bl	8001060 <NVIC_EncodePriority>
 8001144:	4602      	mov	r2, r0
 8001146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff5d 	bl	800100c <__NVIC_SetPriority>
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff31 	bl	8000fd0 <__NVIC_EnableIRQ>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffa2 	bl	80010c8 <SysTick_Config>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	@ 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	e16b      	b.n	8001484 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	f040 815a 	bne.w	800147e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d005      	beq.n	80011e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d130      	bne.n	8001244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	2203      	movs	r2, #3
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001218:	2201      	movs	r2, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	f003 0201 	and.w	r2, r3, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b03      	cmp	r3, #3
 800124e:	d017      	beq.n	8001280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d123      	bne.n	80012d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	08da      	lsrs	r2, r3, #3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3208      	adds	r2, #8
 8001294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	691a      	ldr	r2, [r3, #16]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	08da      	lsrs	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3208      	adds	r2, #8
 80012ce:	69b9      	ldr	r1, [r7, #24]
 80012d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0203 	and.w	r2, r3, #3
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80b4 	beq.w	800147e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b60      	ldr	r3, [pc, #384]	@ (800149c <HAL_GPIO_Init+0x30c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131e:	4a5f      	ldr	r2, [pc, #380]	@ (800149c <HAL_GPIO_Init+0x30c>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001324:	6453      	str	r3, [r2, #68]	@ 0x44
 8001326:	4b5d      	ldr	r3, [pc, #372]	@ (800149c <HAL_GPIO_Init+0x30c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001332:	4a5b      	ldr	r2, [pc, #364]	@ (80014a0 <HAL_GPIO_Init+0x310>)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	220f      	movs	r2, #15
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a52      	ldr	r2, [pc, #328]	@ (80014a4 <HAL_GPIO_Init+0x314>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d02b      	beq.n	80013b6 <HAL_GPIO_Init+0x226>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a51      	ldr	r2, [pc, #324]	@ (80014a8 <HAL_GPIO_Init+0x318>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d025      	beq.n	80013b2 <HAL_GPIO_Init+0x222>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a50      	ldr	r2, [pc, #320]	@ (80014ac <HAL_GPIO_Init+0x31c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d01f      	beq.n	80013ae <HAL_GPIO_Init+0x21e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4f      	ldr	r2, [pc, #316]	@ (80014b0 <HAL_GPIO_Init+0x320>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d019      	beq.n	80013aa <HAL_GPIO_Init+0x21a>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4e      	ldr	r2, [pc, #312]	@ (80014b4 <HAL_GPIO_Init+0x324>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d013      	beq.n	80013a6 <HAL_GPIO_Init+0x216>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4d      	ldr	r2, [pc, #308]	@ (80014b8 <HAL_GPIO_Init+0x328>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d00d      	beq.n	80013a2 <HAL_GPIO_Init+0x212>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4c      	ldr	r2, [pc, #304]	@ (80014bc <HAL_GPIO_Init+0x32c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d007      	beq.n	800139e <HAL_GPIO_Init+0x20e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4b      	ldr	r2, [pc, #300]	@ (80014c0 <HAL_GPIO_Init+0x330>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d101      	bne.n	800139a <HAL_GPIO_Init+0x20a>
 8001396:	2307      	movs	r3, #7
 8001398:	e00e      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 800139a:	2308      	movs	r3, #8
 800139c:	e00c      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 800139e:	2306      	movs	r3, #6
 80013a0:	e00a      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013a2:	2305      	movs	r3, #5
 80013a4:	e008      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013a6:	2304      	movs	r3, #4
 80013a8:	e006      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013aa:	2303      	movs	r3, #3
 80013ac:	e004      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e002      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013b6:	2300      	movs	r3, #0
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	f002 0203 	and.w	r2, r2, #3
 80013be:	0092      	lsls	r2, r2, #2
 80013c0:	4093      	lsls	r3, r2
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c8:	4935      	ldr	r1, [pc, #212]	@ (80014a0 <HAL_GPIO_Init+0x310>)
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	089b      	lsrs	r3, r3, #2
 80013ce:	3302      	adds	r3, #2
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013d6:	4b3b      	ldr	r3, [pc, #236]	@ (80014c4 <HAL_GPIO_Init+0x334>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013fa:	4a32      	ldr	r2, [pc, #200]	@ (80014c4 <HAL_GPIO_Init+0x334>)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001400:	4b30      	ldr	r3, [pc, #192]	@ (80014c4 <HAL_GPIO_Init+0x334>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001424:	4a27      	ldr	r2, [pc, #156]	@ (80014c4 <HAL_GPIO_Init+0x334>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800142a:	4b26      	ldr	r3, [pc, #152]	@ (80014c4 <HAL_GPIO_Init+0x334>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800144e:	4a1d      	ldr	r2, [pc, #116]	@ (80014c4 <HAL_GPIO_Init+0x334>)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001454:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <HAL_GPIO_Init+0x334>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001478:	4a12      	ldr	r2, [pc, #72]	@ (80014c4 <HAL_GPIO_Init+0x334>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3301      	adds	r3, #1
 8001482:	61fb      	str	r3, [r7, #28]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	2b0f      	cmp	r3, #15
 8001488:	f67f ae90 	bls.w	80011ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3724      	adds	r7, #36	@ 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800
 80014a0:	40013800 	.word	0x40013800
 80014a4:	40020000 	.word	0x40020000
 80014a8:	40020400 	.word	0x40020400
 80014ac:	40020800 	.word	0x40020800
 80014b0:	40020c00 	.word	0x40020c00
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40021400 	.word	0x40021400
 80014bc:	40021800 	.word	0x40021800
 80014c0:	40021c00 	.word	0x40021c00
 80014c4:	40013c00 	.word	0x40013c00

080014c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	4013      	ands	r3, r2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	e001      	b.n	80014ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	807b      	strh	r3, [r7, #2]
 8001504:	4613      	mov	r3, r2
 8001506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001508:	787b      	ldrb	r3, [r7, #1]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800150e:	887a      	ldrh	r2, [r7, #2]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001514:	e003      	b.n	800151e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001516:	887b      	ldrh	r3, [r7, #2]
 8001518:	041a      	lsls	r2, r3, #16
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	619a      	str	r2, [r3, #24]
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af02      	add	r7, sp, #8
 8001530:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e059      	b.n	80015f0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d106      	bne.n	800155c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f007 fba2 	bl	8008ca0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2203      	movs	r2, #3
 8001560:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800156a:	d102      	bne.n	8001572 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f004 f9af 	bl	80058da <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7c1a      	ldrb	r2, [r3, #16]
 8001584:	f88d 2000 	strb.w	r2, [sp]
 8001588:	3304      	adds	r3, #4
 800158a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800158c:	f004 f930 	bl	80057f0 <USB_CoreInit>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d005      	beq.n	80015a2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2202      	movs	r2, #2
 800159a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e026      	b.n	80015f0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2101      	movs	r1, #1
 80015a8:	4618      	mov	r0, r3
 80015aa:	f004 f9a7 	bl	80058fc <USB_SetCurrentMode>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2202      	movs	r2, #2
 80015b8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e017      	b.n	80015f0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6818      	ldr	r0, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	7c1a      	ldrb	r2, [r3, #16]
 80015c8:	f88d 2000 	strb.w	r2, [sp]
 80015cc:	3304      	adds	r3, #4
 80015ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015d0:	f004 fb50 	bl	8005c74 <USB_HostInit>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2202      	movs	r2, #2
 80015de:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e004      	b.n	80015f0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b08b      	sub	sp, #44	@ 0x2c
 80015fc:	af04      	add	r7, sp, #16
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	4608      	mov	r0, r1
 8001602:	4611      	mov	r1, r2
 8001604:	461a      	mov	r2, r3
 8001606:	4603      	mov	r3, r0
 8001608:	70fb      	strb	r3, [r7, #3]
 800160a:	460b      	mov	r3, r1
 800160c:	70bb      	strb	r3, [r7, #2]
 800160e:	4613      	mov	r3, r2
 8001610:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001612:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001614:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800161c:	2b01      	cmp	r3, #1
 800161e:	d101      	bne.n	8001624 <HAL_HCD_HC_Init+0x2c>
 8001620:	2302      	movs	r3, #2
 8001622:	e09d      	b.n	8001760 <HAL_HCD_HC_Init+0x168>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800162c:	78fa      	ldrb	r2, [r7, #3]
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	1a9b      	subs	r3, r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	3319      	adds	r3, #25
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001640:	78fa      	ldrb	r2, [r7, #3]
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	1a9b      	subs	r3, r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	3314      	adds	r3, #20
 8001650:	787a      	ldrb	r2, [r7, #1]
 8001652:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001654:	78fa      	ldrb	r2, [r7, #3]
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	1a9b      	subs	r3, r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	3315      	adds	r3, #21
 8001664:	78fa      	ldrb	r2, [r7, #3]
 8001666:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001668:	78fa      	ldrb	r2, [r7, #3]
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	1a9b      	subs	r3, r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	3326      	adds	r3, #38	@ 0x26
 8001678:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800167c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800167e:	78fa      	ldrb	r2, [r7, #3]
 8001680:	78bb      	ldrb	r3, [r7, #2]
 8001682:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001686:	b2d8      	uxtb	r0, r3
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	011b      	lsls	r3, r3, #4
 800168e:	1a9b      	subs	r3, r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	440b      	add	r3, r1
 8001694:	3316      	adds	r3, #22
 8001696:	4602      	mov	r2, r0
 8001698:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	4619      	mov	r1, r3
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 fba4 	bl	8001dec <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80016a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	da0a      	bge.n	80016c2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016ac:	78fa      	ldrb	r2, [r7, #3]
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	4613      	mov	r3, r2
 80016b2:	011b      	lsls	r3, r3, #4
 80016b4:	1a9b      	subs	r3, r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	3317      	adds	r3, #23
 80016bc:	2201      	movs	r2, #1
 80016be:	701a      	strb	r2, [r3, #0]
 80016c0:	e009      	b.n	80016d6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016c2:	78fa      	ldrb	r2, [r7, #3]
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	1a9b      	subs	r3, r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	440b      	add	r3, r1
 80016d0:	3317      	adds	r3, #23
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f004 fc2e 	bl	8005f3c <USB_GetHostSpeed>
 80016e0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80016e2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d10b      	bne.n	8001702 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80016ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d107      	bne.n	8001702 <HAL_HCD_HC_Init+0x10a>
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d104      	bne.n	8001702 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	2bbc      	cmp	r3, #188	@ 0xbc
 80016fc:	d901      	bls.n	8001702 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80016fe:	23bc      	movs	r3, #188	@ 0xbc
 8001700:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001702:	78fa      	ldrb	r2, [r7, #3]
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	1a9b      	subs	r3, r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	3318      	adds	r3, #24
 8001712:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001716:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001718:	78fa      	ldrb	r2, [r7, #3]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	b298      	uxth	r0, r3
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	1a9b      	subs	r3, r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	3328      	adds	r3, #40	@ 0x28
 800172c:	4602      	mov	r2, r0
 800172e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6818      	ldr	r0, [r3, #0]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	b29b      	uxth	r3, r3
 8001738:	787c      	ldrb	r4, [r7, #1]
 800173a:	78ba      	ldrb	r2, [r7, #2]
 800173c:	78f9      	ldrb	r1, [r7, #3]
 800173e:	9302      	str	r3, [sp, #8]
 8001740:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	4623      	mov	r3, r4
 800174e:	f004 fc1d 	bl	8005f8c <USB_HC_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800175e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001760:	4618      	mov	r0, r3
 8001762:	371c      	adds	r7, #28
 8001764:	46bd      	mov	sp, r7
 8001766:	bd90      	pop	{r4, r7, pc}

08001768 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	4608      	mov	r0, r1
 8001772:	4611      	mov	r1, r2
 8001774:	461a      	mov	r2, r3
 8001776:	4603      	mov	r3, r0
 8001778:	70fb      	strb	r3, [r7, #3]
 800177a:	460b      	mov	r3, r1
 800177c:	70bb      	strb	r3, [r7, #2]
 800177e:	4613      	mov	r3, r2
 8001780:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001782:	78fa      	ldrb	r2, [r7, #3]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	1a9b      	subs	r3, r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	440b      	add	r3, r1
 8001790:	3317      	adds	r3, #23
 8001792:	78ba      	ldrb	r2, [r7, #2]
 8001794:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001796:	78fa      	ldrb	r2, [r7, #3]
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	1a9b      	subs	r3, r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	440b      	add	r3, r1
 80017a4:	3326      	adds	r3, #38	@ 0x26
 80017a6:	787a      	ldrb	r2, [r7, #1]
 80017a8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017aa:	7c3b      	ldrb	r3, [r7, #16]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d114      	bne.n	80017da <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017b0:	78fa      	ldrb	r2, [r7, #3]
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	1a9b      	subs	r3, r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	332a      	adds	r3, #42	@ 0x2a
 80017c0:	2203      	movs	r2, #3
 80017c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017c4:	78fa      	ldrb	r2, [r7, #3]
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	1a9b      	subs	r3, r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	440b      	add	r3, r1
 80017d2:	3319      	adds	r3, #25
 80017d4:	7f3a      	ldrb	r2, [r7, #28]
 80017d6:	701a      	strb	r2, [r3, #0]
 80017d8:	e009      	b.n	80017ee <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017da:	78fa      	ldrb	r2, [r7, #3]
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	1a9b      	subs	r3, r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	440b      	add	r3, r1
 80017e8:	332a      	adds	r3, #42	@ 0x2a
 80017ea:	2202      	movs	r2, #2
 80017ec:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017ee:	787b      	ldrb	r3, [r7, #1]
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	f200 8102 	bhi.w	80019fa <HAL_HCD_HC_SubmitRequest+0x292>
 80017f6:	a201      	add	r2, pc, #4	@ (adr r2, 80017fc <HAL_HCD_HC_SubmitRequest+0x94>)
 80017f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fc:	0800180d 	.word	0x0800180d
 8001800:	080019e5 	.word	0x080019e5
 8001804:	080018d1 	.word	0x080018d1
 8001808:	0800195b 	.word	0x0800195b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800180c:	7c3b      	ldrb	r3, [r7, #16]
 800180e:	2b01      	cmp	r3, #1
 8001810:	f040 80f5 	bne.w	80019fe <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001814:	78bb      	ldrb	r3, [r7, #2]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d12d      	bne.n	8001876 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800181a:	8b3b      	ldrh	r3, [r7, #24]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d109      	bne.n	8001834 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	1a9b      	subs	r3, r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	333d      	adds	r3, #61	@ 0x3d
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001834:	78fa      	ldrb	r2, [r7, #3]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	333d      	adds	r3, #61	@ 0x3d
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10a      	bne.n	8001860 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800184a:	78fa      	ldrb	r2, [r7, #3]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	1a9b      	subs	r3, r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	332a      	adds	r3, #42	@ 0x2a
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800185e:	e0ce      	b.n	80019fe <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001860:	78fa      	ldrb	r2, [r7, #3]
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	1a9b      	subs	r3, r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	332a      	adds	r3, #42	@ 0x2a
 8001870:	2202      	movs	r2, #2
 8001872:	701a      	strb	r2, [r3, #0]
      break;
 8001874:	e0c3      	b.n	80019fe <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001876:	78fa      	ldrb	r2, [r7, #3]
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	011b      	lsls	r3, r3, #4
 800187e:	1a9b      	subs	r3, r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	440b      	add	r3, r1
 8001884:	331a      	adds	r3, #26
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	f040 80b8 	bne.w	80019fe <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800188e:	78fa      	ldrb	r2, [r7, #3]
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	011b      	lsls	r3, r3, #4
 8001896:	1a9b      	subs	r3, r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	333c      	adds	r3, #60	@ 0x3c
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10a      	bne.n	80018ba <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018a4:	78fa      	ldrb	r2, [r7, #3]
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	332a      	adds	r3, #42	@ 0x2a
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
      break;
 80018b8:	e0a1      	b.n	80019fe <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ba:	78fa      	ldrb	r2, [r7, #3]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	011b      	lsls	r3, r3, #4
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	332a      	adds	r3, #42	@ 0x2a
 80018ca:	2202      	movs	r2, #2
 80018cc:	701a      	strb	r2, [r3, #0]
      break;
 80018ce:	e096      	b.n	80019fe <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018d0:	78bb      	ldrb	r3, [r7, #2]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d120      	bne.n	8001918 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018d6:	78fa      	ldrb	r2, [r7, #3]
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	1a9b      	subs	r3, r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	440b      	add	r3, r1
 80018e4:	333d      	adds	r3, #61	@ 0x3d
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10a      	bne.n	8001902 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018ec:	78fa      	ldrb	r2, [r7, #3]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	1a9b      	subs	r3, r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	332a      	adds	r3, #42	@ 0x2a
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001900:	e07e      	b.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001902:	78fa      	ldrb	r2, [r7, #3]
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	1a9b      	subs	r3, r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	440b      	add	r3, r1
 8001910:	332a      	adds	r3, #42	@ 0x2a
 8001912:	2202      	movs	r2, #2
 8001914:	701a      	strb	r2, [r3, #0]
      break;
 8001916:	e073      	b.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001918:	78fa      	ldrb	r2, [r7, #3]
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	011b      	lsls	r3, r3, #4
 8001920:	1a9b      	subs	r3, r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	333c      	adds	r3, #60	@ 0x3c
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10a      	bne.n	8001944 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800192e:	78fa      	ldrb	r2, [r7, #3]
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	1a9b      	subs	r3, r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	332a      	adds	r3, #42	@ 0x2a
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
      break;
 8001942:	e05d      	b.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	1a9b      	subs	r3, r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	332a      	adds	r3, #42	@ 0x2a
 8001954:	2202      	movs	r2, #2
 8001956:	701a      	strb	r2, [r3, #0]
      break;
 8001958:	e052      	b.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800195a:	78bb      	ldrb	r3, [r7, #2]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d120      	bne.n	80019a2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001960:	78fa      	ldrb	r2, [r7, #3]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	333d      	adds	r3, #61	@ 0x3d
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10a      	bne.n	800198c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001976:	78fa      	ldrb	r2, [r7, #3]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	1a9b      	subs	r3, r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	332a      	adds	r3, #42	@ 0x2a
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800198a:	e039      	b.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800198c:	78fa      	ldrb	r2, [r7, #3]
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	332a      	adds	r3, #42	@ 0x2a
 800199c:	2202      	movs	r2, #2
 800199e:	701a      	strb	r2, [r3, #0]
      break;
 80019a0:	e02e      	b.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019a2:	78fa      	ldrb	r2, [r7, #3]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	1a9b      	subs	r3, r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	333c      	adds	r3, #60	@ 0x3c
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10a      	bne.n	80019ce <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019b8:	78fa      	ldrb	r2, [r7, #3]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	332a      	adds	r3, #42	@ 0x2a
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
      break;
 80019cc:	e018      	b.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ce:	78fa      	ldrb	r2, [r7, #3]
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	332a      	adds	r3, #42	@ 0x2a
 80019de:	2202      	movs	r2, #2
 80019e0:	701a      	strb	r2, [r3, #0]
      break;
 80019e2:	e00d      	b.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	1a9b      	subs	r3, r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	332a      	adds	r3, #42	@ 0x2a
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
      break;
 80019f8:	e002      	b.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80019fa:	bf00      	nop
 80019fc:	e000      	b.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80019fe:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a00:	78fa      	ldrb	r2, [r7, #3]
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	332c      	adds	r3, #44	@ 0x2c
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a14:	78fa      	ldrb	r2, [r7, #3]
 8001a16:	8b39      	ldrh	r1, [r7, #24]
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4403      	add	r3, r0
 8001a24:	3334      	adds	r3, #52	@ 0x34
 8001a26:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	1a9b      	subs	r3, r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	334c      	adds	r3, #76	@ 0x4c
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a3c:	78fa      	ldrb	r2, [r7, #3]
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	1a9b      	subs	r3, r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	3338      	adds	r3, #56	@ 0x38
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a50:	78fa      	ldrb	r2, [r7, #3]
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	1a9b      	subs	r3, r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3315      	adds	r3, #21
 8001a60:	78fa      	ldrb	r2, [r7, #3]
 8001a62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a64:	78fa      	ldrb	r2, [r7, #3]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	334d      	adds	r3, #77	@ 0x4d
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	78fa      	ldrb	r2, [r7, #3]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	1a9b      	subs	r3, r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	3310      	adds	r3, #16
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	1d19      	adds	r1, r3, #4
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	799b      	ldrb	r3, [r3, #6]
 8001a92:	461a      	mov	r2, r3
 8001a94:	f004 fba6 	bl	80061e4 <USB_HC_StartXfer>
 8001a98:	4603      	mov	r3, r0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop

08001aa4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f004 f894 	bl	8005be8 <USB_GetMode>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	f040 80fb 	bne.w	8001cbe <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f004 f857 	bl	8005b80 <USB_ReadInterrupts>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80f1 	beq.w	8001cbc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f004 f84e 	bl	8005b80 <USB_ReadInterrupts>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001aee:	d104      	bne.n	8001afa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001af8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f004 f83e 	bl	8005b80 <USB_ReadInterrupts>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b0e:	d104      	bne.n	8001b1a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f004 f82e 	bl	8005b80 <USB_ReadInterrupts>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001b2e:	d104      	bne.n	8001b3a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f004 f81e 	bl	8005b80 <USB_ReadInterrupts>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d103      	bne.n	8001b56 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2202      	movs	r2, #2
 8001b54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f004 f810 	bl	8005b80 <USB_ReadInterrupts>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b6a:	d120      	bne.n	8001bae <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001b74:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d113      	bne.n	8001bae <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b86:	2110      	movs	r1, #16
 8001b88:	6938      	ldr	r0, [r7, #16]
 8001b8a:	f003 ff03 	bl	8005994 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b8e:	6938      	ldr	r0, [r7, #16]
 8001b90:	f003 ff32 	bl	80059f8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	7a5b      	ldrb	r3, [r3, #9]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d105      	bne.n	8001ba8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f004 f92a 	bl	8005dfc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f007 f8f7 	bl	8008d9c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 ffe4 	bl	8005b80 <USB_ReadInterrupts>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bc2:	d102      	bne.n	8001bca <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f001 fd4d 	bl	8003664 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f003 ffd6 	bl	8005b80 <USB_ReadInterrupts>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d106      	bne.n	8001bec <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f007 f8c0 	bl	8008d64 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2208      	movs	r2, #8
 8001bea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f003 ffc5 	bl	8005b80 <USB_ReadInterrupts>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c00:	d139      	bne.n	8001c76 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f004 fd66 	bl	80066d8 <USB_HC_ReadInterrupt>
 8001c0c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	e025      	b.n	8001c60 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d018      	beq.n	8001c5a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	015a      	lsls	r2, r3, #5
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4413      	add	r3, r2
 8001c30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c3e:	d106      	bne.n	8001c4e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	4619      	mov	r1, r3
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f905 	bl	8001e56 <HCD_HC_IN_IRQHandler>
 8001c4c:	e005      	b.n	8001c5a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	4619      	mov	r1, r3
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 ff67 	bl	8002b28 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	795b      	ldrb	r3, [r3, #5]
 8001c64:	461a      	mov	r2, r3
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d3d3      	bcc.n	8001c14 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f003 ff80 	bl	8005b80 <USB_ReadInterrupts>
 8001c80:	4603      	mov	r3, r0
 8001c82:	f003 0310 	and.w	r3, r3, #16
 8001c86:	2b10      	cmp	r3, #16
 8001c88:	d101      	bne.n	8001c8e <HAL_HCD_IRQHandler+0x1ea>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_HCD_IRQHandler+0x1ec>
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d014      	beq.n	8001cbe <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	699a      	ldr	r2, [r3, #24]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0210 	bic.w	r2, r2, #16
 8001ca2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f001 fbfe 	bl	80034a6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	699a      	ldr	r2, [r3, #24]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f042 0210 	orr.w	r2, r2, #16
 8001cb8:	619a      	str	r2, [r3, #24]
 8001cba:	e000      	b.n	8001cbe <HAL_HCD_IRQHandler+0x21a>
      return;
 8001cbc:	bf00      	nop
    }
  }
}
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_HCD_Start+0x16>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e013      	b.n	8001d02 <HAL_HCD_Start+0x3e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f004 f8ee 	bl	8005eca <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 fde0 	bl	80058b8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_HCD_Stop+0x16>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e00d      	b.n	8001d3c <HAL_HCD_Stop+0x32>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f004 fe41 	bl	80069b4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f004 f890 	bl	8005e76 <USB_ResetPort>
 8001d56:	4603      	mov	r3, r0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d6c:	78fa      	ldrb	r2, [r7, #3]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	334c      	adds	r3, #76	@ 0x4c
 8001d7c:	781b      	ldrb	r3, [r3, #0]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	460b      	mov	r3, r1
 8001d94:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d96:	78fa      	ldrb	r2, [r7, #3]
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	1a9b      	subs	r3, r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	3338      	adds	r3, #56	@ 0x38
 8001da6:	681b      	ldr	r3, [r3, #0]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f004 f8d2 	bl	8005f6a <USB_GetCurrentFrame>
 8001dc6:	4603      	mov	r3, r0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f004 f8ad 	bl	8005f3c <USB_GetHostSpeed>
 8001de2:	4603      	mov	r3, r0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001df8:	78fa      	ldrb	r2, [r7, #3]
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	1a9b      	subs	r3, r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	331a      	adds	r3, #26
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001e0c:	78fa      	ldrb	r2, [r7, #3]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	1a9b      	subs	r3, r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	331b      	adds	r3, #27
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e20:	78fa      	ldrb	r2, [r7, #3]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	3325      	adds	r3, #37	@ 0x25
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	3324      	adds	r3, #36	@ 0x24
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f003 fe96 	bl	8005ba6 <USB_ReadChInterrupts>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d11a      	bne.n	8001eba <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001e84:	78fb      	ldrb	r3, [r7, #3]
 8001e86:	015a      	lsls	r2, r3, #5
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e90:	461a      	mov	r2, r3
 8001e92:	2304      	movs	r3, #4
 8001e94:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e96:	78fa      	ldrb	r2, [r7, #3]
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	1a9b      	subs	r3, r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	334d      	adds	r3, #77	@ 0x4d
 8001ea6:	2207      	movs	r2, #7
 8001ea8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	78fa      	ldrb	r2, [r7, #3]
 8001eb0:	4611      	mov	r1, r2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f004 fc21 	bl	80066fa <USB_HC_Halt>
 8001eb8:	e09e      	b.n	8001ff8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 fe6f 	bl	8005ba6 <USB_ReadChInterrupts>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ed2:	d11b      	bne.n	8001f0c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	015a      	lsls	r2, r3, #5
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ee6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001ee8:	78fa      	ldrb	r2, [r7, #3]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	334d      	adds	r3, #77	@ 0x4d
 8001ef8:	2208      	movs	r2, #8
 8001efa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	78fa      	ldrb	r2, [r7, #3]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f004 fbf8 	bl	80066fa <USB_HC_Halt>
 8001f0a:	e075      	b.n	8001ff8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	78fa      	ldrb	r2, [r7, #3]
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f003 fe46 	bl	8005ba6 <USB_ReadChInterrupts>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d11a      	bne.n	8001f5a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	015a      	lsls	r2, r3, #5
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f30:	461a      	mov	r2, r3
 8001f32:	2308      	movs	r3, #8
 8001f34:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f36:	78fa      	ldrb	r2, [r7, #3]
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	011b      	lsls	r3, r3, #4
 8001f3e:	1a9b      	subs	r3, r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	334d      	adds	r3, #77	@ 0x4d
 8001f46:	2206      	movs	r2, #6
 8001f48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	78fa      	ldrb	r2, [r7, #3]
 8001f50:	4611      	mov	r1, r2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f004 fbd1 	bl	80066fa <USB_HC_Halt>
 8001f58:	e04e      	b.n	8001ff8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	78fa      	ldrb	r2, [r7, #3]
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f003 fe1f 	bl	8005ba6 <USB_ReadChInterrupts>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f72:	d11b      	bne.n	8001fac <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001f74:	78fb      	ldrb	r3, [r7, #3]
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f80:	461a      	mov	r2, r3
 8001f82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f86:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001f88:	78fa      	ldrb	r2, [r7, #3]
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	1a9b      	subs	r3, r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	440b      	add	r3, r1
 8001f96:	334d      	adds	r3, #77	@ 0x4d
 8001f98:	2209      	movs	r2, #9
 8001f9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	78fa      	ldrb	r2, [r7, #3]
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f004 fba8 	bl	80066fa <USB_HC_Halt>
 8001faa:	e025      	b.n	8001ff8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	78fa      	ldrb	r2, [r7, #3]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f003 fdf6 	bl	8005ba6 <USB_ReadChInterrupts>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc0:	2b80      	cmp	r3, #128	@ 0x80
 8001fc2:	d119      	bne.n	8001ff8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	015a      	lsls	r2, r3, #5
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4413      	add	r3, r2
 8001fcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	2380      	movs	r3, #128	@ 0x80
 8001fd4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001fd6:	78fa      	ldrb	r2, [r7, #3]
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	011b      	lsls	r3, r3, #4
 8001fde:	1a9b      	subs	r3, r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	334d      	adds	r3, #77	@ 0x4d
 8001fe6:	2207      	movs	r2, #7
 8001fe8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	78fa      	ldrb	r2, [r7, #3]
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f004 fb81 	bl	80066fa <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	78fa      	ldrb	r2, [r7, #3]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f003 fdd0 	bl	8005ba6 <USB_ReadChInterrupts>
 8002006:	4603      	mov	r3, r0
 8002008:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800200c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002010:	d112      	bne.n	8002038 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	78fa      	ldrb	r2, [r7, #3]
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f004 fb6d 	bl	80066fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4413      	add	r3, r2
 8002028:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800202c:	461a      	mov	r2, r3
 800202e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002032:	6093      	str	r3, [r2, #8]
 8002034:	f000 bd75 	b.w	8002b22 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	78fa      	ldrb	r2, [r7, #3]
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f003 fdb0 	bl	8005ba6 <USB_ReadChInterrupts>
 8002046:	4603      	mov	r3, r0
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b01      	cmp	r3, #1
 800204e:	f040 8128 	bne.w	80022a2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	015a      	lsls	r2, r3, #5
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	4413      	add	r3, r2
 800205a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800205e:	461a      	mov	r2, r3
 8002060:	2320      	movs	r3, #32
 8002062:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002064:	78fa      	ldrb	r2, [r7, #3]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	1a9b      	subs	r3, r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	331b      	adds	r3, #27
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d119      	bne.n	80020ae <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800207a:	78fa      	ldrb	r2, [r7, #3]
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	1a9b      	subs	r3, r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	331b      	adds	r3, #27
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4413      	add	r3, r2
 8002096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	78fa      	ldrb	r2, [r7, #3]
 800209e:	0151      	lsls	r1, r2, #5
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	440a      	add	r2, r1
 80020a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020ac:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	799b      	ldrb	r3, [r3, #6]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d01b      	beq.n	80020ee <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	3330      	adds	r3, #48	@ 0x30
 80020c6:	6819      	ldr	r1, [r3, #0]
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020da:	78fa      	ldrb	r2, [r7, #3]
 80020dc:	1ac9      	subs	r1, r1, r3
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	011b      	lsls	r3, r3, #4
 80020e4:	1a9b      	subs	r3, r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4403      	add	r3, r0
 80020ea:	3338      	adds	r3, #56	@ 0x38
 80020ec:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80020ee:	78fa      	ldrb	r2, [r7, #3]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	334d      	adds	r3, #77	@ 0x4d
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002102:	78fa      	ldrb	r2, [r7, #3]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	3344      	adds	r3, #68	@ 0x44
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	015a      	lsls	r2, r3, #5
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4413      	add	r3, r2
 800211e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002122:	461a      	mov	r2, r3
 8002124:	2301      	movs	r3, #1
 8002126:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002128:	78fa      	ldrb	r2, [r7, #3]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	1a9b      	subs	r3, r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	3326      	adds	r3, #38	@ 0x26
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800213e:	78fa      	ldrb	r2, [r7, #3]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	1a9b      	subs	r3, r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	3326      	adds	r3, #38	@ 0x26
 800214e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002150:	2b02      	cmp	r3, #2
 8002152:	d110      	bne.n	8002176 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f004 facc 	bl	80066fa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4413      	add	r3, r2
 800216a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800216e:	461a      	mov	r2, r3
 8002170:	2310      	movs	r3, #16
 8002172:	6093      	str	r3, [r2, #8]
 8002174:	e03d      	b.n	80021f2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002176:	78fa      	ldrb	r2, [r7, #3]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	1a9b      	subs	r3, r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	3326      	adds	r3, #38	@ 0x26
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b03      	cmp	r3, #3
 800218a:	d00a      	beq.n	80021a2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	3326      	adds	r3, #38	@ 0x26
 800219c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d127      	bne.n	80021f2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	0151      	lsls	r1, r2, #5
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	440a      	add	r2, r1
 80021b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80021bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80021c0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80021c2:	78fa      	ldrb	r2, [r7, #3]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	1a9b      	subs	r3, r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	334c      	adds	r3, #76	@ 0x4c
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80021d6:	78fa      	ldrb	r2, [r7, #3]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	334c      	adds	r3, #76	@ 0x4c
 80021e6:	781a      	ldrb	r2, [r3, #0]
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	4619      	mov	r1, r3
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f006 fde3 	bl	8008db8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	799b      	ldrb	r3, [r3, #6]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d13b      	bne.n	8002272 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80021fa:	78fa      	ldrb	r2, [r7, #3]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	1a9b      	subs	r3, r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	3338      	adds	r3, #56	@ 0x38
 800220a:	6819      	ldr	r1, [r3, #0]
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4403      	add	r3, r0
 800221a:	3328      	adds	r3, #40	@ 0x28
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	440b      	add	r3, r1
 8002220:	1e59      	subs	r1, r3, #1
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4403      	add	r3, r0
 8002230:	3328      	adds	r3, #40	@ 0x28
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	fbb1 f3f3 	udiv	r3, r1, r3
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 8470 	beq.w	8002b22 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002242:	78fa      	ldrb	r2, [r7, #3]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	1a9b      	subs	r3, r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	440b      	add	r3, r1
 8002250:	333c      	adds	r3, #60	@ 0x3c
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	f083 0301 	eor.w	r3, r3, #1
 800225a:	b2d8      	uxtb	r0, r3
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	1a9b      	subs	r3, r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	333c      	adds	r3, #60	@ 0x3c
 800226a:	4602      	mov	r2, r0
 800226c:	701a      	strb	r2, [r3, #0]
 800226e:	f000 bc58 	b.w	8002b22 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002272:	78fa      	ldrb	r2, [r7, #3]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	1a9b      	subs	r3, r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	333c      	adds	r3, #60	@ 0x3c
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	78fa      	ldrb	r2, [r7, #3]
 8002286:	f083 0301 	eor.w	r3, r3, #1
 800228a:	b2d8      	uxtb	r0, r3
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	333c      	adds	r3, #60	@ 0x3c
 800229a:	4602      	mov	r2, r0
 800229c:	701a      	strb	r2, [r3, #0]
 800229e:	f000 bc40 	b.w	8002b22 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	78fa      	ldrb	r2, [r7, #3]
 80022a8:	4611      	mov	r1, r2
 80022aa:	4618      	mov	r0, r3
 80022ac:	f003 fc7b 	bl	8005ba6 <USB_ReadChInterrupts>
 80022b0:	4603      	mov	r3, r0
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	2b20      	cmp	r3, #32
 80022b8:	d131      	bne.n	800231e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022c6:	461a      	mov	r2, r3
 80022c8:	2320      	movs	r3, #32
 80022ca:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80022cc:	78fa      	ldrb	r2, [r7, #3]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	1a9b      	subs	r3, r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	331a      	adds	r3, #26
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	f040 841f 	bne.w	8002b22 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	331b      	adds	r3, #27
 80022f4:	2201      	movs	r2, #1
 80022f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80022f8:	78fa      	ldrb	r2, [r7, #3]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	334d      	adds	r3, #77	@ 0x4d
 8002308:	2203      	movs	r2, #3
 800230a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	78fa      	ldrb	r2, [r7, #3]
 8002312:	4611      	mov	r1, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f004 f9f0 	bl	80066fa <USB_HC_Halt>
 800231a:	f000 bc02 	b.w	8002b22 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	78fa      	ldrb	r2, [r7, #3]
 8002324:	4611      	mov	r1, r2
 8002326:	4618      	mov	r0, r3
 8002328:	f003 fc3d 	bl	8005ba6 <USB_ReadChInterrupts>
 800232c:	4603      	mov	r3, r0
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b02      	cmp	r3, #2
 8002334:	f040 8305 	bne.w	8002942 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002344:	461a      	mov	r2, r3
 8002346:	2302      	movs	r3, #2
 8002348:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	334d      	adds	r3, #77	@ 0x4d
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d114      	bne.n	800238a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002360:	78fa      	ldrb	r2, [r7, #3]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	334d      	adds	r3, #77	@ 0x4d
 8002370:	2202      	movs	r2, #2
 8002372:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002374:	78fa      	ldrb	r2, [r7, #3]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	334c      	adds	r3, #76	@ 0x4c
 8002384:	2201      	movs	r2, #1
 8002386:	701a      	strb	r2, [r3, #0]
 8002388:	e2cc      	b.n	8002924 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800238a:	78fa      	ldrb	r2, [r7, #3]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	334d      	adds	r3, #77	@ 0x4d
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b06      	cmp	r3, #6
 800239e:	d114      	bne.n	80023ca <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	334d      	adds	r3, #77	@ 0x4d
 80023b0:	2202      	movs	r2, #2
 80023b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	334c      	adds	r3, #76	@ 0x4c
 80023c4:	2205      	movs	r2, #5
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	e2ac      	b.n	8002924 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023ca:	78fa      	ldrb	r2, [r7, #3]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	334d      	adds	r3, #77	@ 0x4d
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b07      	cmp	r3, #7
 80023de:	d00b      	beq.n	80023f8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	334d      	adds	r3, #77	@ 0x4d
 80023f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023f2:	2b09      	cmp	r3, #9
 80023f4:	f040 80a6 	bne.w	8002544 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	334d      	adds	r3, #77	@ 0x4d
 8002408:	2202      	movs	r2, #2
 800240a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	3344      	adds	r3, #68	@ 0x44
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	1c59      	adds	r1, r3, #1
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	1a9b      	subs	r3, r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4403      	add	r3, r0
 800242c:	3344      	adds	r3, #68	@ 0x44
 800242e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	3344      	adds	r3, #68	@ 0x44
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d943      	bls.n	80024ce <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002446:	78fa      	ldrb	r2, [r7, #3]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	3344      	adds	r3, #68	@ 0x44
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	331a      	adds	r3, #26
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d123      	bne.n	80024b8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	331b      	adds	r3, #27
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	331c      	adds	r3, #28
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	78fa      	ldrb	r2, [r7, #3]
 80024a8:	0151      	lsls	r1, r2, #5
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	440a      	add	r2, r1
 80024ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	334c      	adds	r3, #76	@ 0x4c
 80024c8:	2204      	movs	r2, #4
 80024ca:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024cc:	e229      	b.n	8002922 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	334c      	adds	r3, #76	@ 0x4c
 80024de:	2202      	movs	r2, #2
 80024e0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	3326      	adds	r3, #38	@ 0x26
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00b      	beq.n	8002510 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	3326      	adds	r3, #38	@ 0x26
 8002508:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800250a:	2b02      	cmp	r3, #2
 800250c:	f040 8209 	bne.w	8002922 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4413      	add	r3, r2
 8002518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002526:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800252e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4413      	add	r3, r2
 8002538:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800253c:	461a      	mov	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002542:	e1ee      	b.n	8002922 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	334d      	adds	r3, #77	@ 0x4d
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b05      	cmp	r3, #5
 8002558:	f040 80c8 	bne.w	80026ec <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800255c:	78fa      	ldrb	r2, [r7, #3]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	334d      	adds	r3, #77	@ 0x4d
 800256c:	2202      	movs	r2, #2
 800256e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	331b      	adds	r3, #27
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b01      	cmp	r3, #1
 8002584:	f040 81ce 	bne.w	8002924 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	3326      	adds	r3, #38	@ 0x26
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b03      	cmp	r3, #3
 800259c:	d16b      	bne.n	8002676 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800259e:	78fa      	ldrb	r2, [r7, #3]
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	1a9b      	subs	r3, r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	3348      	adds	r3, #72	@ 0x48
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	1c59      	adds	r1, r3, #1
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4403      	add	r3, r0
 80025be:	3348      	adds	r3, #72	@ 0x48
 80025c0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80025c2:	78fa      	ldrb	r2, [r7, #3]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	3348      	adds	r3, #72	@ 0x48
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d943      	bls.n	8002660 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80025d8:	78fa      	ldrb	r2, [r7, #3]
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	3348      	adds	r3, #72	@ 0x48
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80025ec:	78fa      	ldrb	r2, [r7, #3]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	331b      	adds	r3, #27
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002600:	78fa      	ldrb	r2, [r7, #3]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	3344      	adds	r3, #68	@ 0x44
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d809      	bhi.n	800262a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002616:	78fa      	ldrb	r2, [r7, #3]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	1a9b      	subs	r3, r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	331c      	adds	r3, #28
 8002626:	2201      	movs	r2, #1
 8002628:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	78fa      	ldrb	r2, [r7, #3]
 800263a:	0151      	lsls	r1, r2, #5
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	440a      	add	r2, r1
 8002640:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002644:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002648:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	1a9b      	subs	r3, r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	334c      	adds	r3, #76	@ 0x4c
 800265a:	2204      	movs	r2, #4
 800265c:	701a      	strb	r2, [r3, #0]
 800265e:	e014      	b.n	800268a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	334c      	adds	r3, #76	@ 0x4c
 8002670:	2202      	movs	r2, #2
 8002672:	701a      	strb	r2, [r3, #0]
 8002674:	e009      	b.n	800268a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002676:	78fa      	ldrb	r2, [r7, #3]
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	1a9b      	subs	r3, r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	440b      	add	r3, r1
 8002684:	334c      	adds	r3, #76	@ 0x4c
 8002686:	2202      	movs	r2, #2
 8002688:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800268a:	78fa      	ldrb	r2, [r7, #3]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	3326      	adds	r3, #38	@ 0x26
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00b      	beq.n	80026b8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	3326      	adds	r3, #38	@ 0x26
 80026b0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	f040 8136 	bne.w	8002924 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026ce:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026d6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026e4:	461a      	mov	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	e11b      	b.n	8002924 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	334d      	adds	r3, #77	@ 0x4d
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b03      	cmp	r3, #3
 8002700:	f040 8081 	bne.w	8002806 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002704:	78fa      	ldrb	r2, [r7, #3]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	334d      	adds	r3, #77	@ 0x4d
 8002714:	2202      	movs	r2, #2
 8002716:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	331b      	adds	r3, #27
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b01      	cmp	r3, #1
 800272c:	f040 80fa 	bne.w	8002924 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002730:	78fa      	ldrb	r2, [r7, #3]
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	334c      	adds	r3, #76	@ 0x4c
 8002740:	2202      	movs	r2, #2
 8002742:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4413      	add	r3, r2
 800274c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	78fa      	ldrb	r2, [r7, #3]
 8002754:	0151      	lsls	r1, r2, #5
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	440a      	add	r2, r1
 800275a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800275e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002762:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002764:	78fb      	ldrb	r3, [r7, #3]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4413      	add	r3, r2
 800276c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	78fa      	ldrb	r2, [r7, #3]
 8002774:	0151      	lsls	r1, r2, #5
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	440a      	add	r2, r1
 800277a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800277e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002782:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002784:	78fb      	ldrb	r3, [r7, #3]
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4413      	add	r3, r2
 800278c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	78fa      	ldrb	r2, [r7, #3]
 8002794:	0151      	lsls	r1, r2, #5
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	440a      	add	r2, r1
 800279a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800279e:	f023 0320 	bic.w	r3, r3, #32
 80027a2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027a4:	78fa      	ldrb	r2, [r7, #3]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	1a9b      	subs	r3, r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	3326      	adds	r3, #38	@ 0x26
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00b      	beq.n	80027d2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	1a9b      	subs	r3, r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	3326      	adds	r3, #38	@ 0x26
 80027ca:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	f040 80a9 	bne.w	8002924 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027d2:	78fb      	ldrb	r3, [r7, #3]
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027e8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027f0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80027f2:	78fb      	ldrb	r3, [r7, #3]
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027fe:	461a      	mov	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	e08e      	b.n	8002924 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002806:	78fa      	ldrb	r2, [r7, #3]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	1a9b      	subs	r3, r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	334d      	adds	r3, #77	@ 0x4d
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b04      	cmp	r3, #4
 800281a:	d143      	bne.n	80028a4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800281c:	78fa      	ldrb	r2, [r7, #3]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	1a9b      	subs	r3, r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	334d      	adds	r3, #77	@ 0x4d
 800282c:	2202      	movs	r2, #2
 800282e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	334c      	adds	r3, #76	@ 0x4c
 8002840:	2202      	movs	r2, #2
 8002842:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	3326      	adds	r3, #38	@ 0x26
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800285a:	78fa      	ldrb	r2, [r7, #3]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	3326      	adds	r3, #38	@ 0x26
 800286a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800286c:	2b02      	cmp	r3, #2
 800286e:	d159      	bne.n	8002924 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002886:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800288e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4413      	add	r3, r2
 8002898:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800289c:	461a      	mov	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e03f      	b.n	8002924 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	334d      	adds	r3, #77	@ 0x4d
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d126      	bne.n	8002908 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028ba:	78fa      	ldrb	r2, [r7, #3]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	1a9b      	subs	r3, r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	334d      	adds	r3, #77	@ 0x4d
 80028ca:	2202      	movs	r2, #2
 80028cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	3344      	adds	r3, #68	@ 0x44
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	1c59      	adds	r1, r3, #1
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4403      	add	r3, r0
 80028ee:	3344      	adds	r3, #68	@ 0x44
 80028f0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80028f2:	78fa      	ldrb	r2, [r7, #3]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	1a9b      	subs	r3, r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	334c      	adds	r3, #76	@ 0x4c
 8002902:	2204      	movs	r2, #4
 8002904:	701a      	strb	r2, [r3, #0]
 8002906:	e00d      	b.n	8002924 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	334d      	adds	r3, #77	@ 0x4d
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b02      	cmp	r3, #2
 800291c:	f000 8100 	beq.w	8002b20 <HCD_HC_IN_IRQHandler+0xcca>
 8002920:	e000      	b.n	8002924 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002922:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002924:	78fa      	ldrb	r2, [r7, #3]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	334c      	adds	r3, #76	@ 0x4c
 8002934:	781a      	ldrb	r2, [r3, #0]
 8002936:	78fb      	ldrb	r3, [r7, #3]
 8002938:	4619      	mov	r1, r3
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f006 fa3c 	bl	8008db8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002940:	e0ef      	b.n	8002b22 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	78fa      	ldrb	r2, [r7, #3]
 8002948:	4611      	mov	r1, r2
 800294a:	4618      	mov	r0, r3
 800294c:	f003 f92b 	bl	8005ba6 <USB_ReadChInterrupts>
 8002950:	4603      	mov	r3, r0
 8002952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002956:	2b40      	cmp	r3, #64	@ 0x40
 8002958:	d12f      	bne.n	80029ba <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002966:	461a      	mov	r2, r3
 8002968:	2340      	movs	r3, #64	@ 0x40
 800296a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800296c:	78fa      	ldrb	r2, [r7, #3]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	334d      	adds	r3, #77	@ 0x4d
 800297c:	2205      	movs	r2, #5
 800297e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	331a      	adds	r3, #26
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002996:	78fa      	ldrb	r2, [r7, #3]
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	440b      	add	r3, r1
 80029a4:	3344      	adds	r3, #68	@ 0x44
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	78fa      	ldrb	r2, [r7, #3]
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f003 fea1 	bl	80066fa <USB_HC_Halt>
 80029b8:	e0b3      	b.n	8002b22 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	4611      	mov	r1, r2
 80029c2:	4618      	mov	r0, r3
 80029c4:	f003 f8ef 	bl	8005ba6 <USB_ReadChInterrupts>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b10      	cmp	r3, #16
 80029d0:	f040 80a7 	bne.w	8002b22 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	3326      	adds	r3, #38	@ 0x26
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d11b      	bne.n	8002a22 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029ea:	78fa      	ldrb	r2, [r7, #3]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	1a9b      	subs	r3, r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	3344      	adds	r3, #68	@ 0x44
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	334d      	adds	r3, #77	@ 0x4d
 8002a0e:	2204      	movs	r2, #4
 8002a10:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f003 fe6d 	bl	80066fa <USB_HC_Halt>
 8002a20:	e03f      	b.n	8002aa2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	1a9b      	subs	r3, r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	440b      	add	r3, r1
 8002a30:	3326      	adds	r3, #38	@ 0x26
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00a      	beq.n	8002a4e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a38:	78fa      	ldrb	r2, [r7, #3]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	3326      	adds	r3, #38	@ 0x26
 8002a48:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d129      	bne.n	8002aa2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	3344      	adds	r3, #68	@ 0x44
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	799b      	ldrb	r3, [r3, #6]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HCD_HC_IN_IRQHandler+0xc2a>
 8002a6a:	78fa      	ldrb	r2, [r7, #3]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	1a9b      	subs	r3, r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	331b      	adds	r3, #27
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d110      	bne.n	8002aa2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	334d      	adds	r3, #77	@ 0x4d
 8002a90:	2204      	movs	r2, #4
 8002a92:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f003 fe2c 	bl	80066fa <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002aa2:	78fa      	ldrb	r2, [r7, #3]
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	1a9b      	subs	r3, r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	331b      	adds	r3, #27
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d129      	bne.n	8002b0c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	1a9b      	subs	r3, r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	331b      	adds	r3, #27
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	0151      	lsls	r1, r2, #5
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	440a      	add	r2, r1
 8002ae2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aea:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	0151      	lsls	r1, r2, #5
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	440a      	add	r2, r1
 8002b02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b06:	f043 0320 	orr.w	r3, r3, #32
 8002b0a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b0c:	78fb      	ldrb	r3, [r7, #3]
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b18:	461a      	mov	r2, r3
 8002b1a:	2310      	movs	r3, #16
 8002b1c:	6093      	str	r3, [r2, #8]
 8002b1e:	e000      	b.n	8002b22 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b20:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 f82d 	bl	8005ba6 <USB_ReadChInterrupts>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d11b      	bne.n	8002b8e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b62:	461a      	mov	r2, r3
 8002b64:	2304      	movs	r3, #4
 8002b66:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b68:	78fa      	ldrb	r2, [r7, #3]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	334d      	adds	r3, #77	@ 0x4d
 8002b78:	2207      	movs	r2, #7
 8002b7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f003 fdb8 	bl	80066fa <USB_HC_Halt>
 8002b8a:	f000 bc89 	b.w	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	4611      	mov	r1, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f003 f805 	bl	8005ba6 <USB_ReadChInterrupts>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	2b20      	cmp	r3, #32
 8002ba4:	f040 8082 	bne.w	8002cac <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	2320      	movs	r3, #32
 8002bb8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002bba:	78fa      	ldrb	r2, [r7, #3]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	1a9b      	subs	r3, r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	3319      	adds	r3, #25
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d124      	bne.n	8002c1a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	3319      	adds	r3, #25
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	334c      	adds	r3, #76	@ 0x4c
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	334d      	adds	r3, #77	@ 0x4d
 8002c08:	2203      	movs	r2, #3
 8002c0a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f003 fd70 	bl	80066fa <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	331a      	adds	r3, #26
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	f040 8437 	bne.w	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	1a9b      	subs	r3, r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	331b      	adds	r3, #27
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f040 842b 	bne.w	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002c4a:	78fa      	ldrb	r2, [r7, #3]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	3326      	adds	r3, #38	@ 0x26
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d009      	beq.n	8002c74 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	331b      	adds	r3, #27
 8002c70:	2201      	movs	r2, #1
 8002c72:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002c74:	78fa      	ldrb	r2, [r7, #3]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	1a9b      	subs	r3, r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	334d      	adds	r3, #77	@ 0x4d
 8002c84:	2203      	movs	r2, #3
 8002c86:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	78fa      	ldrb	r2, [r7, #3]
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f003 fd32 	bl	80066fa <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3344      	adds	r3, #68	@ 0x44
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	e3f9      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f002 ff76 	bl	8005ba6 <USB_ReadChInterrupts>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cc4:	d111      	bne.n	8002cea <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	015a      	lsls	r2, r3, #5
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cd8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	78fa      	ldrb	r2, [r7, #3]
 8002ce0:	4611      	mov	r1, r2
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f003 fd09 	bl	80066fa <USB_HC_Halt>
 8002ce8:	e3da      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f002 ff57 	bl	8005ba6 <USB_ReadChInterrupts>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d168      	bne.n	8002dd4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d02:	78fa      	ldrb	r2, [r7, #3]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	3344      	adds	r3, #68	@ 0x44
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f002 ff41 	bl	8005ba6 <USB_ReadChInterrupts>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d2a:	2b40      	cmp	r3, #64	@ 0x40
 8002d2c:	d112      	bne.n	8002d54 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	3319      	adds	r3, #25
 8002d3e:	2201      	movs	r2, #1
 8002d40:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d4e:	461a      	mov	r2, r3
 8002d50:	2340      	movs	r3, #64	@ 0x40
 8002d52:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	331b      	adds	r3, #27
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d019      	beq.n	8002d9e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d6a:	78fa      	ldrb	r2, [r7, #3]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	331b      	adds	r3, #27
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	0151      	lsls	r1, r2, #5
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	440a      	add	r2, r1
 8002d94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d9c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	015a      	lsls	r2, r3, #5
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002daa:	461a      	mov	r2, r3
 8002dac:	2301      	movs	r3, #1
 8002dae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	334d      	adds	r3, #77	@ 0x4d
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f003 fc94 	bl	80066fa <USB_HC_Halt>
 8002dd2:	e365      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f002 fee2 	bl	8005ba6 <USB_ReadChInterrupts>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de8:	2b40      	cmp	r3, #64	@ 0x40
 8002dea:	d139      	bne.n	8002e60 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	334d      	adds	r3, #77	@ 0x4d
 8002dfc:	2205      	movs	r2, #5
 8002dfe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	331a      	adds	r3, #26
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	1a9b      	subs	r3, r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	3319      	adds	r3, #25
 8002e26:	2201      	movs	r2, #1
 8002e28:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e2a:	78fa      	ldrb	r2, [r7, #3]
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	1a9b      	subs	r3, r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	3344      	adds	r3, #68	@ 0x44
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	4611      	mov	r1, r2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f003 fc57 	bl	80066fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2340      	movs	r3, #64	@ 0x40
 8002e5c:	6093      	str	r3, [r2, #8]
 8002e5e:	e31f      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	78fa      	ldrb	r2, [r7, #3]
 8002e66:	4611      	mov	r1, r2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f002 fe9c 	bl	8005ba6 <USB_ReadChInterrupts>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d11a      	bne.n	8002eae <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e84:	461a      	mov	r2, r3
 8002e86:	2308      	movs	r3, #8
 8002e88:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	334d      	adds	r3, #77	@ 0x4d
 8002e9a:	2206      	movs	r2, #6
 8002e9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f003 fc27 	bl	80066fa <USB_HC_Halt>
 8002eac:	e2f8      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f002 fe75 	bl	8005ba6 <USB_ReadChInterrupts>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	f003 0310 	and.w	r3, r3, #16
 8002ec2:	2b10      	cmp	r3, #16
 8002ec4:	d144      	bne.n	8002f50 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	3344      	adds	r3, #68	@ 0x44
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	334d      	adds	r3, #77	@ 0x4d
 8002eea:	2204      	movs	r2, #4
 8002eec:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	3319      	adds	r3, #25
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d114      	bne.n	8002f2e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002f04:	78fa      	ldrb	r2, [r7, #3]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	3318      	adds	r3, #24
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d109      	bne.n	8002f2e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	3319      	adds	r3, #25
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f003 fbdf 	bl	80066fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2310      	movs	r3, #16
 8002f4c:	6093      	str	r3, [r2, #8]
 8002f4e:	e2a7      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	78fa      	ldrb	r2, [r7, #3]
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f002 fe24 	bl	8005ba6 <USB_ReadChInterrupts>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f64:	2b80      	cmp	r3, #128	@ 0x80
 8002f66:	f040 8083 	bne.w	8003070 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	799b      	ldrb	r3, [r3, #6]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d111      	bne.n	8002f96 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	334d      	adds	r3, #77	@ 0x4d
 8002f82:	2207      	movs	r2, #7
 8002f84:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f003 fbb3 	bl	80066fa <USB_HC_Halt>
 8002f94:	e062      	b.n	800305c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002f96:	78fa      	ldrb	r2, [r7, #3]
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	1a9b      	subs	r3, r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	3344      	adds	r3, #68	@ 0x44
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	1c59      	adds	r1, r3, #1
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4403      	add	r3, r0
 8002fb6:	3344      	adds	r3, #68	@ 0x44
 8002fb8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fba:	78fa      	ldrb	r2, [r7, #3]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	3344      	adds	r3, #68	@ 0x44
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d922      	bls.n	8003016 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	3344      	adds	r3, #68	@ 0x44
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	334c      	adds	r3, #76	@ 0x4c
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	334c      	adds	r3, #76	@ 0x4c
 8003008:	781a      	ldrb	r2, [r3, #0]
 800300a:	78fb      	ldrb	r3, [r7, #3]
 800300c:	4619      	mov	r1, r3
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f005 fed2 	bl	8008db8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003014:	e022      	b.n	800305c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003016:	78fa      	ldrb	r2, [r7, #3]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	334c      	adds	r3, #76	@ 0x4c
 8003026:	2202      	movs	r2, #2
 8003028:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800302a:	78fb      	ldrb	r3, [r7, #3]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4413      	add	r3, r2
 8003032:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003040:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003048:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800304a:	78fb      	ldrb	r3, [r7, #3]
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	4413      	add	r3, r2
 8003052:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003056:	461a      	mov	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4413      	add	r3, r2
 8003064:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003068:	461a      	mov	r2, r3
 800306a:	2380      	movs	r3, #128	@ 0x80
 800306c:	6093      	str	r3, [r2, #8]
 800306e:	e217      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	78fa      	ldrb	r2, [r7, #3]
 8003076:	4611      	mov	r1, r2
 8003078:	4618      	mov	r0, r3
 800307a:	f002 fd94 	bl	8005ba6 <USB_ReadChInterrupts>
 800307e:	4603      	mov	r3, r0
 8003080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003084:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003088:	d11b      	bne.n	80030c2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800308a:	78fa      	ldrb	r2, [r7, #3]
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	1a9b      	subs	r3, r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	334d      	adds	r3, #77	@ 0x4d
 800309a:	2209      	movs	r2, #9
 800309c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	78fa      	ldrb	r2, [r7, #3]
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f003 fb27 	bl	80066fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030b8:	461a      	mov	r2, r3
 80030ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030be:	6093      	str	r3, [r2, #8]
 80030c0:	e1ee      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	4611      	mov	r1, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f002 fd6b 	bl	8005ba6 <USB_ReadChInterrupts>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	f040 81df 	bne.w	800349a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030e8:	461a      	mov	r2, r3
 80030ea:	2302      	movs	r3, #2
 80030ec:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80030ee:	78fa      	ldrb	r2, [r7, #3]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	1a9b      	subs	r3, r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	334d      	adds	r3, #77	@ 0x4d
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b01      	cmp	r3, #1
 8003102:	f040 8093 	bne.w	800322c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	334d      	adds	r3, #77	@ 0x4d
 8003116:	2202      	movs	r2, #2
 8003118:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	334c      	adds	r3, #76	@ 0x4c
 800312a:	2201      	movs	r2, #1
 800312c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	3326      	adds	r3, #38	@ 0x26
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d00b      	beq.n	800315c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	3326      	adds	r3, #38	@ 0x26
 8003154:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003156:	2b03      	cmp	r3, #3
 8003158:	f040 8190 	bne.w	800347c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	799b      	ldrb	r3, [r3, #6]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d115      	bne.n	8003190 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	333d      	adds	r3, #61	@ 0x3d
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	f083 0301 	eor.w	r3, r3, #1
 800317c:	b2d8      	uxtb	r0, r3
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	333d      	adds	r3, #61	@ 0x3d
 800318c:	4602      	mov	r2, r0
 800318e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	799b      	ldrb	r3, [r3, #6]
 8003194:	2b01      	cmp	r3, #1
 8003196:	f040 8171 	bne.w	800347c <HCD_HC_OUT_IRQHandler+0x954>
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	3334      	adds	r3, #52	@ 0x34
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8165 	beq.w	800347c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	3334      	adds	r3, #52	@ 0x34
 80031c2:	6819      	ldr	r1, [r3, #0]
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4403      	add	r3, r0
 80031d2:	3328      	adds	r3, #40	@ 0x28
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	440b      	add	r3, r1
 80031d8:	1e59      	subs	r1, r3, #1
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4403      	add	r3, r0
 80031e8:	3328      	adds	r3, #40	@ 0x28
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80031f0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 813f 	beq.w	800347c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	333d      	adds	r3, #61	@ 0x3d
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	78fa      	ldrb	r2, [r7, #3]
 8003212:	f083 0301 	eor.w	r3, r3, #1
 8003216:	b2d8      	uxtb	r0, r3
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	333d      	adds	r3, #61	@ 0x3d
 8003226:	4602      	mov	r2, r0
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	e127      	b.n	800347c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	334d      	adds	r3, #77	@ 0x4d
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b03      	cmp	r3, #3
 8003240:	d120      	bne.n	8003284 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	334d      	adds	r3, #77	@ 0x4d
 8003252:	2202      	movs	r2, #2
 8003254:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	331b      	adds	r3, #27
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b01      	cmp	r3, #1
 800326a:	f040 8107 	bne.w	800347c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	334c      	adds	r3, #76	@ 0x4c
 800327e:	2202      	movs	r2, #2
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	e0fb      	b.n	800347c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	334d      	adds	r3, #77	@ 0x4d
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b04      	cmp	r3, #4
 8003298:	d13a      	bne.n	8003310 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800329a:	78fa      	ldrb	r2, [r7, #3]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	334d      	adds	r3, #77	@ 0x4d
 80032aa:	2202      	movs	r2, #2
 80032ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	334c      	adds	r3, #76	@ 0x4c
 80032be:	2202      	movs	r2, #2
 80032c0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	331b      	adds	r3, #27
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	f040 80d1 	bne.w	800347c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	331b      	adds	r3, #27
 80032ea:	2200      	movs	r2, #0
 80032ec:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80032ee:	78fb      	ldrb	r3, [r7, #3]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	0151      	lsls	r1, r2, #5
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	440a      	add	r2, r1
 8003304:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003308:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800330c:	6053      	str	r3, [r2, #4]
 800330e:	e0b5      	b.n	800347c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	334d      	adds	r3, #77	@ 0x4d
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b05      	cmp	r3, #5
 8003324:	d114      	bne.n	8003350 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	334d      	adds	r3, #77	@ 0x4d
 8003336:	2202      	movs	r2, #2
 8003338:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	334c      	adds	r3, #76	@ 0x4c
 800334a:	2202      	movs	r2, #2
 800334c:	701a      	strb	r2, [r3, #0]
 800334e:	e095      	b.n	800347c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003350:	78fa      	ldrb	r2, [r7, #3]
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	1a9b      	subs	r3, r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	334d      	adds	r3, #77	@ 0x4d
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b06      	cmp	r3, #6
 8003364:	d114      	bne.n	8003390 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003366:	78fa      	ldrb	r2, [r7, #3]
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	334d      	adds	r3, #77	@ 0x4d
 8003376:	2202      	movs	r2, #2
 8003378:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	334c      	adds	r3, #76	@ 0x4c
 800338a:	2205      	movs	r2, #5
 800338c:	701a      	strb	r2, [r3, #0]
 800338e:	e075      	b.n	800347c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003390:	78fa      	ldrb	r2, [r7, #3]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	334d      	adds	r3, #77	@ 0x4d
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b07      	cmp	r3, #7
 80033a4:	d00a      	beq.n	80033bc <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80033a6:	78fa      	ldrb	r2, [r7, #3]
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	334d      	adds	r3, #77	@ 0x4d
 80033b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033b8:	2b09      	cmp	r3, #9
 80033ba:	d170      	bne.n	800349e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033bc:	78fa      	ldrb	r2, [r7, #3]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	334d      	adds	r3, #77	@ 0x4d
 80033cc:	2202      	movs	r2, #2
 80033ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	3344      	adds	r3, #68	@ 0x44
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	1c59      	adds	r1, r3, #1
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4403      	add	r3, r0
 80033f0:	3344      	adds	r3, #68	@ 0x44
 80033f2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	3344      	adds	r3, #68	@ 0x44
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d914      	bls.n	8003434 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	3344      	adds	r3, #68	@ 0x44
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	334c      	adds	r3, #76	@ 0x4c
 800342e:	2204      	movs	r2, #4
 8003430:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003432:	e022      	b.n	800347a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003434:	78fa      	ldrb	r2, [r7, #3]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	334c      	adds	r3, #76	@ 0x4c
 8003444:	2202      	movs	r2, #2
 8003446:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4413      	add	r3, r2
 8003450:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800345e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003466:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4413      	add	r3, r2
 8003470:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003474:	461a      	mov	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800347a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800347c:	78fa      	ldrb	r2, [r7, #3]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	334c      	adds	r3, #76	@ 0x4c
 800348c:	781a      	ldrb	r2, [r3, #0]
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	4619      	mov	r1, r3
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f005 fc90 	bl	8008db8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003498:	e002      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800349a:	bf00      	nop
 800349c:	e000      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800349e:	bf00      	nop
  }
}
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b08a      	sub	sp, #40	@ 0x28
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	0c5b      	lsrs	r3, r3, #17
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034da:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d004      	beq.n	80034ec <HCD_RXQLVL_IRQHandler+0x46>
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b05      	cmp	r3, #5
 80034e6:	f000 80b6 	beq.w	8003656 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80034ea:	e0b7      	b.n	800365c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80b3 	beq.w	800365a <HCD_RXQLVL_IRQHandler+0x1b4>
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4613      	mov	r3, r2
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	332c      	adds	r3, #44	@ 0x2c
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 80a7 	beq.w	800365a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4613      	mov	r3, r2
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	1a9b      	subs	r3, r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	3338      	adds	r3, #56	@ 0x38
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	18d1      	adds	r1, r2, r3
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4613      	mov	r3, r2
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	1a9b      	subs	r3, r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4403      	add	r3, r0
 8003530:	3334      	adds	r3, #52	@ 0x34
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4299      	cmp	r1, r3
 8003536:	f200 8083 	bhi.w	8003640 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4613      	mov	r3, r2
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	1a9b      	subs	r3, r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	332c      	adds	r3, #44	@ 0x2c
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	b292      	uxth	r2, r2
 8003554:	4619      	mov	r1, r3
 8003556:	f002 fabb 	bl	8005ad0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4613      	mov	r3, r2
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	332c      	adds	r3, #44	@ 0x2c
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	18d1      	adds	r1, r2, r3
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4403      	add	r3, r0
 800357e:	332c      	adds	r3, #44	@ 0x2c
 8003580:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4613      	mov	r3, r2
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	3338      	adds	r3, #56	@ 0x38
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	18d1      	adds	r1, r2, r3
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4613      	mov	r3, r2
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4403      	add	r3, r0
 80035a6:	3338      	adds	r3, #56	@ 0x38
 80035a8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	0cdb      	lsrs	r3, r3, #19
 80035ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035be:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4613      	mov	r3, r2
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	3328      	adds	r3, #40	@ 0x28
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d13f      	bne.n	800365a <HCD_RXQLVL_IRQHandler+0x1b4>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d03c      	beq.n	800365a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035f6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035fe:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	4413      	add	r3, r2
 8003608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800360c:	461a      	mov	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4613      	mov	r3, r2
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	333c      	adds	r3, #60	@ 0x3c
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	f083 0301 	eor.w	r3, r3, #1
 8003628:	b2d8      	uxtb	r0, r3
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4613      	mov	r3, r2
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	1a9b      	subs	r3, r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	333c      	adds	r3, #60	@ 0x3c
 800363a:	4602      	mov	r2, r0
 800363c:	701a      	strb	r2, [r3, #0]
      break;
 800363e:	e00c      	b.n	800365a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4613      	mov	r3, r2
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	334c      	adds	r3, #76	@ 0x4c
 8003650:	2204      	movs	r2, #4
 8003652:	701a      	strb	r2, [r3, #0]
      break;
 8003654:	e001      	b.n	800365a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003656:	bf00      	nop
 8003658:	e000      	b.n	800365c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800365a:	bf00      	nop
  }
}
 800365c:	bf00      	nop
 800365e:	3728      	adds	r7, #40	@ 0x28
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003690:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b02      	cmp	r3, #2
 800369a:	d10b      	bne.n	80036b4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d102      	bne.n	80036ac <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f005 fb6a 	bl	8008d80 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f043 0302 	orr.w	r3, r3, #2
 80036b2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d132      	bne.n	8003724 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f043 0308 	orr.w	r3, r3, #8
 80036c4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d126      	bne.n	800371e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	7a5b      	ldrb	r3, [r3, #9]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d113      	bne.n	8003700 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80036de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036e2:	d106      	bne.n	80036f2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2102      	movs	r1, #2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f002 fb86 	bl	8005dfc <USB_InitFSLSPClkSel>
 80036f0:	e011      	b.n	8003716 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2101      	movs	r1, #1
 80036f8:	4618      	mov	r0, r3
 80036fa:	f002 fb7f 	bl	8005dfc <USB_InitFSLSPClkSel>
 80036fe:	e00a      	b.n	8003716 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	79db      	ldrb	r3, [r3, #7]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d106      	bne.n	8003716 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800370e:	461a      	mov	r2, r3
 8003710:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003714:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f005 fb5c 	bl	8008dd4 <HAL_HCD_PortEnabled_Callback>
 800371c:	e002      	b.n	8003724 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f005 fb66 	bl	8008df0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b20      	cmp	r3, #32
 800372c:	d103      	bne.n	8003736 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f043 0320 	orr.w	r3, r3, #32
 8003734:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800373c:	461a      	mov	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	6013      	str	r3, [r2, #0]
}
 8003742:	bf00      	nop
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e12b      	b.n	80039b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d106      	bne.n	8003778 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7fc ffea 	bl	800074c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2224      	movs	r2, #36	@ 0x24
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0201 	bic.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800379e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037b0:	f001 fa20 	bl	8004bf4 <HAL_RCC_GetPCLK1Freq>
 80037b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4a81      	ldr	r2, [pc, #516]	@ (80039c0 <HAL_I2C_Init+0x274>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d807      	bhi.n	80037d0 <HAL_I2C_Init+0x84>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4a80      	ldr	r2, [pc, #512]	@ (80039c4 <HAL_I2C_Init+0x278>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	bf94      	ite	ls
 80037c8:	2301      	movls	r3, #1
 80037ca:	2300      	movhi	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	e006      	b.n	80037de <HAL_I2C_Init+0x92>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4a7d      	ldr	r2, [pc, #500]	@ (80039c8 <HAL_I2C_Init+0x27c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	bf94      	ite	ls
 80037d8:	2301      	movls	r3, #1
 80037da:	2300      	movhi	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e0e7      	b.n	80039b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4a78      	ldr	r2, [pc, #480]	@ (80039cc <HAL_I2C_Init+0x280>)
 80037ea:	fba2 2303 	umull	r2, r3, r2, r3
 80037ee:	0c9b      	lsrs	r3, r3, #18
 80037f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	430a      	orrs	r2, r1
 8003804:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4a6a      	ldr	r2, [pc, #424]	@ (80039c0 <HAL_I2C_Init+0x274>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d802      	bhi.n	8003820 <HAL_I2C_Init+0xd4>
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	3301      	adds	r3, #1
 800381e:	e009      	b.n	8003834 <HAL_I2C_Init+0xe8>
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	4a69      	ldr	r2, [pc, #420]	@ (80039d0 <HAL_I2C_Init+0x284>)
 800382c:	fba2 2303 	umull	r2, r3, r2, r3
 8003830:	099b      	lsrs	r3, r3, #6
 8003832:	3301      	adds	r3, #1
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	430b      	orrs	r3, r1
 800383a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003846:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	495c      	ldr	r1, [pc, #368]	@ (80039c0 <HAL_I2C_Init+0x274>)
 8003850:	428b      	cmp	r3, r1
 8003852:	d819      	bhi.n	8003888 <HAL_I2C_Init+0x13c>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	1e59      	subs	r1, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003862:	1c59      	adds	r1, r3, #1
 8003864:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003868:	400b      	ands	r3, r1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_I2C_Init+0x138>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	1e59      	subs	r1, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	fbb1 f3f3 	udiv	r3, r1, r3
 800387c:	3301      	adds	r3, #1
 800387e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003882:	e051      	b.n	8003928 <HAL_I2C_Init+0x1dc>
 8003884:	2304      	movs	r3, #4
 8003886:	e04f      	b.n	8003928 <HAL_I2C_Init+0x1dc>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d111      	bne.n	80038b4 <HAL_I2C_Init+0x168>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1e58      	subs	r0, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6859      	ldr	r1, [r3, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	440b      	add	r3, r1
 800389e:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a2:	3301      	adds	r3, #1
 80038a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	bf0c      	ite	eq
 80038ac:	2301      	moveq	r3, #1
 80038ae:	2300      	movne	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	e012      	b.n	80038da <HAL_I2C_Init+0x18e>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	1e58      	subs	r0, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6859      	ldr	r1, [r3, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	0099      	lsls	r1, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ca:	3301      	adds	r3, #1
 80038cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf0c      	ite	eq
 80038d4:	2301      	moveq	r3, #1
 80038d6:	2300      	movne	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_I2C_Init+0x196>
 80038de:	2301      	movs	r3, #1
 80038e0:	e022      	b.n	8003928 <HAL_I2C_Init+0x1dc>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10e      	bne.n	8003908 <HAL_I2C_Init+0x1bc>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	1e58      	subs	r0, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6859      	ldr	r1, [r3, #4]
 80038f2:	460b      	mov	r3, r1
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	440b      	add	r3, r1
 80038f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038fc:	3301      	adds	r3, #1
 80038fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003902:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003906:	e00f      	b.n	8003928 <HAL_I2C_Init+0x1dc>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	1e58      	subs	r0, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6859      	ldr	r1, [r3, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	0099      	lsls	r1, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	fbb0 f3f3 	udiv	r3, r0, r3
 800391e:	3301      	adds	r3, #1
 8003920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003924:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	6809      	ldr	r1, [r1, #0]
 800392c:	4313      	orrs	r3, r2
 800392e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69da      	ldr	r2, [r3, #28]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003956:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6911      	ldr	r1, [r2, #16]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68d2      	ldr	r2, [r2, #12]
 8003962:	4311      	orrs	r1, r2
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6812      	ldr	r2, [r2, #0]
 8003968:	430b      	orrs	r3, r1
 800396a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695a      	ldr	r2, [r3, #20]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	000186a0 	.word	0x000186a0
 80039c4:	001e847f 	.word	0x001e847f
 80039c8:	003d08ff 	.word	0x003d08ff
 80039cc:	431bde83 	.word	0x431bde83
 80039d0:	10624dd3 	.word	0x10624dd3

080039d4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e128      	b.n	8003c38 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a90      	ldr	r2, [pc, #576]	@ (8003c40 <HAL_I2S_Init+0x26c>)
 80039fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7fc ff1b 	bl	800083c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2202      	movs	r2, #2
 8003a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6812      	ldr	r2, [r2, #0]
 8003a18:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a1c:	f023 030f 	bic.w	r3, r3, #15
 8003a20:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2202      	movs	r2, #2
 8003a28:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d060      	beq.n	8003af4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d102      	bne.n	8003a40 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a3a:	2310      	movs	r3, #16
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	e001      	b.n	8003a44 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a40:	2320      	movs	r3, #32
 8003a42:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d802      	bhi.n	8003a52 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a52:	2001      	movs	r0, #1
 8003a54:	f001 f9d8 	bl	8004e08 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a58:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a62:	d125      	bne.n	8003ab0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d010      	beq.n	8003a8e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a76:	4613      	mov	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	461a      	mov	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a88:	3305      	adds	r3, #5
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	e01f      	b.n	8003ace <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aaa:	3305      	adds	r3, #5
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	e00e      	b.n	8003ace <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab8:	4613      	mov	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aca:	3305      	adds	r3, #5
 8003acc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4a5c      	ldr	r2, [pc, #368]	@ (8003c44 <HAL_I2S_Init+0x270>)
 8003ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad6:	08db      	lsrs	r3, r3, #3
 8003ad8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	085b      	lsrs	r3, r3, #1
 8003aea:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	021b      	lsls	r3, r3, #8
 8003af0:	61bb      	str	r3, [r7, #24]
 8003af2:	e003      	b.n	8003afc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003af4:	2302      	movs	r3, #2
 8003af6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d902      	bls.n	8003b08 <HAL_I2S_Init+0x134>
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	2bff      	cmp	r3, #255	@ 0xff
 8003b06:	d907      	bls.n	8003b18 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0c:	f043 0210 	orr.w	r2, r3, #16
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e08f      	b.n	8003c38 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	ea42 0103 	orr.w	r1, r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69fa      	ldr	r2, [r7, #28]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b36:	f023 030f 	bic.w	r3, r3, #15
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6851      	ldr	r1, [r2, #4]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6892      	ldr	r2, [r2, #8]
 8003b42:	4311      	orrs	r1, r2
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	68d2      	ldr	r2, [r2, #12]
 8003b48:	4311      	orrs	r1, r2
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6992      	ldr	r2, [r2, #24]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b5a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d161      	bne.n	8003c28 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a38      	ldr	r2, [pc, #224]	@ (8003c48 <HAL_I2S_Init+0x274>)
 8003b68:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a37      	ldr	r2, [pc, #220]	@ (8003c4c <HAL_I2S_Init+0x278>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d101      	bne.n	8003b78 <HAL_I2S_Init+0x1a4>
 8003b74:	4b36      	ldr	r3, [pc, #216]	@ (8003c50 <HAL_I2S_Init+0x27c>)
 8003b76:	e001      	b.n	8003b7c <HAL_I2S_Init+0x1a8>
 8003b78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	4932      	ldr	r1, [pc, #200]	@ (8003c4c <HAL_I2S_Init+0x278>)
 8003b84:	428a      	cmp	r2, r1
 8003b86:	d101      	bne.n	8003b8c <HAL_I2S_Init+0x1b8>
 8003b88:	4a31      	ldr	r2, [pc, #196]	@ (8003c50 <HAL_I2S_Init+0x27c>)
 8003b8a:	e001      	b.n	8003b90 <HAL_I2S_Init+0x1bc>
 8003b8c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003b90:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b94:	f023 030f 	bic.w	r3, r3, #15
 8003b98:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a2b      	ldr	r2, [pc, #172]	@ (8003c4c <HAL_I2S_Init+0x278>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d101      	bne.n	8003ba8 <HAL_I2S_Init+0x1d4>
 8003ba4:	4b2a      	ldr	r3, [pc, #168]	@ (8003c50 <HAL_I2S_Init+0x27c>)
 8003ba6:	e001      	b.n	8003bac <HAL_I2S_Init+0x1d8>
 8003ba8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bac:	2202      	movs	r2, #2
 8003bae:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a25      	ldr	r2, [pc, #148]	@ (8003c4c <HAL_I2S_Init+0x278>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d101      	bne.n	8003bbe <HAL_I2S_Init+0x1ea>
 8003bba:	4b25      	ldr	r3, [pc, #148]	@ (8003c50 <HAL_I2S_Init+0x27c>)
 8003bbc:	e001      	b.n	8003bc2 <HAL_I2S_Init+0x1ee>
 8003bbe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bce:	d003      	beq.n	8003bd8 <HAL_I2S_Init+0x204>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d103      	bne.n	8003be0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003bd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	e001      	b.n	8003be4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003be0:	2300      	movs	r3, #0
 8003be2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c02:	4313      	orrs	r3, r2
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	897b      	ldrh	r3, [r7, #10]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c10:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a0d      	ldr	r2, [pc, #52]	@ (8003c4c <HAL_I2S_Init+0x278>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d101      	bne.n	8003c20 <HAL_I2S_Init+0x24c>
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c50 <HAL_I2S_Init+0x27c>)
 8003c1e:	e001      	b.n	8003c24 <HAL_I2S_Init+0x250>
 8003c20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c24:	897a      	ldrh	r2, [r7, #10]
 8003c26:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3720      	adds	r7, #32
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	08003d4b 	.word	0x08003d4b
 8003c44:	cccccccd 	.word	0xcccccccd
 8003c48:	08003e61 	.word	0x08003e61
 8003c4c:	40003800 	.word	0x40003800
 8003c50:	40003400 	.word	0x40003400

08003c54 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	881a      	ldrh	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca8:	1c9a      	adds	r2, r3, #2
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10e      	bne.n	8003ce4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003cd4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7ff ffb8 	bl	8003c54 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ce4:	bf00      	nop
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfe:	b292      	uxth	r2, r2
 8003d00:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d06:	1c9a      	adds	r2, r3, #2
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10e      	bne.n	8003d42 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d32:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff ff93 	bl	8003c68 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b086      	sub	sp, #24
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d13a      	bne.n	8003ddc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d109      	bne.n	8003d84 <I2S_IRQHandler+0x3a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d7a:	2b40      	cmp	r3, #64	@ 0x40
 8003d7c:	d102      	bne.n	8003d84 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff ffb4 	bl	8003cec <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8a:	2b40      	cmp	r3, #64	@ 0x40
 8003d8c:	d126      	bne.n	8003ddc <I2S_IRQHandler+0x92>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d11f      	bne.n	8003ddc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003daa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003dac:	2300      	movs	r3, #0
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	613b      	str	r3, [r7, #16]
 8003dc0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dce:	f043 0202 	orr.w	r2, r3, #2
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff ff50 	bl	8003c7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b03      	cmp	r3, #3
 8003de6:	d136      	bne.n	8003e56 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d109      	bne.n	8003e06 <I2S_IRQHandler+0xbc>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dfc:	2b80      	cmp	r3, #128	@ 0x80
 8003dfe:	d102      	bne.n	8003e06 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff ff45 	bl	8003c90 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d122      	bne.n	8003e56 <I2S_IRQHandler+0x10c>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	d11b      	bne.n	8003e56 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e2c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e48:	f043 0204 	orr.w	r2, r3, #4
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff ff13 	bl	8003c7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e56:	bf00      	nop
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a92      	ldr	r2, [pc, #584]	@ (80040c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d101      	bne.n	8003e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e7a:	4b92      	ldr	r3, [pc, #584]	@ (80040c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e7c:	e001      	b.n	8003e82 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a8b      	ldr	r2, [pc, #556]	@ (80040c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d101      	bne.n	8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e98:	4b8a      	ldr	r3, [pc, #552]	@ (80040c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e9a:	e001      	b.n	8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eac:	d004      	beq.n	8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f040 8099 	bne.w	8003fea <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d107      	bne.n	8003ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f925 	bl	800411c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d107      	bne.n	8003eec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f9c8 	bl	800427c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef2:	2b40      	cmp	r3, #64	@ 0x40
 8003ef4:	d13a      	bne.n	8003f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f003 0320 	and.w	r3, r3, #32
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d035      	beq.n	8003f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a6e      	ldr	r2, [pc, #440]	@ (80040c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d101      	bne.n	8003f0e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f0a:	4b6e      	ldr	r3, [pc, #440]	@ (80040c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f0c:	e001      	b.n	8003f12 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f0e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4969      	ldr	r1, [pc, #420]	@ (80040c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f1a:	428b      	cmp	r3, r1
 8003f1c:	d101      	bne.n	8003f22 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f1e:	4b69      	ldr	r3, [pc, #420]	@ (80040c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f20:	e001      	b.n	8003f26 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f22:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f26:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f2a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f3a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5e:	f043 0202 	orr.w	r2, r3, #2
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff fe88 	bl	8003c7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	f040 80c3 	bne.w	80040fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f003 0320 	and.w	r3, r3, #32
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 80bd 	beq.w	80040fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f92:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a49      	ldr	r2, [pc, #292]	@ (80040c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d101      	bne.n	8003fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f9e:	4b49      	ldr	r3, [pc, #292]	@ (80040c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fa0:	e001      	b.n	8003fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003fa2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4944      	ldr	r1, [pc, #272]	@ (80040c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fae:	428b      	cmp	r3, r1
 8003fb0:	d101      	bne.n	8003fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003fb2:	4b44      	ldr	r3, [pc, #272]	@ (80040c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fb4:	e001      	b.n	8003fba <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003fb6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fbe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60bb      	str	r3, [r7, #8]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	60bb      	str	r3, [r7, #8]
 8003fcc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fda:	f043 0204 	orr.w	r2, r3, #4
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff fe4a 	bl	8003c7c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fe8:	e089      	b.n	80040fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d107      	bne.n	8004004 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f8be 	bl	8004180 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b01      	cmp	r3, #1
 800400c:	d107      	bne.n	800401e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f8fd 	bl	8004218 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004024:	2b40      	cmp	r3, #64	@ 0x40
 8004026:	d12f      	bne.n	8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d02a      	beq.n	8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004040:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a1e      	ldr	r2, [pc, #120]	@ (80040c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d101      	bne.n	8004050 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800404c:	4b1d      	ldr	r3, [pc, #116]	@ (80040c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800404e:	e001      	b.n	8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004050:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4919      	ldr	r1, [pc, #100]	@ (80040c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800405c:	428b      	cmp	r3, r1
 800405e:	d101      	bne.n	8004064 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004060:	4b18      	ldr	r3, [pc, #96]	@ (80040c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004062:	e001      	b.n	8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004064:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004068:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800406c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407a:	f043 0202 	orr.w	r2, r3, #2
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff fdfa 	bl	8003c7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	2b08      	cmp	r3, #8
 8004090:	d136      	bne.n	8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f003 0320 	and.w	r3, r3, #32
 8004098:	2b00      	cmp	r3, #0
 800409a:	d031      	beq.n	8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a07      	ldr	r2, [pc, #28]	@ (80040c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d101      	bne.n	80040aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80040a6:	4b07      	ldr	r3, [pc, #28]	@ (80040c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040a8:	e001      	b.n	80040ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80040aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4902      	ldr	r1, [pc, #8]	@ (80040c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040b6:	428b      	cmp	r3, r1
 80040b8:	d106      	bne.n	80040c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80040ba:	4b02      	ldr	r3, [pc, #8]	@ (80040c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040bc:	e006      	b.n	80040cc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80040be:	bf00      	nop
 80040c0:	40003800 	.word	0x40003800
 80040c4:	40003400 	.word	0x40003400
 80040c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040cc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040d0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040e0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ee:	f043 0204 	orr.w	r2, r3, #4
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7ff fdc0 	bl	8003c7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040fc:	e000      	b.n	8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040fe:	bf00      	nop
}
 8004100:	bf00      	nop
 8004102:	3720      	adds	r7, #32
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	1c99      	adds	r1, r3, #2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6251      	str	r1, [r2, #36]	@ 0x24
 800412e:	881a      	ldrh	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d113      	bne.n	8004176 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800415c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d106      	bne.n	8004176 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff ffc9 	bl	8004108 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418c:	1c99      	adds	r1, r3, #2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6251      	str	r1, [r2, #36]	@ 0x24
 8004192:	8819      	ldrh	r1, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a1d      	ldr	r2, [pc, #116]	@ (8004210 <I2SEx_TxISR_I2SExt+0x90>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d101      	bne.n	80041a2 <I2SEx_TxISR_I2SExt+0x22>
 800419e:	4b1d      	ldr	r3, [pc, #116]	@ (8004214 <I2SEx_TxISR_I2SExt+0x94>)
 80041a0:	e001      	b.n	80041a6 <I2SEx_TxISR_I2SExt+0x26>
 80041a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041a6:	460a      	mov	r2, r1
 80041a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d121      	bne.n	8004206 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a12      	ldr	r2, [pc, #72]	@ (8004210 <I2SEx_TxISR_I2SExt+0x90>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d101      	bne.n	80041d0 <I2SEx_TxISR_I2SExt+0x50>
 80041cc:	4b11      	ldr	r3, [pc, #68]	@ (8004214 <I2SEx_TxISR_I2SExt+0x94>)
 80041ce:	e001      	b.n	80041d4 <I2SEx_TxISR_I2SExt+0x54>
 80041d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	490d      	ldr	r1, [pc, #52]	@ (8004210 <I2SEx_TxISR_I2SExt+0x90>)
 80041dc:	428b      	cmp	r3, r1
 80041de:	d101      	bne.n	80041e4 <I2SEx_TxISR_I2SExt+0x64>
 80041e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004214 <I2SEx_TxISR_I2SExt+0x94>)
 80041e2:	e001      	b.n	80041e8 <I2SEx_TxISR_I2SExt+0x68>
 80041e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d106      	bne.n	8004206 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff ff81 	bl	8004108 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004206:	bf00      	nop
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40003800 	.word	0x40003800
 8004214:	40003400 	.word	0x40003400

08004218 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68d8      	ldr	r0, [r3, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422a:	1c99      	adds	r1, r3, #2
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004230:	b282      	uxth	r2, r0
 8004232:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004238:	b29b      	uxth	r3, r3
 800423a:	3b01      	subs	r3, #1
 800423c:	b29a      	uxth	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d113      	bne.n	8004274 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800425a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff ff4a 	bl	8004108 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004274:	bf00      	nop
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a20      	ldr	r2, [pc, #128]	@ (800430c <I2SEx_RxISR_I2SExt+0x90>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d101      	bne.n	8004292 <I2SEx_RxISR_I2SExt+0x16>
 800428e:	4b20      	ldr	r3, [pc, #128]	@ (8004310 <I2SEx_RxISR_I2SExt+0x94>)
 8004290:	e001      	b.n	8004296 <I2SEx_RxISR_I2SExt+0x1a>
 8004292:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004296:	68d8      	ldr	r0, [r3, #12]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429c:	1c99      	adds	r1, r3, #2
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80042a2:	b282      	uxth	r2, r0
 80042a4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d121      	bne.n	8004302 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a12      	ldr	r2, [pc, #72]	@ (800430c <I2SEx_RxISR_I2SExt+0x90>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d101      	bne.n	80042cc <I2SEx_RxISR_I2SExt+0x50>
 80042c8:	4b11      	ldr	r3, [pc, #68]	@ (8004310 <I2SEx_RxISR_I2SExt+0x94>)
 80042ca:	e001      	b.n	80042d0 <I2SEx_RxISR_I2SExt+0x54>
 80042cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	490d      	ldr	r1, [pc, #52]	@ (800430c <I2SEx_RxISR_I2SExt+0x90>)
 80042d8:	428b      	cmp	r3, r1
 80042da:	d101      	bne.n	80042e0 <I2SEx_RxISR_I2SExt+0x64>
 80042dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004310 <I2SEx_RxISR_I2SExt+0x94>)
 80042de:	e001      	b.n	80042e4 <I2SEx_RxISR_I2SExt+0x68>
 80042e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042e4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042e8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d106      	bne.n	8004302 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7ff ff03 	bl	8004108 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004302:	bf00      	nop
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	40003800 	.word	0x40003800
 8004310:	40003400 	.word	0x40003400

08004314 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e267      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d075      	beq.n	800441e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004332:	4b88      	ldr	r3, [pc, #544]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 030c 	and.w	r3, r3, #12
 800433a:	2b04      	cmp	r3, #4
 800433c:	d00c      	beq.n	8004358 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800433e:	4b85      	ldr	r3, [pc, #532]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004346:	2b08      	cmp	r3, #8
 8004348:	d112      	bne.n	8004370 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800434a:	4b82      	ldr	r3, [pc, #520]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004352:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004356:	d10b      	bne.n	8004370 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004358:	4b7e      	ldr	r3, [pc, #504]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d05b      	beq.n	800441c <HAL_RCC_OscConfig+0x108>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d157      	bne.n	800441c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e242      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004378:	d106      	bne.n	8004388 <HAL_RCC_OscConfig+0x74>
 800437a:	4b76      	ldr	r3, [pc, #472]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a75      	ldr	r2, [pc, #468]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 8004380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	e01d      	b.n	80043c4 <HAL_RCC_OscConfig+0xb0>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004390:	d10c      	bne.n	80043ac <HAL_RCC_OscConfig+0x98>
 8004392:	4b70      	ldr	r3, [pc, #448]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a6f      	ldr	r2, [pc, #444]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 8004398:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	4b6d      	ldr	r3, [pc, #436]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a6c      	ldr	r2, [pc, #432]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 80043a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	e00b      	b.n	80043c4 <HAL_RCC_OscConfig+0xb0>
 80043ac:	4b69      	ldr	r3, [pc, #420]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a68      	ldr	r2, [pc, #416]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 80043b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	4b66      	ldr	r3, [pc, #408]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a65      	ldr	r2, [pc, #404]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 80043be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d013      	beq.n	80043f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043cc:	f7fc fd9e 	bl	8000f0c <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d4:	f7fc fd9a 	bl	8000f0c <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b64      	cmp	r3, #100	@ 0x64
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e207      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e6:	4b5b      	ldr	r3, [pc, #364]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCC_OscConfig+0xc0>
 80043f2:	e014      	b.n	800441e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f4:	f7fc fd8a 	bl	8000f0c <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043fc:	f7fc fd86 	bl	8000f0c <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b64      	cmp	r3, #100	@ 0x64
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e1f3      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800440e:	4b51      	ldr	r3, [pc, #324]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0xe8>
 800441a:	e000      	b.n	800441e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800441c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d063      	beq.n	80044f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800442a:	4b4a      	ldr	r3, [pc, #296]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00b      	beq.n	800444e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004436:	4b47      	ldr	r3, [pc, #284]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800443e:	2b08      	cmp	r3, #8
 8004440:	d11c      	bne.n	800447c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004442:	4b44      	ldr	r3, [pc, #272]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d116      	bne.n	800447c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800444e:	4b41      	ldr	r3, [pc, #260]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <HAL_RCC_OscConfig+0x152>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d001      	beq.n	8004466 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e1c7      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004466:	4b3b      	ldr	r3, [pc, #236]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4937      	ldr	r1, [pc, #220]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 8004476:	4313      	orrs	r3, r2
 8004478:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447a:	e03a      	b.n	80044f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d020      	beq.n	80044c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004484:	4b34      	ldr	r3, [pc, #208]	@ (8004558 <HAL_RCC_OscConfig+0x244>)
 8004486:	2201      	movs	r2, #1
 8004488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448a:	f7fc fd3f 	bl	8000f0c <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004492:	f7fc fd3b 	bl	8000f0c <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e1a8      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0f0      	beq.n	8004492 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b0:	4b28      	ldr	r3, [pc, #160]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	4925      	ldr	r1, [pc, #148]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	600b      	str	r3, [r1, #0]
 80044c4:	e015      	b.n	80044f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044c6:	4b24      	ldr	r3, [pc, #144]	@ (8004558 <HAL_RCC_OscConfig+0x244>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044cc:	f7fc fd1e 	bl	8000f0c <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d4:	f7fc fd1a 	bl	8000f0c <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e187      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d036      	beq.n	800456c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d016      	beq.n	8004534 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004506:	4b15      	ldr	r3, [pc, #84]	@ (800455c <HAL_RCC_OscConfig+0x248>)
 8004508:	2201      	movs	r2, #1
 800450a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450c:	f7fc fcfe 	bl	8000f0c <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004514:	f7fc fcfa 	bl	8000f0c <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e167      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004526:	4b0b      	ldr	r3, [pc, #44]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 8004528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCC_OscConfig+0x200>
 8004532:	e01b      	b.n	800456c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004534:	4b09      	ldr	r3, [pc, #36]	@ (800455c <HAL_RCC_OscConfig+0x248>)
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800453a:	f7fc fce7 	bl	8000f0c <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004540:	e00e      	b.n	8004560 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004542:	f7fc fce3 	bl	8000f0c <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d907      	bls.n	8004560 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e150      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
 8004554:	40023800 	.word	0x40023800
 8004558:	42470000 	.word	0x42470000
 800455c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004560:	4b88      	ldr	r3, [pc, #544]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 8004562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1ea      	bne.n	8004542 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 8097 	beq.w	80046a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800457a:	2300      	movs	r3, #0
 800457c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800457e:	4b81      	ldr	r3, [pc, #516]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10f      	bne.n	80045aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800458a:	2300      	movs	r3, #0
 800458c:	60bb      	str	r3, [r7, #8]
 800458e:	4b7d      	ldr	r3, [pc, #500]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	4a7c      	ldr	r2, [pc, #496]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 8004594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004598:	6413      	str	r3, [r2, #64]	@ 0x40
 800459a:	4b7a      	ldr	r3, [pc, #488]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045a2:	60bb      	str	r3, [r7, #8]
 80045a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045a6:	2301      	movs	r3, #1
 80045a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045aa:	4b77      	ldr	r3, [pc, #476]	@ (8004788 <HAL_RCC_OscConfig+0x474>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d118      	bne.n	80045e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045b6:	4b74      	ldr	r3, [pc, #464]	@ (8004788 <HAL_RCC_OscConfig+0x474>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a73      	ldr	r2, [pc, #460]	@ (8004788 <HAL_RCC_OscConfig+0x474>)
 80045bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045c2:	f7fc fca3 	bl	8000f0c <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ca:	f7fc fc9f 	bl	8000f0c <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e10c      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045dc:	4b6a      	ldr	r3, [pc, #424]	@ (8004788 <HAL_RCC_OscConfig+0x474>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0f0      	beq.n	80045ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d106      	bne.n	80045fe <HAL_RCC_OscConfig+0x2ea>
 80045f0:	4b64      	ldr	r3, [pc, #400]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 80045f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f4:	4a63      	ldr	r2, [pc, #396]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 80045f6:	f043 0301 	orr.w	r3, r3, #1
 80045fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80045fc:	e01c      	b.n	8004638 <HAL_RCC_OscConfig+0x324>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	2b05      	cmp	r3, #5
 8004604:	d10c      	bne.n	8004620 <HAL_RCC_OscConfig+0x30c>
 8004606:	4b5f      	ldr	r3, [pc, #380]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460a:	4a5e      	ldr	r2, [pc, #376]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 800460c:	f043 0304 	orr.w	r3, r3, #4
 8004610:	6713      	str	r3, [r2, #112]	@ 0x70
 8004612:	4b5c      	ldr	r3, [pc, #368]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004616:	4a5b      	ldr	r2, [pc, #364]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	6713      	str	r3, [r2, #112]	@ 0x70
 800461e:	e00b      	b.n	8004638 <HAL_RCC_OscConfig+0x324>
 8004620:	4b58      	ldr	r3, [pc, #352]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 8004622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004624:	4a57      	ldr	r2, [pc, #348]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 8004626:	f023 0301 	bic.w	r3, r3, #1
 800462a:	6713      	str	r3, [r2, #112]	@ 0x70
 800462c:	4b55      	ldr	r3, [pc, #340]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 800462e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004630:	4a54      	ldr	r2, [pc, #336]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 8004632:	f023 0304 	bic.w	r3, r3, #4
 8004636:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d015      	beq.n	800466c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004640:	f7fc fc64 	bl	8000f0c <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004646:	e00a      	b.n	800465e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004648:	f7fc fc60 	bl	8000f0c <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004656:	4293      	cmp	r3, r2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e0cb      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800465e:	4b49      	ldr	r3, [pc, #292]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 8004660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0ee      	beq.n	8004648 <HAL_RCC_OscConfig+0x334>
 800466a:	e014      	b.n	8004696 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800466c:	f7fc fc4e 	bl	8000f0c <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004672:	e00a      	b.n	800468a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004674:	f7fc fc4a 	bl	8000f0c <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004682:	4293      	cmp	r3, r2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e0b5      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800468a:	4b3e      	ldr	r3, [pc, #248]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 800468c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1ee      	bne.n	8004674 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004696:	7dfb      	ldrb	r3, [r7, #23]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d105      	bne.n	80046a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800469c:	4b39      	ldr	r3, [pc, #228]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 800469e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a0:	4a38      	ldr	r2, [pc, #224]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 80046a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 80a1 	beq.w	80047f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046b2:	4b34      	ldr	r3, [pc, #208]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 030c 	and.w	r3, r3, #12
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d05c      	beq.n	8004778 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d141      	bne.n	800474a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c6:	4b31      	ldr	r3, [pc, #196]	@ (800478c <HAL_RCC_OscConfig+0x478>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046cc:	f7fc fc1e 	bl	8000f0c <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d4:	f7fc fc1a 	bl	8000f0c <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e087      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e6:	4b27      	ldr	r3, [pc, #156]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69da      	ldr	r2, [r3, #28]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004700:	019b      	lsls	r3, r3, #6
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004708:	085b      	lsrs	r3, r3, #1
 800470a:	3b01      	subs	r3, #1
 800470c:	041b      	lsls	r3, r3, #16
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004714:	061b      	lsls	r3, r3, #24
 8004716:	491b      	ldr	r1, [pc, #108]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 8004718:	4313      	orrs	r3, r2
 800471a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800471c:	4b1b      	ldr	r3, [pc, #108]	@ (800478c <HAL_RCC_OscConfig+0x478>)
 800471e:	2201      	movs	r2, #1
 8004720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004722:	f7fc fbf3 	bl	8000f0c <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800472a:	f7fc fbef 	bl	8000f0c <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e05c      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800473c:	4b11      	ldr	r3, [pc, #68]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f0      	beq.n	800472a <HAL_RCC_OscConfig+0x416>
 8004748:	e054      	b.n	80047f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474a:	4b10      	ldr	r3, [pc, #64]	@ (800478c <HAL_RCC_OscConfig+0x478>)
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004750:	f7fc fbdc 	bl	8000f0c <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004758:	f7fc fbd8 	bl	8000f0c <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e045      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476a:	4b06      	ldr	r3, [pc, #24]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0x444>
 8004776:	e03d      	b.n	80047f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d107      	bne.n	8004790 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e038      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
 8004784:	40023800 	.word	0x40023800
 8004788:	40007000 	.word	0x40007000
 800478c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004790:	4b1b      	ldr	r3, [pc, #108]	@ (8004800 <HAL_RCC_OscConfig+0x4ec>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d028      	beq.n	80047f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d121      	bne.n	80047f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d11a      	bne.n	80047f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047c0:	4013      	ands	r3, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d111      	bne.n	80047f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d6:	085b      	lsrs	r3, r3, #1
 80047d8:	3b01      	subs	r3, #1
 80047da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047dc:	429a      	cmp	r2, r3
 80047de:	d107      	bne.n	80047f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d001      	beq.n	80047f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e000      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40023800 	.word	0x40023800

08004804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e0cc      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004818:	4b68      	ldr	r3, [pc, #416]	@ (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d90c      	bls.n	8004840 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004826:	4b65      	ldr	r3, [pc, #404]	@ (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800482e:	4b63      	ldr	r3, [pc, #396]	@ (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d001      	beq.n	8004840 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0b8      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d020      	beq.n	800488e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b00      	cmp	r3, #0
 8004856:	d005      	beq.n	8004864 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004858:	4b59      	ldr	r3, [pc, #356]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	4a58      	ldr	r2, [pc, #352]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004862:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0308 	and.w	r3, r3, #8
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004870:	4b53      	ldr	r3, [pc, #332]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	4a52      	ldr	r2, [pc, #328]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800487a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800487c:	4b50      	ldr	r3, [pc, #320]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	494d      	ldr	r1, [pc, #308]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	4313      	orrs	r3, r2
 800488c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d044      	beq.n	8004924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d107      	bne.n	80048b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a2:	4b47      	ldr	r3, [pc, #284]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d119      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e07f      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d003      	beq.n	80048c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d107      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c2:	4b3f      	ldr	r3, [pc, #252]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e06f      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d2:	4b3b      	ldr	r3, [pc, #236]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e067      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048e2:	4b37      	ldr	r3, [pc, #220]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f023 0203 	bic.w	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	4934      	ldr	r1, [pc, #208]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048f4:	f7fc fb0a 	bl	8000f0c <HAL_GetTick>
 80048f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fa:	e00a      	b.n	8004912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048fc:	f7fc fb06 	bl	8000f0c <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800490a:	4293      	cmp	r3, r2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e04f      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004912:	4b2b      	ldr	r3, [pc, #172]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 020c 	and.w	r2, r3, #12
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	429a      	cmp	r2, r3
 8004922:	d1eb      	bne.n	80048fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004924:	4b25      	ldr	r3, [pc, #148]	@ (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d20c      	bcs.n	800494c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004932:	4b22      	ldr	r3, [pc, #136]	@ (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800493a:	4b20      	ldr	r3, [pc, #128]	@ (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	429a      	cmp	r2, r3
 8004946:	d001      	beq.n	800494c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e032      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004958:	4b19      	ldr	r3, [pc, #100]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	4916      	ldr	r1, [pc, #88]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	4313      	orrs	r3, r2
 8004968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	2b00      	cmp	r3, #0
 8004974:	d009      	beq.n	800498a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004976:	4b12      	ldr	r3, [pc, #72]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	490e      	ldr	r1, [pc, #56]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	4313      	orrs	r3, r2
 8004988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800498a:	f000 f821 	bl	80049d0 <HAL_RCC_GetSysClockFreq>
 800498e:	4602      	mov	r2, r0
 8004990:	4b0b      	ldr	r3, [pc, #44]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	091b      	lsrs	r3, r3, #4
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	490a      	ldr	r1, [pc, #40]	@ (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 800499c:	5ccb      	ldrb	r3, [r1, r3]
 800499e:	fa22 f303 	lsr.w	r3, r2, r3
 80049a2:	4a09      	ldr	r2, [pc, #36]	@ (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 80049a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80049a6:	4b09      	ldr	r3, [pc, #36]	@ (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fc fa6a 	bl	8000e84 <HAL_InitTick>

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	40023c00 	.word	0x40023c00
 80049c0:	40023800 	.word	0x40023800
 80049c4:	0800949c 	.word	0x0800949c
 80049c8:	20000000 	.word	0x20000000
 80049cc:	20000004 	.word	0x20000004

080049d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049d4:	b094      	sub	sp, #80	@ 0x50
 80049d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049e8:	4b79      	ldr	r3, [pc, #484]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 030c 	and.w	r3, r3, #12
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d00d      	beq.n	8004a10 <HAL_RCC_GetSysClockFreq+0x40>
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	f200 80e1 	bhi.w	8004bbc <HAL_RCC_GetSysClockFreq+0x1ec>
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0x34>
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d003      	beq.n	8004a0a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a02:	e0db      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a04:	4b73      	ldr	r3, [pc, #460]	@ (8004bd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a08:	e0db      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a0a:	4b73      	ldr	r3, [pc, #460]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a0e:	e0d8      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a10:	4b6f      	ldr	r3, [pc, #444]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a18:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a1a:	4b6d      	ldr	r3, [pc, #436]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d063      	beq.n	8004aee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a26:	4b6a      	ldr	r3, [pc, #424]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	099b      	lsrs	r3, r3, #6
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a30:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a38:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a42:	4622      	mov	r2, r4
 8004a44:	462b      	mov	r3, r5
 8004a46:	f04f 0000 	mov.w	r0, #0
 8004a4a:	f04f 0100 	mov.w	r1, #0
 8004a4e:	0159      	lsls	r1, r3, #5
 8004a50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a54:	0150      	lsls	r0, r2, #5
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	1a51      	subs	r1, r2, r1
 8004a5e:	6139      	str	r1, [r7, #16]
 8004a60:	4629      	mov	r1, r5
 8004a62:	eb63 0301 	sbc.w	r3, r3, r1
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a74:	4659      	mov	r1, fp
 8004a76:	018b      	lsls	r3, r1, #6
 8004a78:	4651      	mov	r1, sl
 8004a7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a7e:	4651      	mov	r1, sl
 8004a80:	018a      	lsls	r2, r1, #6
 8004a82:	4651      	mov	r1, sl
 8004a84:	ebb2 0801 	subs.w	r8, r2, r1
 8004a88:	4659      	mov	r1, fp
 8004a8a:	eb63 0901 	sbc.w	r9, r3, r1
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aa2:	4690      	mov	r8, r2
 8004aa4:	4699      	mov	r9, r3
 8004aa6:	4623      	mov	r3, r4
 8004aa8:	eb18 0303 	adds.w	r3, r8, r3
 8004aac:	60bb      	str	r3, [r7, #8]
 8004aae:	462b      	mov	r3, r5
 8004ab0:	eb49 0303 	adc.w	r3, r9, r3
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	f04f 0300 	mov.w	r3, #0
 8004abe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	024b      	lsls	r3, r1, #9
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004acc:	4621      	mov	r1, r4
 8004ace:	024a      	lsls	r2, r1, #9
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ada:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004adc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ae0:	f7fb fb72 	bl	80001c8 <__aeabi_uldivmod>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4613      	mov	r3, r2
 8004aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004aec:	e058      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aee:	4b38      	ldr	r3, [pc, #224]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	099b      	lsrs	r3, r3, #6
 8004af4:	2200      	movs	r2, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	4611      	mov	r1, r2
 8004afa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004afe:	623b      	str	r3, [r7, #32]
 8004b00:	2300      	movs	r3, #0
 8004b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b08:	4642      	mov	r2, r8
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	f04f 0000 	mov.w	r0, #0
 8004b10:	f04f 0100 	mov.w	r1, #0
 8004b14:	0159      	lsls	r1, r3, #5
 8004b16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b1a:	0150      	lsls	r0, r2, #5
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4641      	mov	r1, r8
 8004b22:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b26:	4649      	mov	r1, r9
 8004b28:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b40:	ebb2 040a 	subs.w	r4, r2, sl
 8004b44:	eb63 050b 	sbc.w	r5, r3, fp
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	00eb      	lsls	r3, r5, #3
 8004b52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b56:	00e2      	lsls	r2, r4, #3
 8004b58:	4614      	mov	r4, r2
 8004b5a:	461d      	mov	r5, r3
 8004b5c:	4643      	mov	r3, r8
 8004b5e:	18e3      	adds	r3, r4, r3
 8004b60:	603b      	str	r3, [r7, #0]
 8004b62:	464b      	mov	r3, r9
 8004b64:	eb45 0303 	adc.w	r3, r5, r3
 8004b68:	607b      	str	r3, [r7, #4]
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b76:	4629      	mov	r1, r5
 8004b78:	028b      	lsls	r3, r1, #10
 8004b7a:	4621      	mov	r1, r4
 8004b7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b80:	4621      	mov	r1, r4
 8004b82:	028a      	lsls	r2, r1, #10
 8004b84:	4610      	mov	r0, r2
 8004b86:	4619      	mov	r1, r3
 8004b88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	61fa      	str	r2, [r7, #28]
 8004b90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b94:	f7fb fb18 	bl	80001c8 <__aeabi_uldivmod>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	0c1b      	lsrs	r3, r3, #16
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	3301      	adds	r3, #1
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004bb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bba:	e002      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bbc:	4b05      	ldr	r3, [pc, #20]	@ (8004bd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3750      	adds	r7, #80	@ 0x50
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bce:	bf00      	nop
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	00f42400 	.word	0x00f42400
 8004bd8:	007a1200 	.word	0x007a1200

08004bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004be0:	4b03      	ldr	r3, [pc, #12]	@ (8004bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004be2:	681b      	ldr	r3, [r3, #0]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	20000000 	.word	0x20000000

08004bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bf8:	f7ff fff0 	bl	8004bdc <HAL_RCC_GetHCLKFreq>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	4b05      	ldr	r3, [pc, #20]	@ (8004c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	0a9b      	lsrs	r3, r3, #10
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	4903      	ldr	r1, [pc, #12]	@ (8004c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c0a:	5ccb      	ldrb	r3, [r1, r3]
 8004c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40023800 	.word	0x40023800
 8004c18:	080094ac 	.word	0x080094ac

08004c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c20:	f7ff ffdc 	bl	8004bdc <HAL_RCC_GetHCLKFreq>
 8004c24:	4602      	mov	r2, r0
 8004c26:	4b05      	ldr	r3, [pc, #20]	@ (8004c3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	0b5b      	lsrs	r3, r3, #13
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	4903      	ldr	r1, [pc, #12]	@ (8004c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c32:	5ccb      	ldrb	r3, [r1, r3]
 8004c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	080094ac 	.word	0x080094ac

08004c44 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d105      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d035      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c6c:	4b62      	ldr	r3, [pc, #392]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c72:	f7fc f94b 	bl	8000f0c <HAL_GetTick>
 8004c76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c78:	e008      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c7a:	f7fc f947 	bl	8000f0c <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e0b0      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c8c:	4b5b      	ldr	r3, [pc, #364]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1f0      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	019a      	lsls	r2, r3, #6
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	071b      	lsls	r3, r3, #28
 8004ca4:	4955      	ldr	r1, [pc, #340]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cac:	4b52      	ldr	r3, [pc, #328]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cae:	2201      	movs	r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cb2:	f7fc f92b 	bl	8000f0c <HAL_GetTick>
 8004cb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cb8:	e008      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cba:	f7fc f927 	bl	8000f0c <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e090      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ccc:	4b4b      	ldr	r3, [pc, #300]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0f0      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 8083 	beq.w	8004dec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	4b44      	ldr	r3, [pc, #272]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cee:	4a43      	ldr	r2, [pc, #268]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cf6:	4b41      	ldr	r3, [pc, #260]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d02:	4b3f      	ldr	r3, [pc, #252]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a3e      	ldr	r2, [pc, #248]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d0e:	f7fc f8fd 	bl	8000f0c <HAL_GetTick>
 8004d12:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d14:	e008      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d16:	f7fc f8f9 	bl	8000f0c <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e062      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d28:	4b35      	ldr	r3, [pc, #212]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0f0      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d34:	4b31      	ldr	r3, [pc, #196]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d3c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d02f      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d028      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d52:	4b2a      	ldr	r3, [pc, #168]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d5a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d5c:	4b29      	ldr	r3, [pc, #164]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d62:	4b28      	ldr	r3, [pc, #160]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d68:	4a24      	ldr	r2, [pc, #144]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d6e:	4b23      	ldr	r3, [pc, #140]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d114      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d7a:	f7fc f8c7 	bl	8000f0c <HAL_GetTick>
 8004d7e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d80:	e00a      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d82:	f7fc f8c3 	bl	8000f0c <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e02a      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d98:	4b18      	ldr	r3, [pc, #96]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0ee      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004db0:	d10d      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004db2:	4b12      	ldr	r3, [pc, #72]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004dc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dc6:	490d      	ldr	r1, [pc, #52]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	608b      	str	r3, [r1, #8]
 8004dcc:	e005      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004dce:	4b0b      	ldr	r3, [pc, #44]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dd4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004dd8:	6093      	str	r3, [r2, #8]
 8004dda:	4b08      	ldr	r3, [pc, #32]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ddc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de6:	4905      	ldr	r1, [pc, #20]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	42470068 	.word	0x42470068
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	40007000 	.word	0x40007000
 8004e04:	42470e40 	.word	0x42470e40

08004e08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d13f      	bne.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e26:	4b24      	ldr	r3, [pc, #144]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e2e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d006      	beq.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e3c:	d12f      	bne.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e40:	617b      	str	r3, [r7, #20]
          break;
 8004e42:	e02f      	b.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e44:	4b1c      	ldr	r3, [pc, #112]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e50:	d108      	bne.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e52:	4b19      	ldr	r3, [pc, #100]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e5a:	4a19      	ldr	r2, [pc, #100]	@ (8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e60:	613b      	str	r3, [r7, #16]
 8004e62:	e007      	b.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e64:	4b14      	ldr	r3, [pc, #80]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e6c:	4a15      	ldr	r2, [pc, #84]	@ (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e72:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e74:	4b10      	ldr	r3, [pc, #64]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e7a:	099b      	lsrs	r3, r3, #6
 8004e7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	fb02 f303 	mul.w	r3, r2, r3
 8004e86:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e88:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e8e:	0f1b      	lsrs	r3, r3, #28
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9a:	617b      	str	r3, [r7, #20]
          break;
 8004e9c:	e002      	b.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	617b      	str	r3, [r7, #20]
          break;
 8004ea2:	bf00      	nop
        }
      }
      break;
 8004ea4:	e000      	b.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004ea6:	bf00      	nop
    }
  }
  return frequency;
 8004ea8:	697b      	ldr	r3, [r7, #20]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	00bb8000 	.word	0x00bb8000
 8004ec0:	007a1200 	.word	0x007a1200
 8004ec4:	00f42400 	.word	0x00f42400

08004ec8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e07b      	b.n	8004fd2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d108      	bne.n	8004ef4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eea:	d009      	beq.n	8004f00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	61da      	str	r2, [r3, #28]
 8004ef2:	e005      	b.n	8004f00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fb fe02 	bl	8000b24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f84:	ea42 0103 	orr.w	r1, r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	0c1b      	lsrs	r3, r3, #16
 8004f9e:	f003 0104 	and.w	r1, r3, #4
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa6:	f003 0210 	and.w	r2, r3, #16
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69da      	ldr	r2, [r3, #28]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b082      	sub	sp, #8
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e042      	b.n	8005072 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d106      	bne.n	8005006 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7fb feab 	bl	8000d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2224      	movs	r2, #36	@ 0x24
 800500a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800501c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f972 	bl	8005308 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691a      	ldr	r2, [r3, #16]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005032:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695a      	ldr	r2, [r3, #20]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005042:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005052:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2220      	movs	r2, #32
 800505e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2220      	movs	r2, #32
 8005066:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b08a      	sub	sp, #40	@ 0x28
 800507e:	af02      	add	r7, sp, #8
 8005080:	60f8      	str	r0, [r7, #12]
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	603b      	str	r3, [r7, #0]
 8005086:	4613      	mov	r3, r2
 8005088:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b20      	cmp	r3, #32
 8005098:	d175      	bne.n	8005186 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <HAL_UART_Transmit+0x2c>
 80050a0:	88fb      	ldrh	r3, [r7, #6]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e06e      	b.n	8005188 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2221      	movs	r2, #33	@ 0x21
 80050b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050b8:	f7fb ff28 	bl	8000f0c <HAL_GetTick>
 80050bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	88fa      	ldrh	r2, [r7, #6]
 80050c2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	88fa      	ldrh	r2, [r7, #6]
 80050c8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050d2:	d108      	bne.n	80050e6 <HAL_UART_Transmit+0x6c>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d104      	bne.n	80050e6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050dc:	2300      	movs	r3, #0
 80050de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	61bb      	str	r3, [r7, #24]
 80050e4:	e003      	b.n	80050ee <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050ea:	2300      	movs	r3, #0
 80050ec:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050ee:	e02e      	b.n	800514e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	2200      	movs	r2, #0
 80050f8:	2180      	movs	r1, #128	@ 0x80
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 f848 	bl	8005190 <UART_WaitOnFlagUntilTimeout>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d005      	beq.n	8005112 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e03a      	b.n	8005188 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10b      	bne.n	8005130 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	461a      	mov	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005126:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	3302      	adds	r3, #2
 800512c:	61bb      	str	r3, [r7, #24]
 800512e:	e007      	b.n	8005140 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	781a      	ldrb	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	3301      	adds	r3, #1
 800513e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005152:	b29b      	uxth	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1cb      	bne.n	80050f0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2200      	movs	r2, #0
 8005160:	2140      	movs	r1, #64	@ 0x40
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 f814 	bl	8005190 <UART_WaitOnFlagUntilTimeout>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d005      	beq.n	800517a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e006      	b.n	8005188 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2220      	movs	r2, #32
 800517e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005182:	2300      	movs	r3, #0
 8005184:	e000      	b.n	8005188 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005186:	2302      	movs	r3, #2
  }
}
 8005188:	4618      	mov	r0, r3
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	603b      	str	r3, [r7, #0]
 800519c:	4613      	mov	r3, r2
 800519e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a0:	e03b      	b.n	800521a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a8:	d037      	beq.n	800521a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051aa:	f7fb feaf 	bl	8000f0c <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	6a3a      	ldr	r2, [r7, #32]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d302      	bcc.n	80051c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e03a      	b.n	800523a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f003 0304 	and.w	r3, r3, #4
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d023      	beq.n	800521a <UART_WaitOnFlagUntilTimeout+0x8a>
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b80      	cmp	r3, #128	@ 0x80
 80051d6:	d020      	beq.n	800521a <UART_WaitOnFlagUntilTimeout+0x8a>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b40      	cmp	r3, #64	@ 0x40
 80051dc:	d01d      	beq.n	800521a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d116      	bne.n	800521a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80051ec:	2300      	movs	r3, #0
 80051ee:	617b      	str	r3, [r7, #20]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 f81d 	bl	8005242 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2208      	movs	r2, #8
 800520c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e00f      	b.n	800523a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4013      	ands	r3, r2
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	429a      	cmp	r2, r3
 8005228:	bf0c      	ite	eq
 800522a:	2301      	moveq	r3, #1
 800522c:	2300      	movne	r3, #0
 800522e:	b2db      	uxtb	r3, r3
 8005230:	461a      	mov	r2, r3
 8005232:	79fb      	ldrb	r3, [r7, #7]
 8005234:	429a      	cmp	r2, r3
 8005236:	d0b4      	beq.n	80051a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005242:	b480      	push	{r7}
 8005244:	b095      	sub	sp, #84	@ 0x54
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	330c      	adds	r3, #12
 8005250:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800525a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005260:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	330c      	adds	r3, #12
 8005268:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800526a:	643a      	str	r2, [r7, #64]	@ 0x40
 800526c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005270:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e5      	bne.n	800524a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3314      	adds	r3, #20
 8005284:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	61fb      	str	r3, [r7, #28]
   return(result);
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	f023 0301 	bic.w	r3, r3, #1
 8005294:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3314      	adds	r3, #20
 800529c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800529e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052a6:	e841 2300 	strex	r3, r2, [r1]
 80052aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1e5      	bne.n	800527e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d119      	bne.n	80052ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	330c      	adds	r3, #12
 80052c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f023 0310 	bic.w	r3, r3, #16
 80052d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	330c      	adds	r3, #12
 80052d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052da:	61ba      	str	r2, [r7, #24]
 80052dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052de:	6979      	ldr	r1, [r7, #20]
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	e841 2300 	strex	r3, r2, [r1]
 80052e6:	613b      	str	r3, [r7, #16]
   return(result);
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1e5      	bne.n	80052ba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80052fc:	bf00      	nop
 80052fe:	3754      	adds	r7, #84	@ 0x54
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800530c:	b0c0      	sub	sp, #256	@ 0x100
 800530e:	af00      	add	r7, sp, #0
 8005310:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005324:	68d9      	ldr	r1, [r3, #12]
 8005326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	ea40 0301 	orr.w	r3, r0, r1
 8005330:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	431a      	orrs	r2, r3
 8005340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	431a      	orrs	r2, r3
 8005348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	4313      	orrs	r3, r2
 8005350:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005360:	f021 010c 	bic.w	r1, r1, #12
 8005364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800536e:	430b      	orrs	r3, r1
 8005370:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800537e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005382:	6999      	ldr	r1, [r3, #24]
 8005384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	ea40 0301 	orr.w	r3, r0, r1
 800538e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	4b8f      	ldr	r3, [pc, #572]	@ (80055d4 <UART_SetConfig+0x2cc>)
 8005398:	429a      	cmp	r2, r3
 800539a:	d005      	beq.n	80053a8 <UART_SetConfig+0xa0>
 800539c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	4b8d      	ldr	r3, [pc, #564]	@ (80055d8 <UART_SetConfig+0x2d0>)
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d104      	bne.n	80053b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053a8:	f7ff fc38 	bl	8004c1c <HAL_RCC_GetPCLK2Freq>
 80053ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80053b0:	e003      	b.n	80053ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053b2:	f7ff fc1f 	bl	8004bf4 <HAL_RCC_GetPCLK1Freq>
 80053b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053c4:	f040 810c 	bne.w	80055e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053cc:	2200      	movs	r2, #0
 80053ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80053d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80053d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80053da:	4622      	mov	r2, r4
 80053dc:	462b      	mov	r3, r5
 80053de:	1891      	adds	r1, r2, r2
 80053e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80053e2:	415b      	adcs	r3, r3
 80053e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80053ea:	4621      	mov	r1, r4
 80053ec:	eb12 0801 	adds.w	r8, r2, r1
 80053f0:	4629      	mov	r1, r5
 80053f2:	eb43 0901 	adc.w	r9, r3, r1
 80053f6:	f04f 0200 	mov.w	r2, #0
 80053fa:	f04f 0300 	mov.w	r3, #0
 80053fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005402:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005406:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800540a:	4690      	mov	r8, r2
 800540c:	4699      	mov	r9, r3
 800540e:	4623      	mov	r3, r4
 8005410:	eb18 0303 	adds.w	r3, r8, r3
 8005414:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005418:	462b      	mov	r3, r5
 800541a:	eb49 0303 	adc.w	r3, r9, r3
 800541e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800542e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005432:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005436:	460b      	mov	r3, r1
 8005438:	18db      	adds	r3, r3, r3
 800543a:	653b      	str	r3, [r7, #80]	@ 0x50
 800543c:	4613      	mov	r3, r2
 800543e:	eb42 0303 	adc.w	r3, r2, r3
 8005442:	657b      	str	r3, [r7, #84]	@ 0x54
 8005444:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005448:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800544c:	f7fa febc 	bl	80001c8 <__aeabi_uldivmod>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	4b61      	ldr	r3, [pc, #388]	@ (80055dc <UART_SetConfig+0x2d4>)
 8005456:	fba3 2302 	umull	r2, r3, r3, r2
 800545a:	095b      	lsrs	r3, r3, #5
 800545c:	011c      	lsls	r4, r3, #4
 800545e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005462:	2200      	movs	r2, #0
 8005464:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005468:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800546c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005470:	4642      	mov	r2, r8
 8005472:	464b      	mov	r3, r9
 8005474:	1891      	adds	r1, r2, r2
 8005476:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005478:	415b      	adcs	r3, r3
 800547a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800547c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005480:	4641      	mov	r1, r8
 8005482:	eb12 0a01 	adds.w	sl, r2, r1
 8005486:	4649      	mov	r1, r9
 8005488:	eb43 0b01 	adc.w	fp, r3, r1
 800548c:	f04f 0200 	mov.w	r2, #0
 8005490:	f04f 0300 	mov.w	r3, #0
 8005494:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005498:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800549c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054a0:	4692      	mov	sl, r2
 80054a2:	469b      	mov	fp, r3
 80054a4:	4643      	mov	r3, r8
 80054a6:	eb1a 0303 	adds.w	r3, sl, r3
 80054aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054ae:	464b      	mov	r3, r9
 80054b0:	eb4b 0303 	adc.w	r3, fp, r3
 80054b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80054b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80054c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80054cc:	460b      	mov	r3, r1
 80054ce:	18db      	adds	r3, r3, r3
 80054d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80054d2:	4613      	mov	r3, r2
 80054d4:	eb42 0303 	adc.w	r3, r2, r3
 80054d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80054e2:	f7fa fe71 	bl	80001c8 <__aeabi_uldivmod>
 80054e6:	4602      	mov	r2, r0
 80054e8:	460b      	mov	r3, r1
 80054ea:	4611      	mov	r1, r2
 80054ec:	4b3b      	ldr	r3, [pc, #236]	@ (80055dc <UART_SetConfig+0x2d4>)
 80054ee:	fba3 2301 	umull	r2, r3, r3, r1
 80054f2:	095b      	lsrs	r3, r3, #5
 80054f4:	2264      	movs	r2, #100	@ 0x64
 80054f6:	fb02 f303 	mul.w	r3, r2, r3
 80054fa:	1acb      	subs	r3, r1, r3
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005502:	4b36      	ldr	r3, [pc, #216]	@ (80055dc <UART_SetConfig+0x2d4>)
 8005504:	fba3 2302 	umull	r2, r3, r3, r2
 8005508:	095b      	lsrs	r3, r3, #5
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005510:	441c      	add	r4, r3
 8005512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005516:	2200      	movs	r2, #0
 8005518:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800551c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005520:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005524:	4642      	mov	r2, r8
 8005526:	464b      	mov	r3, r9
 8005528:	1891      	adds	r1, r2, r2
 800552a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800552c:	415b      	adcs	r3, r3
 800552e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005530:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005534:	4641      	mov	r1, r8
 8005536:	1851      	adds	r1, r2, r1
 8005538:	6339      	str	r1, [r7, #48]	@ 0x30
 800553a:	4649      	mov	r1, r9
 800553c:	414b      	adcs	r3, r1
 800553e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	f04f 0300 	mov.w	r3, #0
 8005548:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800554c:	4659      	mov	r1, fp
 800554e:	00cb      	lsls	r3, r1, #3
 8005550:	4651      	mov	r1, sl
 8005552:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005556:	4651      	mov	r1, sl
 8005558:	00ca      	lsls	r2, r1, #3
 800555a:	4610      	mov	r0, r2
 800555c:	4619      	mov	r1, r3
 800555e:	4603      	mov	r3, r0
 8005560:	4642      	mov	r2, r8
 8005562:	189b      	adds	r3, r3, r2
 8005564:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005568:	464b      	mov	r3, r9
 800556a:	460a      	mov	r2, r1
 800556c:	eb42 0303 	adc.w	r3, r2, r3
 8005570:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005580:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005584:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005588:	460b      	mov	r3, r1
 800558a:	18db      	adds	r3, r3, r3
 800558c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800558e:	4613      	mov	r3, r2
 8005590:	eb42 0303 	adc.w	r3, r2, r3
 8005594:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005596:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800559a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800559e:	f7fa fe13 	bl	80001c8 <__aeabi_uldivmod>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	4b0d      	ldr	r3, [pc, #52]	@ (80055dc <UART_SetConfig+0x2d4>)
 80055a8:	fba3 1302 	umull	r1, r3, r3, r2
 80055ac:	095b      	lsrs	r3, r3, #5
 80055ae:	2164      	movs	r1, #100	@ 0x64
 80055b0:	fb01 f303 	mul.w	r3, r1, r3
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	3332      	adds	r3, #50	@ 0x32
 80055ba:	4a08      	ldr	r2, [pc, #32]	@ (80055dc <UART_SetConfig+0x2d4>)
 80055bc:	fba2 2303 	umull	r2, r3, r2, r3
 80055c0:	095b      	lsrs	r3, r3, #5
 80055c2:	f003 0207 	and.w	r2, r3, #7
 80055c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4422      	add	r2, r4
 80055ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055d0:	e106      	b.n	80057e0 <UART_SetConfig+0x4d8>
 80055d2:	bf00      	nop
 80055d4:	40011000 	.word	0x40011000
 80055d8:	40011400 	.word	0x40011400
 80055dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055e4:	2200      	movs	r2, #0
 80055e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80055ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80055f2:	4642      	mov	r2, r8
 80055f4:	464b      	mov	r3, r9
 80055f6:	1891      	adds	r1, r2, r2
 80055f8:	6239      	str	r1, [r7, #32]
 80055fa:	415b      	adcs	r3, r3
 80055fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80055fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005602:	4641      	mov	r1, r8
 8005604:	1854      	adds	r4, r2, r1
 8005606:	4649      	mov	r1, r9
 8005608:	eb43 0501 	adc.w	r5, r3, r1
 800560c:	f04f 0200 	mov.w	r2, #0
 8005610:	f04f 0300 	mov.w	r3, #0
 8005614:	00eb      	lsls	r3, r5, #3
 8005616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800561a:	00e2      	lsls	r2, r4, #3
 800561c:	4614      	mov	r4, r2
 800561e:	461d      	mov	r5, r3
 8005620:	4643      	mov	r3, r8
 8005622:	18e3      	adds	r3, r4, r3
 8005624:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005628:	464b      	mov	r3, r9
 800562a:	eb45 0303 	adc.w	r3, r5, r3
 800562e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800563e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800564e:	4629      	mov	r1, r5
 8005650:	008b      	lsls	r3, r1, #2
 8005652:	4621      	mov	r1, r4
 8005654:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005658:	4621      	mov	r1, r4
 800565a:	008a      	lsls	r2, r1, #2
 800565c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005660:	f7fa fdb2 	bl	80001c8 <__aeabi_uldivmod>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	4b60      	ldr	r3, [pc, #384]	@ (80057ec <UART_SetConfig+0x4e4>)
 800566a:	fba3 2302 	umull	r2, r3, r3, r2
 800566e:	095b      	lsrs	r3, r3, #5
 8005670:	011c      	lsls	r4, r3, #4
 8005672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005676:	2200      	movs	r2, #0
 8005678:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800567c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005680:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005684:	4642      	mov	r2, r8
 8005686:	464b      	mov	r3, r9
 8005688:	1891      	adds	r1, r2, r2
 800568a:	61b9      	str	r1, [r7, #24]
 800568c:	415b      	adcs	r3, r3
 800568e:	61fb      	str	r3, [r7, #28]
 8005690:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005694:	4641      	mov	r1, r8
 8005696:	1851      	adds	r1, r2, r1
 8005698:	6139      	str	r1, [r7, #16]
 800569a:	4649      	mov	r1, r9
 800569c:	414b      	adcs	r3, r1
 800569e:	617b      	str	r3, [r7, #20]
 80056a0:	f04f 0200 	mov.w	r2, #0
 80056a4:	f04f 0300 	mov.w	r3, #0
 80056a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056ac:	4659      	mov	r1, fp
 80056ae:	00cb      	lsls	r3, r1, #3
 80056b0:	4651      	mov	r1, sl
 80056b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056b6:	4651      	mov	r1, sl
 80056b8:	00ca      	lsls	r2, r1, #3
 80056ba:	4610      	mov	r0, r2
 80056bc:	4619      	mov	r1, r3
 80056be:	4603      	mov	r3, r0
 80056c0:	4642      	mov	r2, r8
 80056c2:	189b      	adds	r3, r3, r2
 80056c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056c8:	464b      	mov	r3, r9
 80056ca:	460a      	mov	r2, r1
 80056cc:	eb42 0303 	adc.w	r3, r2, r3
 80056d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80056e0:	f04f 0200 	mov.w	r2, #0
 80056e4:	f04f 0300 	mov.w	r3, #0
 80056e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80056ec:	4649      	mov	r1, r9
 80056ee:	008b      	lsls	r3, r1, #2
 80056f0:	4641      	mov	r1, r8
 80056f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056f6:	4641      	mov	r1, r8
 80056f8:	008a      	lsls	r2, r1, #2
 80056fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80056fe:	f7fa fd63 	bl	80001c8 <__aeabi_uldivmod>
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	4611      	mov	r1, r2
 8005708:	4b38      	ldr	r3, [pc, #224]	@ (80057ec <UART_SetConfig+0x4e4>)
 800570a:	fba3 2301 	umull	r2, r3, r3, r1
 800570e:	095b      	lsrs	r3, r3, #5
 8005710:	2264      	movs	r2, #100	@ 0x64
 8005712:	fb02 f303 	mul.w	r3, r2, r3
 8005716:	1acb      	subs	r3, r1, r3
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	3332      	adds	r3, #50	@ 0x32
 800571c:	4a33      	ldr	r2, [pc, #204]	@ (80057ec <UART_SetConfig+0x4e4>)
 800571e:	fba2 2303 	umull	r2, r3, r2, r3
 8005722:	095b      	lsrs	r3, r3, #5
 8005724:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005728:	441c      	add	r4, r3
 800572a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800572e:	2200      	movs	r2, #0
 8005730:	673b      	str	r3, [r7, #112]	@ 0x70
 8005732:	677a      	str	r2, [r7, #116]	@ 0x74
 8005734:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005738:	4642      	mov	r2, r8
 800573a:	464b      	mov	r3, r9
 800573c:	1891      	adds	r1, r2, r2
 800573e:	60b9      	str	r1, [r7, #8]
 8005740:	415b      	adcs	r3, r3
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005748:	4641      	mov	r1, r8
 800574a:	1851      	adds	r1, r2, r1
 800574c:	6039      	str	r1, [r7, #0]
 800574e:	4649      	mov	r1, r9
 8005750:	414b      	adcs	r3, r1
 8005752:	607b      	str	r3, [r7, #4]
 8005754:	f04f 0200 	mov.w	r2, #0
 8005758:	f04f 0300 	mov.w	r3, #0
 800575c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005760:	4659      	mov	r1, fp
 8005762:	00cb      	lsls	r3, r1, #3
 8005764:	4651      	mov	r1, sl
 8005766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800576a:	4651      	mov	r1, sl
 800576c:	00ca      	lsls	r2, r1, #3
 800576e:	4610      	mov	r0, r2
 8005770:	4619      	mov	r1, r3
 8005772:	4603      	mov	r3, r0
 8005774:	4642      	mov	r2, r8
 8005776:	189b      	adds	r3, r3, r2
 8005778:	66bb      	str	r3, [r7, #104]	@ 0x68
 800577a:	464b      	mov	r3, r9
 800577c:	460a      	mov	r2, r1
 800577e:	eb42 0303 	adc.w	r3, r2, r3
 8005782:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	663b      	str	r3, [r7, #96]	@ 0x60
 800578e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005790:	f04f 0200 	mov.w	r2, #0
 8005794:	f04f 0300 	mov.w	r3, #0
 8005798:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800579c:	4649      	mov	r1, r9
 800579e:	008b      	lsls	r3, r1, #2
 80057a0:	4641      	mov	r1, r8
 80057a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057a6:	4641      	mov	r1, r8
 80057a8:	008a      	lsls	r2, r1, #2
 80057aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80057ae:	f7fa fd0b 	bl	80001c8 <__aeabi_uldivmod>
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	4b0d      	ldr	r3, [pc, #52]	@ (80057ec <UART_SetConfig+0x4e4>)
 80057b8:	fba3 1302 	umull	r1, r3, r3, r2
 80057bc:	095b      	lsrs	r3, r3, #5
 80057be:	2164      	movs	r1, #100	@ 0x64
 80057c0:	fb01 f303 	mul.w	r3, r1, r3
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	011b      	lsls	r3, r3, #4
 80057c8:	3332      	adds	r3, #50	@ 0x32
 80057ca:	4a08      	ldr	r2, [pc, #32]	@ (80057ec <UART_SetConfig+0x4e4>)
 80057cc:	fba2 2303 	umull	r2, r3, r2, r3
 80057d0:	095b      	lsrs	r3, r3, #5
 80057d2:	f003 020f 	and.w	r2, r3, #15
 80057d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4422      	add	r2, r4
 80057de:	609a      	str	r2, [r3, #8]
}
 80057e0:	bf00      	nop
 80057e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80057e6:	46bd      	mov	sp, r7
 80057e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057ec:	51eb851f 	.word	0x51eb851f

080057f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057f0:	b084      	sub	sp, #16
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b084      	sub	sp, #16
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	f107 001c 	add.w	r0, r7, #28
 80057fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005802:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005806:	2b01      	cmp	r3, #1
 8005808:	d123      	bne.n	8005852 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800581e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005832:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005836:	2b01      	cmp	r3, #1
 8005838:	d105      	bne.n	8005846 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f9dc 	bl	8005c04 <USB_CoreReset>
 800584c:	4603      	mov	r3, r0
 800584e:	73fb      	strb	r3, [r7, #15]
 8005850:	e01b      	b.n	800588a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f9d0 	bl	8005c04 <USB_CoreReset>
 8005864:	4603      	mov	r3, r0
 8005866:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005868:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800586c:	2b00      	cmp	r3, #0
 800586e:	d106      	bne.n	800587e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005874:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	639a      	str	r2, [r3, #56]	@ 0x38
 800587c:	e005      	b.n	800588a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005882:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800588a:	7fbb      	ldrb	r3, [r7, #30]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d10b      	bne.n	80058a8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f043 0206 	orr.w	r2, r3, #6
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f043 0220 	orr.w	r2, r3, #32
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058b4:	b004      	add	sp, #16
 80058b6:	4770      	bx	lr

080058b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f043 0201 	orr.w	r2, r3, #1
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f023 0201 	bic.w	r2, r3, #1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	460b      	mov	r3, r1
 8005906:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d115      	bne.n	800594a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800592a:	200a      	movs	r0, #10
 800592c:	f7fb fafa 	bl	8000f24 <HAL_Delay>
      ms += 10U;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	330a      	adds	r3, #10
 8005934:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f956 	bl	8005be8 <USB_GetMode>
 800593c:	4603      	mov	r3, r0
 800593e:	2b01      	cmp	r3, #1
 8005940:	d01e      	beq.n	8005980 <USB_SetCurrentMode+0x84>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2bc7      	cmp	r3, #199	@ 0xc7
 8005946:	d9f0      	bls.n	800592a <USB_SetCurrentMode+0x2e>
 8005948:	e01a      	b.n	8005980 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800594a:	78fb      	ldrb	r3, [r7, #3]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d115      	bne.n	800597c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800595c:	200a      	movs	r0, #10
 800595e:	f7fb fae1 	bl	8000f24 <HAL_Delay>
      ms += 10U;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	330a      	adds	r3, #10
 8005966:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f93d 	bl	8005be8 <USB_GetMode>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d005      	beq.n	8005980 <USB_SetCurrentMode+0x84>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2bc7      	cmp	r3, #199	@ 0xc7
 8005978:	d9f0      	bls.n	800595c <USB_SetCurrentMode+0x60>
 800597a:	e001      	b.n	8005980 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e005      	b.n	800598c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2bc8      	cmp	r3, #200	@ 0xc8
 8005984:	d101      	bne.n	800598a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e000      	b.n	800598c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3301      	adds	r3, #1
 80059a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059ae:	d901      	bls.n	80059b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e01b      	b.n	80059ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	daf2      	bge.n	80059a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	019b      	lsls	r3, r3, #6
 80059c4:	f043 0220 	orr.w	r2, r3, #32
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3301      	adds	r3, #1
 80059d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059d8:	d901      	bls.n	80059de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e006      	b.n	80059ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	d0f0      	beq.n	80059cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	3301      	adds	r3, #1
 8005a08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a10:	d901      	bls.n	8005a16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e018      	b.n	8005a48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	daf2      	bge.n	8005a04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2210      	movs	r2, #16
 8005a26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a34:	d901      	bls.n	8005a3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e006      	b.n	8005a48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f003 0310 	and.w	r3, r3, #16
 8005a42:	2b10      	cmp	r3, #16
 8005a44:	d0f0      	beq.n	8005a28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b089      	sub	sp, #36	@ 0x24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	4611      	mov	r1, r2
 8005a60:	461a      	mov	r2, r3
 8005a62:	460b      	mov	r3, r1
 8005a64:	71fb      	strb	r3, [r7, #7]
 8005a66:	4613      	mov	r3, r2
 8005a68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d123      	bne.n	8005ac2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a7a:	88bb      	ldrh	r3, [r7, #4]
 8005a7c:	3303      	adds	r3, #3
 8005a7e:	089b      	lsrs	r3, r3, #2
 8005a80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a82:	2300      	movs	r3, #0
 8005a84:	61bb      	str	r3, [r7, #24]
 8005a86:	e018      	b.n	8005aba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	031a      	lsls	r2, r3, #12
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a94:	461a      	mov	r2, r3
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	61bb      	str	r3, [r7, #24]
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d3e2      	bcc.n	8005a88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3724      	adds	r7, #36	@ 0x24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b08b      	sub	sp, #44	@ 0x2c
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	4613      	mov	r3, r2
 8005adc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ae6:	88fb      	ldrh	r3, [r7, #6]
 8005ae8:	089b      	lsrs	r3, r3, #2
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005aee:	88fb      	ldrh	r3, [r7, #6]
 8005af0:	f003 0303 	and.w	r3, r3, #3
 8005af4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005af6:	2300      	movs	r3, #0
 8005af8:	623b      	str	r3, [r7, #32]
 8005afa:	e014      	b.n	8005b26 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b06:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b10:	3301      	adds	r3, #1
 8005b12:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	3301      	adds	r3, #1
 8005b18:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	3301      	adds	r3, #1
 8005b24:	623b      	str	r3, [r7, #32]
 8005b26:	6a3a      	ldr	r2, [r7, #32]
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d3e6      	bcc.n	8005afc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b2e:	8bfb      	ldrh	r3, [r7, #30]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d01e      	beq.n	8005b72 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b3e:	461a      	mov	r2, r3
 8005b40:	f107 0310 	add.w	r3, r7, #16
 8005b44:	6812      	ldr	r2, [r2, #0]
 8005b46:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	00db      	lsls	r3, r3, #3
 8005b50:	fa22 f303 	lsr.w	r3, r2, r3
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b58:	701a      	strb	r2, [r3, #0]
      i++;
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b62:	3301      	adds	r3, #1
 8005b64:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005b66:	8bfb      	ldrh	r3, [r7, #30]
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b6c:	8bfb      	ldrh	r3, [r7, #30]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1ea      	bne.n	8005b48 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	372c      	adds	r7, #44	@ 0x2c
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4013      	ands	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b98:	68fb      	ldr	r3, [r7, #12]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b085      	sub	sp, #20
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	460b      	mov	r3, r1
 8005bb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005bb6:	78fb      	ldrb	r3, [r7, #3]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005bc6:	78fb      	ldrb	r3, [r7, #3]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005bda:	68bb      	ldr	r3, [r7, #8]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	f003 0301 	and.w	r3, r3, #1
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3301      	adds	r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c1c:	d901      	bls.n	8005c22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e022      	b.n	8005c68 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	daf2      	bge.n	8005c10 <USB_CoreReset+0xc>

  count = 10U;
 8005c2a:	230a      	movs	r3, #10
 8005c2c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005c2e:	e002      	b.n	8005c36 <USB_CoreReset+0x32>
  {
    count--;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1f9      	bne.n	8005c30 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	f043 0201 	orr.w	r2, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c54:	d901      	bls.n	8005c5a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e006      	b.n	8005c68 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d0f0      	beq.n	8005c48 <USB_CoreReset+0x44>

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c74:	b084      	sub	sp, #16
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b086      	sub	sp, #24
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005c82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005c94:	461a      	mov	r2, r3
 8005c96:	2300      	movs	r3, #0
 8005c98:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c9e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005caa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d119      	bne.n	8005cfe <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005cca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d10a      	bne.n	8005ce8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005ce0:	f043 0304 	orr.w	r3, r3, #4
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	e014      	b.n	8005d12 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005cf6:	f023 0304 	bic.w	r3, r3, #4
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	e009      	b.n	8005d12 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005d0c:	f023 0304 	bic.w	r3, r3, #4
 8005d10:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d12:	2110      	movs	r1, #16
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7ff fe3d 	bl	8005994 <USB_FlushTxFifo>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff fe67 	bl	80059f8 <USB_FlushRxFifo>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d34:	2300      	movs	r3, #0
 8005d36:	613b      	str	r3, [r7, #16]
 8005d38:	e015      	b.n	8005d66 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d46:	461a      	mov	r2, r3
 8005d48:	f04f 33ff 	mov.w	r3, #4294967295
 8005d4c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	3301      	adds	r3, #1
 8005d64:	613b      	str	r3, [r7, #16]
 8005d66:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d3e3      	bcc.n	8005d3a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d7e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a18      	ldr	r2, [pc, #96]	@ (8005de4 <USB_HostInit+0x170>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d10b      	bne.n	8005da0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d8e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a15      	ldr	r2, [pc, #84]	@ (8005de8 <USB_HostInit+0x174>)
 8005d94:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a14      	ldr	r2, [pc, #80]	@ (8005dec <USB_HostInit+0x178>)
 8005d9a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005d9e:	e009      	b.n	8005db4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2280      	movs	r2, #128	@ 0x80
 8005da4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a11      	ldr	r2, [pc, #68]	@ (8005df0 <USB_HostInit+0x17c>)
 8005daa:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a11      	ldr	r2, [pc, #68]	@ (8005df4 <USB_HostInit+0x180>)
 8005db0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005db4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d105      	bne.n	8005dc8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	f043 0210 	orr.w	r2, r3, #16
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	699a      	ldr	r2, [r3, #24]
 8005dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8005df8 <USB_HostInit+0x184>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005de0:	b004      	add	sp, #16
 8005de2:	4770      	bx	lr
 8005de4:	40040000 	.word	0x40040000
 8005de8:	01000200 	.word	0x01000200
 8005dec:	00e00300 	.word	0x00e00300
 8005df0:	00600080 	.word	0x00600080
 8005df4:	004000e0 	.word	0x004000e0
 8005df8:	a3200008 	.word	0xa3200008

08005dfc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	460b      	mov	r3, r1
 8005e06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005e1a:	f023 0303 	bic.w	r3, r3, #3
 8005e1e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	68f9      	ldr	r1, [r7, #12]
 8005e30:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005e34:	4313      	orrs	r3, r2
 8005e36:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d107      	bne.n	8005e4e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e44:	461a      	mov	r2, r3
 8005e46:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005e4a:	6053      	str	r3, [r2, #4]
 8005e4c:	e00c      	b.n	8005e68 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005e4e:	78fb      	ldrb	r3, [r7, #3]
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d107      	bne.n	8005e64 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005e60:	6053      	str	r3, [r2, #4]
 8005e62:	e001      	b.n	8005e68 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e000      	b.n	8005e6a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005e96:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ea4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005ea6:	2064      	movs	r0, #100	@ 0x64
 8005ea8:	f7fb f83c 	bl	8000f24 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005eb8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005eba:	200a      	movs	r0, #10
 8005ebc:	f7fb f832 	bl	8000f24 <HAL_Delay>

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b085      	sub	sp, #20
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005eee:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d109      	bne.n	8005f0e <USB_DriveVbus+0x44>
 8005efa:	78fb      	ldrb	r3, [r7, #3]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d106      	bne.n	8005f0e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005f08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005f0c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f18:	d109      	bne.n	8005f2e <USB_DriveVbus+0x64>
 8005f1a:	78fb      	ldrb	r3, [r7, #3]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d106      	bne.n	8005f2e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005f28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f2c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	0c5b      	lsrs	r3, r3, #17
 8005f5a:	f003 0303 	and.w	r3, r3, #3
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b085      	sub	sp, #20
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	b29b      	uxth	r3, r3
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	4608      	mov	r0, r1
 8005f96:	4611      	mov	r1, r2
 8005f98:	461a      	mov	r2, r3
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	70fb      	strb	r3, [r7, #3]
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	70bb      	strb	r3, [r7, #2]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005fae:	78fb      	ldrb	r3, [r7, #3]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fba:	461a      	mov	r2, r3
 8005fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005fc2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005fc6:	2b03      	cmp	r3, #3
 8005fc8:	d87c      	bhi.n	80060c4 <USB_HC_Init+0x138>
 8005fca:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd0 <USB_HC_Init+0x44>)
 8005fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd0:	08005fe1 	.word	0x08005fe1
 8005fd4:	08006087 	.word	0x08006087
 8005fd8:	08005fe1 	.word	0x08005fe1
 8005fdc:	08006049 	.word	0x08006049
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fe0:	78fb      	ldrb	r3, [r7, #3]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fec:	461a      	mov	r2, r3
 8005fee:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005ff2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ff4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	da10      	bge.n	800601e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ffc:	78fb      	ldrb	r3, [r7, #3]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	4413      	add	r3, r2
 8006004:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	78fa      	ldrb	r2, [r7, #3]
 800600c:	0151      	lsls	r1, r2, #5
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	440a      	add	r2, r1
 8006012:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006016:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800601a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800601c:	e055      	b.n	80060ca <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a6f      	ldr	r2, [pc, #444]	@ (80061e0 <USB_HC_Init+0x254>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d151      	bne.n	80060ca <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006026:	78fb      	ldrb	r3, [r7, #3]
 8006028:	015a      	lsls	r2, r3, #5
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	4413      	add	r3, r2
 800602e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	78fa      	ldrb	r2, [r7, #3]
 8006036:	0151      	lsls	r1, r2, #5
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	440a      	add	r2, r1
 800603c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006040:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006044:	60d3      	str	r3, [r2, #12]
      break;
 8006046:	e040      	b.n	80060ca <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006048:	78fb      	ldrb	r3, [r7, #3]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	4413      	add	r3, r2
 8006050:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006054:	461a      	mov	r2, r3
 8006056:	f240 639d 	movw	r3, #1693	@ 0x69d
 800605a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800605c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006060:	2b00      	cmp	r3, #0
 8006062:	da34      	bge.n	80060ce <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	4413      	add	r3, r2
 800606c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	78fa      	ldrb	r2, [r7, #3]
 8006074:	0151      	lsls	r1, r2, #5
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	440a      	add	r2, r1
 800607a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800607e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006082:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006084:	e023      	b.n	80060ce <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006086:	78fb      	ldrb	r3, [r7, #3]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	4413      	add	r3, r2
 800608e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006092:	461a      	mov	r2, r3
 8006094:	f240 2325 	movw	r3, #549	@ 0x225
 8006098:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800609a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	da17      	bge.n	80060d2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80060a2:	78fb      	ldrb	r3, [r7, #3]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	78fa      	ldrb	r2, [r7, #3]
 80060b2:	0151      	lsls	r1, r2, #5
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	440a      	add	r2, r1
 80060b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060bc:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80060c0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80060c2:	e006      	b.n	80060d2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	77fb      	strb	r3, [r7, #31]
      break;
 80060c8:	e004      	b.n	80060d4 <USB_HC_Init+0x148>
      break;
 80060ca:	bf00      	nop
 80060cc:	e002      	b.n	80060d4 <USB_HC_Init+0x148>
      break;
 80060ce:	bf00      	nop
 80060d0:	e000      	b.n	80060d4 <USB_HC_Init+0x148>
      break;
 80060d2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80060d4:	78fb      	ldrb	r3, [r7, #3]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060e0:	461a      	mov	r2, r3
 80060e2:	2300      	movs	r3, #0
 80060e4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80060e6:	78fb      	ldrb	r3, [r7, #3]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	78fa      	ldrb	r2, [r7, #3]
 80060f6:	0151      	lsls	r1, r2, #5
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	440a      	add	r2, r1
 80060fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006100:	f043 0302 	orr.w	r3, r3, #2
 8006104:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800610c:	699a      	ldr	r2, [r3, #24]
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	f003 030f 	and.w	r3, r3, #15
 8006114:	2101      	movs	r1, #1
 8006116:	fa01 f303 	lsl.w	r3, r1, r3
 800611a:	6939      	ldr	r1, [r7, #16]
 800611c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006120:	4313      	orrs	r3, r2
 8006122:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006130:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006134:	2b00      	cmp	r3, #0
 8006136:	da03      	bge.n	8006140 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006138:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800613c:	61bb      	str	r3, [r7, #24]
 800613e:	e001      	b.n	8006144 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006140:	2300      	movs	r3, #0
 8006142:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f7ff fef9 	bl	8005f3c <USB_GetHostSpeed>
 800614a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800614c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006150:	2b02      	cmp	r3, #2
 8006152:	d106      	bne.n	8006162 <USB_HC_Init+0x1d6>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b02      	cmp	r3, #2
 8006158:	d003      	beq.n	8006162 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800615a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	e001      	b.n	8006166 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006162:	2300      	movs	r3, #0
 8006164:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006166:	787b      	ldrb	r3, [r7, #1]
 8006168:	059b      	lsls	r3, r3, #22
 800616a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800616e:	78bb      	ldrb	r3, [r7, #2]
 8006170:	02db      	lsls	r3, r3, #11
 8006172:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006176:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006178:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800617c:	049b      	lsls	r3, r3, #18
 800617e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006182:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006184:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006186:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800618a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	431a      	orrs	r2, r3
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006194:	78fa      	ldrb	r2, [r7, #3]
 8006196:	0151      	lsls	r1, r2, #5
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	440a      	add	r2, r1
 800619c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80061a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061a4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80061a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d003      	beq.n	80061b6 <USB_HC_Init+0x22a>
 80061ae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d10f      	bne.n	80061d6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80061b6:	78fb      	ldrb	r3, [r7, #3]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	78fa      	ldrb	r2, [r7, #3]
 80061c6:	0151      	lsls	r1, r2, #5
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	440a      	add	r2, r1
 80061cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80061d4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80061d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3720      	adds	r7, #32
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	40040000 	.word	0x40040000

080061e4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b08c      	sub	sp, #48	@ 0x30
 80061e8:	af02      	add	r7, sp, #8
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	4613      	mov	r3, r2
 80061f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	785b      	ldrb	r3, [r3, #1]
 80061fa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80061fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006200:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4a5d      	ldr	r2, [pc, #372]	@ (800637c <USB_HC_StartXfer+0x198>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d12f      	bne.n	800626a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800620a:	79fb      	ldrb	r3, [r7, #7]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d11c      	bne.n	800624a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	7c9b      	ldrb	r3, [r3, #18]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <USB_HC_StartXfer+0x3c>
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	7c9b      	ldrb	r3, [r3, #18]
 800621c:	2b02      	cmp	r3, #2
 800621e:	d124      	bne.n	800626a <USB_HC_StartXfer+0x86>
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	799b      	ldrb	r3, [r3, #6]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d120      	bne.n	800626a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	4413      	add	r3, r2
 8006230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	69fa      	ldr	r2, [r7, #28]
 8006238:	0151      	lsls	r1, r2, #5
 800623a:	6a3a      	ldr	r2, [r7, #32]
 800623c:	440a      	add	r2, r1
 800623e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006246:	60d3      	str	r3, [r2, #12]
 8006248:	e00f      	b.n	800626a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	791b      	ldrb	r3, [r3, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10b      	bne.n	800626a <USB_HC_StartXfer+0x86>
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	795b      	ldrb	r3, [r3, #5]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d107      	bne.n	800626a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	785b      	ldrb	r3, [r3, #1]
 800625e:	4619      	mov	r1, r3
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f000 fb6b 	bl	800693c <USB_DoPing>
        return HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	e232      	b.n	80066d0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	799b      	ldrb	r3, [r3, #6]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d158      	bne.n	8006324 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006272:	2301      	movs	r3, #1
 8006274:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	78db      	ldrb	r3, [r3, #3]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d007      	beq.n	800628e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800627e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	8a92      	ldrh	r2, [r2, #20]
 8006284:	fb03 f202 	mul.w	r2, r3, r2
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	61da      	str	r2, [r3, #28]
 800628c:	e07c      	b.n	8006388 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	7c9b      	ldrb	r3, [r3, #18]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d130      	bne.n	80062f8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	2bbc      	cmp	r3, #188	@ 0xbc
 800629c:	d918      	bls.n	80062d0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	8a9b      	ldrh	r3, [r3, #20]
 80062a2:	461a      	mov	r2, r3
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	69da      	ldr	r2, [r3, #28]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d003      	beq.n	80062c0 <USB_HC_StartXfer+0xdc>
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d103      	bne.n	80062c8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2202      	movs	r2, #2
 80062c4:	60da      	str	r2, [r3, #12]
 80062c6:	e05f      	b.n	8006388 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2201      	movs	r2, #1
 80062cc:	60da      	str	r2, [r3, #12]
 80062ce:	e05b      	b.n	8006388 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	6a1a      	ldr	r2, [r3, #32]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d007      	beq.n	80062f0 <USB_HC_StartXfer+0x10c>
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d003      	beq.n	80062f0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2204      	movs	r2, #4
 80062ec:	60da      	str	r2, [r3, #12]
 80062ee:	e04b      	b.n	8006388 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	2203      	movs	r2, #3
 80062f4:	60da      	str	r2, [r3, #12]
 80062f6:	e047      	b.n	8006388 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80062f8:	79fb      	ldrb	r3, [r7, #7]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d10d      	bne.n	800631a <USB_HC_StartXfer+0x136>
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	8a92      	ldrh	r2, [r2, #20]
 8006306:	4293      	cmp	r3, r2
 8006308:	d907      	bls.n	800631a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800630a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	8a92      	ldrh	r2, [r2, #20]
 8006310:	fb03 f202 	mul.w	r2, r3, r2
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	61da      	str	r2, [r3, #28]
 8006318:	e036      	b.n	8006388 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	6a1a      	ldr	r2, [r3, #32]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	61da      	str	r2, [r3, #28]
 8006322:	e031      	b.n	8006388 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d018      	beq.n	800635e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	8a92      	ldrh	r2, [r2, #20]
 8006334:	4413      	add	r3, r2
 8006336:	3b01      	subs	r3, #1
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	8a92      	ldrh	r2, [r2, #20]
 800633c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006340:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006342:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006344:	8b7b      	ldrh	r3, [r7, #26]
 8006346:	429a      	cmp	r2, r3
 8006348:	d90b      	bls.n	8006362 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800634a:	8b7b      	ldrh	r3, [r7, #26]
 800634c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800634e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	8a92      	ldrh	r2, [r2, #20]
 8006354:	fb03 f202 	mul.w	r2, r3, r2
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	61da      	str	r2, [r3, #28]
 800635c:	e001      	b.n	8006362 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800635e:	2301      	movs	r3, #1
 8006360:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	78db      	ldrb	r3, [r3, #3]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800636a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	8a92      	ldrh	r2, [r2, #20]
 8006370:	fb03 f202 	mul.w	r2, r3, r2
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	61da      	str	r2, [r3, #28]
 8006378:	e006      	b.n	8006388 <USB_HC_StartXfer+0x1a4>
 800637a:	bf00      	nop
 800637c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	6a1a      	ldr	r2, [r3, #32]
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	69db      	ldr	r3, [r3, #28]
 800638c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006390:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006392:	04d9      	lsls	r1, r3, #19
 8006394:	4ba3      	ldr	r3, [pc, #652]	@ (8006624 <USB_HC_StartXfer+0x440>)
 8006396:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006398:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	7d9b      	ldrb	r3, [r3, #22]
 800639e:	075b      	lsls	r3, r3, #29
 80063a0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063a4:	69f9      	ldr	r1, [r7, #28]
 80063a6:	0148      	lsls	r0, r1, #5
 80063a8:	6a39      	ldr	r1, [r7, #32]
 80063aa:	4401      	add	r1, r0
 80063ac:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80063b0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063b2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80063b4:	79fb      	ldrb	r3, [r7, #7]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d009      	beq.n	80063ce <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	6999      	ldr	r1, [r3, #24]
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063ca:	460a      	mov	r2, r1
 80063cc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b00      	cmp	r3, #0
 80063dc:	bf0c      	ite	eq
 80063de:	2301      	moveq	r3, #1
 80063e0:	2300      	movne	r3, #0
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	69fa      	ldr	r2, [r7, #28]
 80063f6:	0151      	lsls	r1, r2, #5
 80063f8:	6a3a      	ldr	r2, [r7, #32]
 80063fa:	440a      	add	r2, r1
 80063fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006400:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006404:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	4413      	add	r3, r2
 800640e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	7e7b      	ldrb	r3, [r7, #25]
 8006416:	075b      	lsls	r3, r3, #29
 8006418:	69f9      	ldr	r1, [r7, #28]
 800641a:	0148      	lsls	r0, r1, #5
 800641c:	6a39      	ldr	r1, [r7, #32]
 800641e:	4401      	add	r1, r0
 8006420:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006424:	4313      	orrs	r3, r2
 8006426:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	799b      	ldrb	r3, [r3, #6]
 800642c:	2b01      	cmp	r3, #1
 800642e:	f040 80c3 	bne.w	80065b8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	7c5b      	ldrb	r3, [r3, #17]
 8006436:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800643c:	4313      	orrs	r3, r2
 800643e:	69fa      	ldr	r2, [r7, #28]
 8006440:	0151      	lsls	r1, r2, #5
 8006442:	6a3a      	ldr	r2, [r7, #32]
 8006444:	440a      	add	r2, r1
 8006446:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800644a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800644e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	6a3b      	ldr	r3, [r7, #32]
 8006456:	4413      	add	r3, r2
 8006458:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	69fa      	ldr	r2, [r7, #28]
 8006460:	0151      	lsls	r1, r2, #5
 8006462:	6a3a      	ldr	r2, [r7, #32]
 8006464:	440a      	add	r2, r1
 8006466:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800646a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800646e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	79db      	ldrb	r3, [r3, #7]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d123      	bne.n	80064c0 <USB_HC_StartXfer+0x2dc>
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	78db      	ldrb	r3, [r3, #3]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d11f      	bne.n	80064c0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	4413      	add	r3, r2
 8006488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	69fa      	ldr	r2, [r7, #28]
 8006490:	0151      	lsls	r1, r2, #5
 8006492:	6a3a      	ldr	r2, [r7, #32]
 8006494:	440a      	add	r2, r1
 8006496:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800649a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800649e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	69fa      	ldr	r2, [r7, #28]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	6a3a      	ldr	r2, [r7, #32]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064be:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	7c9b      	ldrb	r3, [r3, #18]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d003      	beq.n	80064d0 <USB_HC_StartXfer+0x2ec>
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	7c9b      	ldrb	r3, [r3, #18]
 80064cc:	2b03      	cmp	r3, #3
 80064ce:	d117      	bne.n	8006500 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d113      	bne.n	8006500 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	78db      	ldrb	r3, [r3, #3]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d10f      	bne.n	8006500 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	69fa      	ldr	r2, [r7, #28]
 80064f0:	0151      	lsls	r1, r2, #5
 80064f2:	6a3a      	ldr	r2, [r7, #32]
 80064f4:	440a      	add	r2, r1
 80064f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064fe:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	7c9b      	ldrb	r3, [r3, #18]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d162      	bne.n	80065ce <USB_HC_StartXfer+0x3ea>
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	78db      	ldrb	r3, [r3, #3]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d15e      	bne.n	80065ce <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	3b01      	subs	r3, #1
 8006516:	2b03      	cmp	r3, #3
 8006518:	d858      	bhi.n	80065cc <USB_HC_StartXfer+0x3e8>
 800651a:	a201      	add	r2, pc, #4	@ (adr r2, 8006520 <USB_HC_StartXfer+0x33c>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	08006531 	.word	0x08006531
 8006524:	08006553 	.word	0x08006553
 8006528:	08006575 	.word	0x08006575
 800652c:	08006597 	.word	0x08006597
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	4413      	add	r3, r2
 8006538:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	69fa      	ldr	r2, [r7, #28]
 8006540:	0151      	lsls	r1, r2, #5
 8006542:	6a3a      	ldr	r2, [r7, #32]
 8006544:	440a      	add	r2, r1
 8006546:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800654a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800654e:	6053      	str	r3, [r2, #4]
          break;
 8006550:	e03d      	b.n	80065ce <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	015a      	lsls	r2, r3, #5
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	4413      	add	r3, r2
 800655a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	69fa      	ldr	r2, [r7, #28]
 8006562:	0151      	lsls	r1, r2, #5
 8006564:	6a3a      	ldr	r2, [r7, #32]
 8006566:	440a      	add	r2, r1
 8006568:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800656c:	f043 030e 	orr.w	r3, r3, #14
 8006570:	6053      	str	r3, [r2, #4]
          break;
 8006572:	e02c      	b.n	80065ce <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	4413      	add	r3, r2
 800657c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	69fa      	ldr	r2, [r7, #28]
 8006584:	0151      	lsls	r1, r2, #5
 8006586:	6a3a      	ldr	r2, [r7, #32]
 8006588:	440a      	add	r2, r1
 800658a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800658e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006592:	6053      	str	r3, [r2, #4]
          break;
 8006594:	e01b      	b.n	80065ce <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	4413      	add	r3, r2
 800659e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	69fa      	ldr	r2, [r7, #28]
 80065a6:	0151      	lsls	r1, r2, #5
 80065a8:	6a3a      	ldr	r2, [r7, #32]
 80065aa:	440a      	add	r2, r1
 80065ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065b4:	6053      	str	r3, [r2, #4]
          break;
 80065b6:	e00a      	b.n	80065ce <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065c4:	461a      	mov	r2, r3
 80065c6:	2300      	movs	r3, #0
 80065c8:	6053      	str	r3, [r2, #4]
 80065ca:	e000      	b.n	80065ce <USB_HC_StartXfer+0x3ea>
          break;
 80065cc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80065e4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	78db      	ldrb	r3, [r3, #3]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d004      	beq.n	80065f8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065f4:	613b      	str	r3, [r7, #16]
 80065f6:	e003      	b.n	8006600 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80065fe:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006606:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	4413      	add	r3, r2
 8006610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006614:	461a      	mov	r2, r3
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800661a:	79fb      	ldrb	r3, [r7, #7]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	e055      	b.n	80066d0 <USB_HC_StartXfer+0x4ec>
 8006624:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	78db      	ldrb	r3, [r3, #3]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d14e      	bne.n	80066ce <USB_HC_StartXfer+0x4ea>
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d04a      	beq.n	80066ce <USB_HC_StartXfer+0x4ea>
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	79db      	ldrb	r3, [r3, #7]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d146      	bne.n	80066ce <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	7c9b      	ldrb	r3, [r3, #18]
 8006644:	2b03      	cmp	r3, #3
 8006646:	d831      	bhi.n	80066ac <USB_HC_StartXfer+0x4c8>
 8006648:	a201      	add	r2, pc, #4	@ (adr r2, 8006650 <USB_HC_StartXfer+0x46c>)
 800664a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664e:	bf00      	nop
 8006650:	08006661 	.word	0x08006661
 8006654:	08006685 	.word	0x08006685
 8006658:	08006661 	.word	0x08006661
 800665c:	08006685 	.word	0x08006685
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	3303      	adds	r3, #3
 8006666:	089b      	lsrs	r3, r3, #2
 8006668:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800666a:	8afa      	ldrh	r2, [r7, #22]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006670:	b29b      	uxth	r3, r3
 8006672:	429a      	cmp	r2, r3
 8006674:	d91c      	bls.n	80066b0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	f043 0220 	orr.w	r2, r3, #32
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	619a      	str	r2, [r3, #24]
        }
        break;
 8006682:	e015      	b.n	80066b0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	6a1b      	ldr	r3, [r3, #32]
 8006688:	3303      	adds	r3, #3
 800668a:	089b      	lsrs	r3, r3, #2
 800668c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800668e:	8afa      	ldrh	r2, [r7, #22]
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	b29b      	uxth	r3, r3
 800669a:	429a      	cmp	r2, r3
 800669c:	d90a      	bls.n	80066b4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80066aa:	e003      	b.n	80066b4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80066ac:	bf00      	nop
 80066ae:	e002      	b.n	80066b6 <USB_HC_StartXfer+0x4d2>
        break;
 80066b0:	bf00      	nop
 80066b2:	e000      	b.n	80066b6 <USB_HC_StartXfer+0x4d2>
        break;
 80066b4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	6999      	ldr	r1, [r3, #24]
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	785a      	ldrb	r2, [r3, #1]
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	2000      	movs	r0, #0
 80066c6:	9000      	str	r0, [sp, #0]
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f7ff f9c3 	bl	8005a54 <USB_WritePacket>
  }

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3728      	adds	r7, #40	@ 0x28
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	b29b      	uxth	r3, r3
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b089      	sub	sp, #36	@ 0x24
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	460b      	mov	r3, r1
 8006704:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800670a:	78fb      	ldrb	r3, [r7, #3]
 800670c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	4413      	add	r3, r2
 800671a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	0c9b      	lsrs	r3, r3, #18
 8006722:	f003 0303 	and.w	r3, r3, #3
 8006726:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	4413      	add	r3, r2
 8006730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	0fdb      	lsrs	r3, r3, #31
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	4413      	add	r3, r2
 8006746:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	0fdb      	lsrs	r3, r3, #31
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f003 0320 	and.w	r3, r3, #32
 800675c:	2b20      	cmp	r3, #32
 800675e:	d10d      	bne.n	800677c <USB_HC_Halt+0x82>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10a      	bne.n	800677c <USB_HC_Halt+0x82>
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d005      	beq.n	8006778 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d002      	beq.n	8006778 <USB_HC_Halt+0x7e>
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	2b03      	cmp	r3, #3
 8006776:	d101      	bne.n	800677c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006778:	2300      	movs	r3, #0
 800677a:	e0d8      	b.n	800692e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d002      	beq.n	8006788 <USB_HC_Halt+0x8e>
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2b02      	cmp	r3, #2
 8006786:	d173      	bne.n	8006870 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	4413      	add	r3, r2
 8006790:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	0151      	lsls	r1, r2, #5
 800679a:	69fa      	ldr	r2, [r7, #28]
 800679c:	440a      	add	r2, r1
 800679e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067a6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f003 0320 	and.w	r3, r3, #32
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d14a      	bne.n	800684a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d133      	bne.n	8006828 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	69ba      	ldr	r2, [r7, #24]
 80067d0:	0151      	lsls	r1, r2, #5
 80067d2:	69fa      	ldr	r2, [r7, #28]
 80067d4:	440a      	add	r2, r1
 80067d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067de:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	0151      	lsls	r1, r2, #5
 80067f2:	69fa      	ldr	r2, [r7, #28]
 80067f4:	440a      	add	r2, r1
 80067f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80067fe:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	3301      	adds	r3, #1
 8006804:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800680c:	d82e      	bhi.n	800686c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	4413      	add	r3, r2
 8006816:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006820:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006824:	d0ec      	beq.n	8006800 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006826:	e081      	b.n	800692c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	4413      	add	r3, r2
 8006830:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	69ba      	ldr	r2, [r7, #24]
 8006838:	0151      	lsls	r1, r2, #5
 800683a:	69fa      	ldr	r2, [r7, #28]
 800683c:	440a      	add	r2, r1
 800683e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006842:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006846:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006848:	e070      	b.n	800692c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	4413      	add	r3, r2
 8006852:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	0151      	lsls	r1, r2, #5
 800685c:	69fa      	ldr	r2, [r7, #28]
 800685e:	440a      	add	r2, r1
 8006860:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006864:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006868:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800686a:	e05f      	b.n	800692c <USB_HC_Halt+0x232>
            break;
 800686c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800686e:	e05d      	b.n	800692c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	4413      	add	r3, r2
 8006878:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	0151      	lsls	r1, r2, #5
 8006882:	69fa      	ldr	r2, [r7, #28]
 8006884:	440a      	add	r2, r1
 8006886:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800688a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800688e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d133      	bne.n	8006908 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	69ba      	ldr	r2, [r7, #24]
 80068b0:	0151      	lsls	r1, r2, #5
 80068b2:	69fa      	ldr	r2, [r7, #28]
 80068b4:	440a      	add	r2, r1
 80068b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69ba      	ldr	r2, [r7, #24]
 80068d0:	0151      	lsls	r1, r2, #5
 80068d2:	69fa      	ldr	r2, [r7, #28]
 80068d4:	440a      	add	r2, r1
 80068d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80068de:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	3301      	adds	r3, #1
 80068e4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068ec:	d81d      	bhi.n	800692a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006900:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006904:	d0ec      	beq.n	80068e0 <USB_HC_Halt+0x1e6>
 8006906:	e011      	b.n	800692c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	4413      	add	r3, r2
 8006910:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	0151      	lsls	r1, r2, #5
 800691a:	69fa      	ldr	r2, [r7, #28]
 800691c:	440a      	add	r2, r1
 800691e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006922:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006926:	6013      	str	r3, [r2, #0]
 8006928:	e000      	b.n	800692c <USB_HC_Halt+0x232>
          break;
 800692a:	bf00      	nop
    }
  }

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3724      	adds	r7, #36	@ 0x24
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
	...

0800693c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	460b      	mov	r3, r1
 8006946:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800694c:	78fb      	ldrb	r3, [r7, #3]
 800694e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006950:	2301      	movs	r3, #1
 8006952:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	04da      	lsls	r2, r3, #19
 8006958:	4b15      	ldr	r3, [pc, #84]	@ (80069b0 <USB_DoPing+0x74>)
 800695a:	4013      	ands	r3, r2
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	0151      	lsls	r1, r2, #5
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	440a      	add	r2, r1
 8006964:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006968:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800696c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	4413      	add	r3, r2
 8006976:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006984:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800698c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	4413      	add	r3, r2
 8006996:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800699a:	461a      	mov	r2, r3
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	1ff80000 	.word	0x1ff80000

080069b4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b088      	sub	sp, #32
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80069bc:	2300      	movs	r3, #0
 80069be:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f7fe ff86 	bl	80058da <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069ce:	2110      	movs	r1, #16
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7fe ffdf 	bl	8005994 <USB_FlushTxFifo>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7ff f809 	bl	80059f8 <USB_FlushRxFifo>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80069f0:	2300      	movs	r3, #0
 80069f2:	61bb      	str	r3, [r7, #24]
 80069f4:	e01f      	b.n	8006a36 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a0c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a14:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a1c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	3301      	adds	r3, #1
 8006a34:	61bb      	str	r3, [r7, #24]
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	2b0f      	cmp	r3, #15
 8006a3a:	d9dc      	bls.n	80069f6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	61bb      	str	r3, [r7, #24]
 8006a40:	e034      	b.n	8006aac <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a58:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a60:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a68:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	015a      	lsls	r2, r3, #5
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a76:	461a      	mov	r2, r3
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a88:	d80c      	bhi.n	8006aa4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006aa0:	d0ec      	beq.n	8006a7c <USB_StopHost+0xc8>
 8006aa2:	e000      	b.n	8006aa6 <USB_StopHost+0xf2>
        break;
 8006aa4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	61bb      	str	r3, [r7, #24]
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	2b0f      	cmp	r3, #15
 8006ab0:	d9c7      	bls.n	8006a42 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ab8:	461a      	mov	r2, r3
 8006aba:	f04f 33ff 	mov.w	r3, #4294967295
 8006abe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7fe fef5 	bl	80058b8 <USB_EnableGlobalInt>

  return ret;
 8006ace:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3720      	adds	r7, #32
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006ad8:	b590      	push	{r4, r7, lr}
 8006ada:	b089      	sub	sp, #36	@ 0x24
 8006adc:	af04      	add	r7, sp, #16
 8006ade:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	2102      	movs	r1, #2
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fc83 	bl	80073f2 <USBH_FindInterface>
 8006aec:	4603      	mov	r3, r0
 8006aee:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
 8006af2:	2bff      	cmp	r3, #255	@ 0xff
 8006af4:	d002      	beq.n	8006afc <USBH_CDC_InterfaceInit+0x24>
 8006af6:	7bfb      	ldrb	r3, [r7, #15]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d901      	bls.n	8006b00 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006afc:	2302      	movs	r3, #2
 8006afe:	e13d      	b.n	8006d7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	4619      	mov	r1, r3
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fc58 	bl	80073ba <USBH_SelectInterface>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006b0e:	7bbb      	ldrb	r3, [r7, #14]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d001      	beq.n	8006b18 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006b14:	2302      	movs	r3, #2
 8006b16:	e131      	b.n	8006d7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006b1e:	2050      	movs	r0, #80	@ 0x50
 8006b20:	f002 fb58 	bl	80091d4 <malloc>
 8006b24:	4603      	mov	r3, r0
 8006b26:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006b38:	2302      	movs	r3, #2
 8006b3a:	e11f      	b.n	8006d7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006b3c:	2250      	movs	r2, #80	@ 0x50
 8006b3e:	2100      	movs	r1, #0
 8006b40:	68b8      	ldr	r0, [r7, #8]
 8006b42:	f002 fc05 	bl	8009350 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	211a      	movs	r1, #26
 8006b4c:	fb01 f303 	mul.w	r3, r1, r3
 8006b50:	4413      	add	r3, r2
 8006b52:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	b25b      	sxtb	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	da15      	bge.n	8006b8a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b5e:	7bfb      	ldrb	r3, [r7, #15]
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	211a      	movs	r1, #26
 8006b64:	fb01 f303 	mul.w	r3, r1, r3
 8006b68:	4413      	add	r3, r2
 8006b6a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006b6e:	781a      	ldrb	r2, [r3, #0]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	211a      	movs	r1, #26
 8006b7a:	fb01 f303 	mul.w	r3, r1, r3
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006b84:	881a      	ldrh	r2, [r3, #0]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	785b      	ldrb	r3, [r3, #1]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f001 ffc4 	bl	8008b1e <USBH_AllocPipe>
 8006b96:	4603      	mov	r3, r0
 8006b98:	461a      	mov	r2, r3
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	7819      	ldrb	r1, [r3, #0]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	7858      	ldrb	r0, [r3, #1]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	8952      	ldrh	r2, [r2, #10]
 8006bb6:	9202      	str	r2, [sp, #8]
 8006bb8:	2203      	movs	r2, #3
 8006bba:	9201      	str	r2, [sp, #4]
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	4623      	mov	r3, r4
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f001 ff7c 	bl	8008ac0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f002 fa79 	bl	80090c8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	2200      	movs	r2, #0
 8006bda:	210a      	movs	r1, #10
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fc08 	bl	80073f2 <USBH_FindInterface>
 8006be2:	4603      	mov	r3, r0
 8006be4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006be6:	7bfb      	ldrb	r3, [r7, #15]
 8006be8:	2bff      	cmp	r3, #255	@ 0xff
 8006bea:	d002      	beq.n	8006bf2 <USBH_CDC_InterfaceInit+0x11a>
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d901      	bls.n	8006bf6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	e0c2      	b.n	8006d7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	211a      	movs	r1, #26
 8006bfc:	fb01 f303 	mul.w	r3, r1, r3
 8006c00:	4413      	add	r3, r2
 8006c02:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	b25b      	sxtb	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	da16      	bge.n	8006c3c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	211a      	movs	r1, #26
 8006c14:	fb01 f303 	mul.w	r3, r1, r3
 8006c18:	4413      	add	r3, r2
 8006c1a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006c1e:	781a      	ldrb	r2, [r3, #0]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	211a      	movs	r1, #26
 8006c2a:	fb01 f303 	mul.w	r3, r1, r3
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006c34:	881a      	ldrh	r2, [r3, #0]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	835a      	strh	r2, [r3, #26]
 8006c3a:	e015      	b.n	8006c68 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	211a      	movs	r1, #26
 8006c42:	fb01 f303 	mul.w	r3, r1, r3
 8006c46:	4413      	add	r3, r2
 8006c48:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006c4c:	781a      	ldrb	r2, [r3, #0]
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	211a      	movs	r1, #26
 8006c58:	fb01 f303 	mul.w	r3, r1, r3
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006c62:	881a      	ldrh	r2, [r3, #0]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	211a      	movs	r1, #26
 8006c6e:	fb01 f303 	mul.w	r3, r1, r3
 8006c72:	4413      	add	r3, r2
 8006c74:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	b25b      	sxtb	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	da16      	bge.n	8006cae <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	211a      	movs	r1, #26
 8006c86:	fb01 f303 	mul.w	r3, r1, r3
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006c90:	781a      	ldrb	r2, [r3, #0]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c96:	7bfb      	ldrb	r3, [r7, #15]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	211a      	movs	r1, #26
 8006c9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006ca6:	881a      	ldrh	r2, [r3, #0]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	835a      	strh	r2, [r3, #26]
 8006cac:	e015      	b.n	8006cda <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006cae:	7bfb      	ldrb	r3, [r7, #15]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	211a      	movs	r1, #26
 8006cb4:	fb01 f303 	mul.w	r3, r1, r3
 8006cb8:	4413      	add	r3, r2
 8006cba:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006cbe:	781a      	ldrb	r2, [r3, #0]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	211a      	movs	r1, #26
 8006cca:	fb01 f303 	mul.w	r3, r1, r3
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006cd4:	881a      	ldrh	r2, [r3, #0]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	7b9b      	ldrb	r3, [r3, #14]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f001 ff1c 	bl	8008b1e <USBH_AllocPipe>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	461a      	mov	r2, r3
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	7bdb      	ldrb	r3, [r3, #15]
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f001 ff12 	bl	8008b1e <USBH_AllocPipe>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	7b59      	ldrb	r1, [r3, #13]
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	7b98      	ldrb	r0, [r3, #14]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	8b12      	ldrh	r2, [r2, #24]
 8006d1a:	9202      	str	r2, [sp, #8]
 8006d1c:	2202      	movs	r2, #2
 8006d1e:	9201      	str	r2, [sp, #4]
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	4623      	mov	r3, r4
 8006d24:	4602      	mov	r2, r0
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f001 feca 	bl	8008ac0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	7b19      	ldrb	r1, [r3, #12]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	7bd8      	ldrb	r0, [r3, #15]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	8b52      	ldrh	r2, [r2, #26]
 8006d44:	9202      	str	r2, [sp, #8]
 8006d46:	2202      	movs	r2, #2
 8006d48:	9201      	str	r2, [sp, #4]
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	4623      	mov	r3, r4
 8006d4e:	4602      	mov	r2, r0
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f001 feb5 	bl	8008ac0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	7b5b      	ldrb	r3, [r3, #13]
 8006d62:	2200      	movs	r2, #0
 8006d64:	4619      	mov	r1, r3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f002 f9ae 	bl	80090c8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	7b1b      	ldrb	r3, [r3, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f002 f9a7 	bl	80090c8 <USBH_LL_SetToggle>

  return USBH_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3714      	adds	r7, #20
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd90      	pop	{r4, r7, pc}

08006d84 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d92:	69db      	ldr	r3, [r3, #28]
 8006d94:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00e      	beq.n	8006dbc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f001 feaa 	bl	8008afe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	4619      	mov	r1, r3
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f001 fed5 	bl	8008b60 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	7b1b      	ldrb	r3, [r3, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00e      	beq.n	8006de2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	7b1b      	ldrb	r3, [r3, #12]
 8006dc8:	4619      	mov	r1, r3
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f001 fe97 	bl	8008afe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	7b1b      	ldrb	r3, [r3, #12]
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f001 fec2 	bl	8008b60 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	7b5b      	ldrb	r3, [r3, #13]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00e      	beq.n	8006e08 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	7b5b      	ldrb	r3, [r3, #13]
 8006dee:	4619      	mov	r1, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f001 fe84 	bl	8008afe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	7b5b      	ldrb	r3, [r3, #13]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 feaf 	bl	8008b60 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00b      	beq.n	8006e2c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f002 f9e1 	bl	80091e4 <free>
    phost->pActiveClass->pData = 0U;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e28:	2200      	movs	r2, #0
 8006e2a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b084      	sub	sp, #16
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	3340      	adds	r3, #64	@ 0x40
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f8b1 	bl	8006fb6 <GetLineCoding>
 8006e54:	4603      	mov	r3, r0
 8006e56:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006e58:	7afb      	ldrb	r3, [r7, #11]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d105      	bne.n	8006e6a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006e64:	2102      	movs	r1, #2
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006e6a:	7afb      	ldrb	r3, [r7, #11]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006e80:	2300      	movs	r3, #0
 8006e82:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e8a:	69db      	ldr	r3, [r3, #28]
 8006e8c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006e94:	2b04      	cmp	r3, #4
 8006e96:	d877      	bhi.n	8006f88 <USBH_CDC_Process+0x114>
 8006e98:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea0 <USBH_CDC_Process+0x2c>)
 8006e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9e:	bf00      	nop
 8006ea0:	08006eb5 	.word	0x08006eb5
 8006ea4:	08006ebb 	.word	0x08006ebb
 8006ea8:	08006eeb 	.word	0x08006eeb
 8006eac:	08006f5f 	.word	0x08006f5f
 8006eb0:	08006f6d 	.word	0x08006f6d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8006eb8:	e06d      	b.n	8006f96 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f897 	bl	8006ff4 <SetLineCoding>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006eca:	7bbb      	ldrb	r3, [r7, #14]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d104      	bne.n	8006eda <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ed8:	e058      	b.n	8006f8c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006eda:	7bbb      	ldrb	r3, [r7, #14]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d055      	beq.n	8006f8c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2204      	movs	r2, #4
 8006ee4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006ee8:	e050      	b.n	8006f8c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	3340      	adds	r3, #64	@ 0x40
 8006eee:	4619      	mov	r1, r3
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f860 	bl	8006fb6 <GetLineCoding>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006efa:	7bbb      	ldrb	r3, [r7, #14]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d126      	bne.n	8006f4e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f12:	791b      	ldrb	r3, [r3, #4]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d13b      	bne.n	8006f90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f22:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d133      	bne.n	8006f90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f32:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d12b      	bne.n	8006f90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f40:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d124      	bne.n	8006f90 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f958 	bl	80071fc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006f4c:	e020      	b.n	8006f90 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d01d      	beq.n	8006f90 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2204      	movs	r2, #4
 8006f58:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006f5c:	e018      	b.n	8006f90 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f867 	bl	8007032 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f8da 	bl	800711e <CDC_ProcessReception>
      break;
 8006f6a:	e014      	b.n	8006f96 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f001 f81e 	bl	8007fb0 <USBH_ClrFeature>
 8006f74:	4603      	mov	r3, r0
 8006f76:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f78:	7bbb      	ldrb	r3, [r7, #14]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10a      	bne.n	8006f94 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006f86:	e005      	b.n	8006f94 <USBH_CDC_Process+0x120>

    default:
      break;
 8006f88:	bf00      	nop
 8006f8a:	e004      	b.n	8006f96 <USBH_CDC_Process+0x122>
      break;
 8006f8c:	bf00      	nop
 8006f8e:	e002      	b.n	8006f96 <USBH_CDC_Process+0x122>
      break;
 8006f90:	bf00      	nop
 8006f92:	e000      	b.n	8006f96 <USBH_CDC_Process+0x122>
      break;
 8006f94:	bf00      	nop

  }

  return status;
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b082      	sub	sp, #8
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
 8006fbe:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	22a1      	movs	r2, #161	@ 0xa1
 8006fc4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2221      	movs	r2, #33	@ 0x21
 8006fca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2207      	movs	r2, #7
 8006fdc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2207      	movs	r2, #7
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 fb17 	bl	8008618 <USBH_CtlReq>
 8006fea:	4603      	mov	r3, r0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2221      	movs	r2, #33	@ 0x21
 8007002:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2220      	movs	r2, #32
 8007008:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2207      	movs	r2, #7
 800701a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	2207      	movs	r2, #7
 8007020:	4619      	mov	r1, r3
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f001 faf8 	bl	8008618 <USBH_CtlReq>
 8007028:	4603      	mov	r3, r0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b086      	sub	sp, #24
 8007036:	af02      	add	r7, sp, #8
 8007038:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007044:	2300      	movs	r3, #0
 8007046:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800704e:	2b01      	cmp	r3, #1
 8007050:	d002      	beq.n	8007058 <CDC_ProcessTransmission+0x26>
 8007052:	2b02      	cmp	r3, #2
 8007054:	d023      	beq.n	800709e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007056:	e05e      	b.n	8007116 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	8b12      	ldrh	r2, [r2, #24]
 8007060:	4293      	cmp	r3, r2
 8007062:	d90b      	bls.n	800707c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	69d9      	ldr	r1, [r3, #28]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	8b1a      	ldrh	r2, [r3, #24]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	7b5b      	ldrb	r3, [r3, #13]
 8007070:	2001      	movs	r0, #1
 8007072:	9000      	str	r0, [sp, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f001 fce0 	bl	8008a3a <USBH_BulkSendData>
 800707a:	e00b      	b.n	8007094 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007084:	b29a      	uxth	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	7b5b      	ldrb	r3, [r3, #13]
 800708a:	2001      	movs	r0, #1
 800708c:	9000      	str	r0, [sp, #0]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f001 fcd3 	bl	8008a3a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800709c:	e03b      	b.n	8007116 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	7b5b      	ldrb	r3, [r3, #13]
 80070a2:	4619      	mov	r1, r3
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f001 ffe5 	bl	8009074 <USBH_LL_GetURBState>
 80070aa:	4603      	mov	r3, r0
 80070ac:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80070ae:	7afb      	ldrb	r3, [r7, #11]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d128      	bne.n	8007106 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	8b12      	ldrh	r2, [r2, #24]
 80070bc:	4293      	cmp	r3, r2
 80070be:	d90e      	bls.n	80070de <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	8b12      	ldrh	r2, [r2, #24]
 80070c8:	1a9a      	subs	r2, r3, r2
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	69db      	ldr	r3, [r3, #28]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	8b12      	ldrh	r2, [r2, #24]
 80070d6:	441a      	add	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	61da      	str	r2, [r3, #28]
 80070dc:	e002      	b.n	80070e4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d004      	beq.n	80070f6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80070f4:	e00e      	b.n	8007114 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f868 	bl	80071d4 <USBH_CDC_TransmitCallback>
      break;
 8007104:	e006      	b.n	8007114 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007106:	7afb      	ldrb	r3, [r7, #11]
 8007108:	2b02      	cmp	r3, #2
 800710a:	d103      	bne.n	8007114 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007114:	bf00      	nop
  }
}
 8007116:	bf00      	nop
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b086      	sub	sp, #24
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007130:	2300      	movs	r3, #0
 8007132:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800713a:	2b03      	cmp	r3, #3
 800713c:	d002      	beq.n	8007144 <CDC_ProcessReception+0x26>
 800713e:	2b04      	cmp	r3, #4
 8007140:	d00e      	beq.n	8007160 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8007142:	e043      	b.n	80071cc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	6a19      	ldr	r1, [r3, #32]
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	8b5a      	ldrh	r2, [r3, #26]
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	7b1b      	ldrb	r3, [r3, #12]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f001 fc97 	bl	8008a84 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	2204      	movs	r2, #4
 800715a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800715e:	e035      	b.n	80071cc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	7b1b      	ldrb	r3, [r3, #12]
 8007164:	4619      	mov	r1, r3
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f001 ff84 	bl	8009074 <USBH_LL_GetURBState>
 800716c:	4603      	mov	r3, r0
 800716e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007170:	7cfb      	ldrb	r3, [r7, #19]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d129      	bne.n	80071ca <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	7b1b      	ldrb	r3, [r3, #12]
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f001 fef9 	bl	8008f74 <USBH_LL_GetLastXferSize>
 8007182:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	429a      	cmp	r2, r3
 800718c:	d016      	beq.n	80071bc <CDC_ProcessReception+0x9e>
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	8b5b      	ldrh	r3, [r3, #26]
 8007192:	461a      	mov	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	4293      	cmp	r3, r2
 8007198:	d110      	bne.n	80071bc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	1ad2      	subs	r2, r2, r3
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	6a1a      	ldr	r2, [r3, #32]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	441a      	add	r2, r3
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2203      	movs	r2, #3
 80071b6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80071ba:	e006      	b.n	80071ca <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f80f 	bl	80071e8 <USBH_CDC_ReceiveCallback>
      break;
 80071ca:	bf00      	nop
  }
}
 80071cc:	bf00      	nop
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	4613      	mov	r3, r2
 800721c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d101      	bne.n	8007228 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007224:	2302      	movs	r3, #2
 8007226:	e029      	b.n	800727c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	79fa      	ldrb	r2, [r7, #7]
 800722c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 f81f 	bl	8007284 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f001 fdc9 	bl	8008e0c <USBH_LL_Init>

  return USBH_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800728c:	2300      	movs	r3, #0
 800728e:	60fb      	str	r3, [r7, #12]
 8007290:	e009      	b.n	80072a6 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	33e0      	adds	r3, #224	@ 0xe0
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	2200      	movs	r2, #0
 800729e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	3301      	adds	r3, #1
 80072a4:	60fb      	str	r3, [r7, #12]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2b0f      	cmp	r3, #15
 80072aa:	d9f2      	bls.n	8007292 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80072ac:	2300      	movs	r3, #0
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	e009      	b.n	80072c6 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80072bc:	2200      	movs	r2, #0
 80072be:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	3301      	adds	r3, #1
 80072c4:	60fb      	str	r3, [r7, #12]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072cc:	d3f1      	bcc.n	80072b2 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2240      	movs	r2, #64	@ 0x40
 80072f2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	331c      	adds	r3, #28
 800731e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007322:	2100      	movs	r1, #0
 8007324:	4618      	mov	r0, r3
 8007326:	f002 f813 	bl	8009350 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007330:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007334:	2100      	movs	r1, #0
 8007336:	4618      	mov	r0, r3
 8007338:	f002 f80a 	bl	8009350 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007342:	2212      	movs	r2, #18
 8007344:	2100      	movs	r1, #0
 8007346:	4618      	mov	r0, r3
 8007348:	f002 f802 	bl	8009350 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007352:	223e      	movs	r2, #62	@ 0x3e
 8007354:	2100      	movs	r1, #0
 8007356:	4618      	mov	r0, r3
 8007358:	f001 fffa 	bl	8009350 <memset>

  return USBH_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007366:	b480      	push	{r7}
 8007368:	b085      	sub	sp, #20
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d016      	beq.n	80073a8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10e      	bne.n	80073a2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800738a:	1c59      	adds	r1, r3, #1
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	33de      	adds	r3, #222	@ 0xde
 8007396:	6839      	ldr	r1, [r7, #0]
 8007398:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800739c:	2300      	movs	r3, #0
 800739e:	73fb      	strb	r3, [r7, #15]
 80073a0:	e004      	b.n	80073ac <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80073a2:	2302      	movs	r3, #2
 80073a4:	73fb      	strb	r3, [r7, #15]
 80073a6:	e001      	b.n	80073ac <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80073a8:	2302      	movs	r3, #2
 80073aa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b085      	sub	sp, #20
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	460b      	mov	r3, r1
 80073c4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80073c6:	2300      	movs	r3, #0
 80073c8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80073d0:	78fa      	ldrb	r2, [r7, #3]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d204      	bcs.n	80073e0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	78fa      	ldrb	r2, [r7, #3]
 80073da:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80073de:	e001      	b.n	80073e4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80073e0:	2302      	movs	r3, #2
 80073e2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b087      	sub	sp, #28
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	4608      	mov	r0, r1
 80073fc:	4611      	mov	r1, r2
 80073fe:	461a      	mov	r2, r3
 8007400:	4603      	mov	r3, r0
 8007402:	70fb      	strb	r3, [r7, #3]
 8007404:	460b      	mov	r3, r1
 8007406:	70bb      	strb	r3, [r7, #2]
 8007408:	4613      	mov	r3, r2
 800740a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800740c:	2300      	movs	r3, #0
 800740e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007410:	2300      	movs	r3, #0
 8007412:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800741a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800741c:	e025      	b.n	800746a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800741e:	7dfb      	ldrb	r3, [r7, #23]
 8007420:	221a      	movs	r2, #26
 8007422:	fb02 f303 	mul.w	r3, r2, r3
 8007426:	3308      	adds	r3, #8
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	4413      	add	r3, r2
 800742c:	3302      	adds	r3, #2
 800742e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	795b      	ldrb	r3, [r3, #5]
 8007434:	78fa      	ldrb	r2, [r7, #3]
 8007436:	429a      	cmp	r2, r3
 8007438:	d002      	beq.n	8007440 <USBH_FindInterface+0x4e>
 800743a:	78fb      	ldrb	r3, [r7, #3]
 800743c:	2bff      	cmp	r3, #255	@ 0xff
 800743e:	d111      	bne.n	8007464 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007444:	78ba      	ldrb	r2, [r7, #2]
 8007446:	429a      	cmp	r2, r3
 8007448:	d002      	beq.n	8007450 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800744a:	78bb      	ldrb	r3, [r7, #2]
 800744c:	2bff      	cmp	r3, #255	@ 0xff
 800744e:	d109      	bne.n	8007464 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007454:	787a      	ldrb	r2, [r7, #1]
 8007456:	429a      	cmp	r2, r3
 8007458:	d002      	beq.n	8007460 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800745a:	787b      	ldrb	r3, [r7, #1]
 800745c:	2bff      	cmp	r3, #255	@ 0xff
 800745e:	d101      	bne.n	8007464 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007460:	7dfb      	ldrb	r3, [r7, #23]
 8007462:	e006      	b.n	8007472 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007464:	7dfb      	ldrb	r3, [r7, #23]
 8007466:	3301      	adds	r3, #1
 8007468:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800746a:	7dfb      	ldrb	r3, [r7, #23]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d9d6      	bls.n	800741e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007470:	23ff      	movs	r3, #255	@ 0xff
}
 8007472:	4618      	mov	r0, r3
 8007474:	371c      	adds	r7, #28
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b082      	sub	sp, #8
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f001 fcfc 	bl	8008e84 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800748c:	2101      	movs	r1, #1
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f001 fe03 	bl	800909a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
	...

080074a0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b088      	sub	sp, #32
 80074a4:	af04      	add	r7, sp, #16
 80074a6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80074a8:	2302      	movs	r3, #2
 80074aa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80074ac:	2300      	movs	r3, #0
 80074ae:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d102      	bne.n	80074c2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2203      	movs	r2, #3
 80074c0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b0b      	cmp	r3, #11
 80074ca:	f200 81bc 	bhi.w	8007846 <USBH_Process+0x3a6>
 80074ce:	a201      	add	r2, pc, #4	@ (adr r2, 80074d4 <USBH_Process+0x34>)
 80074d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d4:	08007505 	.word	0x08007505
 80074d8:	08007537 	.word	0x08007537
 80074dc:	080075a1 	.word	0x080075a1
 80074e0:	080077e1 	.word	0x080077e1
 80074e4:	08007847 	.word	0x08007847
 80074e8:	08007641 	.word	0x08007641
 80074ec:	08007787 	.word	0x08007787
 80074f0:	08007677 	.word	0x08007677
 80074f4:	08007697 	.word	0x08007697
 80074f8:	080076b5 	.word	0x080076b5
 80074fc:	080076f9 	.word	0x080076f9
 8007500:	080077c9 	.word	0x080077c9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	f000 819c 	beq.w	800784a <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007518:	20c8      	movs	r0, #200	@ 0xc8
 800751a:	f001 fe08 	bl	800912e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f001 fd0d 	bl	8008f3e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007534:	e189      	b.n	800784a <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b01      	cmp	r3, #1
 8007540:	d107      	bne.n	8007552 <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2202      	movs	r2, #2
 800754e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007550:	e18a      	b.n	8007868 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007558:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800755c:	d914      	bls.n	8007588 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007564:	3301      	adds	r3, #1
 8007566:	b2da      	uxtb	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007574:	2b03      	cmp	r3, #3
 8007576:	d903      	bls.n	8007580 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	220d      	movs	r2, #13
 800757c:	701a      	strb	r2, [r3, #0]
      break;
 800757e:	e173      	b.n	8007868 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	701a      	strb	r2, [r3, #0]
      break;
 8007586:	e16f      	b.n	8007868 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800758e:	f103 020a 	add.w	r2, r3, #10
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007598:	200a      	movs	r0, #10
 800759a:	f001 fdc8 	bl	800912e <USBH_Delay>
      break;
 800759e:	e163      	b.n	8007868 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d005      	beq.n	80075b6 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80075b0:	2104      	movs	r1, #4
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80075b6:	2064      	movs	r0, #100	@ 0x64
 80075b8:	f001 fdb9 	bl	800912e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f001 fc97 	bl	8008ef0 <USBH_LL_GetSpeed>
 80075c2:	4603      	mov	r3, r0
 80075c4:	461a      	mov	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2205      	movs	r2, #5
 80075d0:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80075d2:	2100      	movs	r1, #0
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f001 faa2 	bl	8008b1e <USBH_AllocPipe>
 80075da:	4603      	mov	r3, r0
 80075dc:	461a      	mov	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80075e2:	2180      	movs	r1, #128	@ 0x80
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f001 fa9a 	bl	8008b1e <USBH_AllocPipe>
 80075ea:	4603      	mov	r3, r0
 80075ec:	461a      	mov	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	7919      	ldrb	r1, [r3, #4]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007606:	9202      	str	r2, [sp, #8]
 8007608:	2200      	movs	r2, #0
 800760a:	9201      	str	r2, [sp, #4]
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	4603      	mov	r3, r0
 8007610:	2280      	movs	r2, #128	@ 0x80
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f001 fa54 	bl	8008ac0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	7959      	ldrb	r1, [r3, #5]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800762c:	9202      	str	r2, [sp, #8]
 800762e:	2200      	movs	r2, #0
 8007630:	9201      	str	r2, [sp, #4]
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	4603      	mov	r3, r0
 8007636:	2200      	movs	r2, #0
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f001 fa41 	bl	8008ac0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800763e:	e113      	b.n	8007868 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 f917 	bl	8007874 <USBH_HandleEnum>
 8007646:	4603      	mov	r3, r0
 8007648:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800764a:	7bbb      	ldrb	r3, [r7, #14]
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	f040 80fd 	bne.w	800784e <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007662:	2b01      	cmp	r3, #1
 8007664:	d103      	bne.n	800766e <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2208      	movs	r2, #8
 800766a:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800766c:	e0ef      	b.n	800784e <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2207      	movs	r2, #7
 8007672:	701a      	strb	r2, [r3, #0]
      break;
 8007674:	e0eb      	b.n	800784e <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 80e8 	beq.w	8007852 <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007688:	2101      	movs	r1, #1
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2208      	movs	r2, #8
 8007692:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8007694:	e0dd      	b.n	8007852 <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800769c:	4619      	mov	r1, r3
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fc3f 	bl	8007f22 <USBH_SetCfg>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f040 80d5 	bne.w	8007856 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2209      	movs	r2, #9
 80076b0:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80076b2:	e0d0      	b.n	8007856 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80076ba:	f003 0320 	and.w	r3, r3, #32
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d016      	beq.n	80076f0 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80076c2:	2101      	movs	r1, #1
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fc4f 	bl	8007f68 <USBH_SetFeature>
 80076ca:	4603      	mov	r3, r0
 80076cc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80076ce:	7bbb      	ldrb	r3, [r7, #14]
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d103      	bne.n	80076de <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	220a      	movs	r2, #10
 80076da:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80076dc:	e0bd      	b.n	800785a <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 80076de:	7bbb      	ldrb	r3, [r7, #14]
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	f040 80b9 	bne.w	800785a <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	220a      	movs	r2, #10
 80076ec:	701a      	strb	r2, [r3, #0]
      break;
 80076ee:	e0b4      	b.n	800785a <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	220a      	movs	r2, #10
 80076f4:	701a      	strb	r2, [r3, #0]
      break;
 80076f6:	e0b0      	b.n	800785a <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f000 80ad 	beq.w	800785e <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800770c:	2300      	movs	r3, #0
 800770e:	73fb      	strb	r3, [r7, #15]
 8007710:	e016      	b.n	8007740 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007712:	7bfa      	ldrb	r2, [r7, #15]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	32de      	adds	r2, #222	@ 0xde
 8007718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800771c:	791a      	ldrb	r2, [r3, #4]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007724:	429a      	cmp	r2, r3
 8007726:	d108      	bne.n	800773a <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007728:	7bfa      	ldrb	r2, [r7, #15]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	32de      	adds	r2, #222	@ 0xde
 800772e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007738:	e005      	b.n	8007746 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800773a:	7bfb      	ldrb	r3, [r7, #15]
 800773c:	3301      	adds	r3, #1
 800773e:	73fb      	strb	r3, [r7, #15]
 8007740:	7bfb      	ldrb	r3, [r7, #15]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d0e5      	beq.n	8007712 <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800774c:	2b00      	cmp	r3, #0
 800774e:	d016      	beq.n	800777e <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	4798      	blx	r3
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d109      	bne.n	8007776 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2206      	movs	r2, #6
 8007766:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800776e:	2103      	movs	r1, #3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007774:	e073      	b.n	800785e <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	220d      	movs	r2, #13
 800777a:	701a      	strb	r2, [r3, #0]
      break;
 800777c:	e06f      	b.n	800785e <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	220d      	movs	r2, #13
 8007782:	701a      	strb	r2, [r3, #0]
      break;
 8007784:	e06b      	b.n	800785e <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800778c:	2b00      	cmp	r3, #0
 800778e:	d017      	beq.n	80077c0 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	4798      	blx	r3
 800779c:	4603      	mov	r3, r0
 800779e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d103      	bne.n	80077b0 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	220b      	movs	r2, #11
 80077ac:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80077ae:	e058      	b.n	8007862 <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 80077b0:	7bbb      	ldrb	r3, [r7, #14]
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d154      	bne.n	8007862 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	220d      	movs	r2, #13
 80077bc:	701a      	strb	r2, [r3, #0]
      break;
 80077be:	e050      	b.n	8007862 <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	220d      	movs	r2, #13
 80077c4:	701a      	strb	r2, [r3, #0]
      break;
 80077c6:	e04c      	b.n	8007862 <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d049      	beq.n	8007866 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	4798      	blx	r3
      }
      break;
 80077de:	e042      	b.n	8007866 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7ff fd4b 	bl	8007284 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d009      	beq.n	800780c <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007812:	2b00      	cmp	r3, #0
 8007814:	d005      	beq.n	8007822 <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800781c:	2105      	movs	r1, #5
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2b01      	cmp	r3, #1
 800782c:	d107      	bne.n	800783e <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f7ff fe21 	bl	800747e <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800783c:	e014      	b.n	8007868 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f001 fb20 	bl	8008e84 <USBH_LL_Start>
      break;
 8007844:	e010      	b.n	8007868 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8007846:	bf00      	nop
 8007848:	e00e      	b.n	8007868 <USBH_Process+0x3c8>
      break;
 800784a:	bf00      	nop
 800784c:	e00c      	b.n	8007868 <USBH_Process+0x3c8>
      break;
 800784e:	bf00      	nop
 8007850:	e00a      	b.n	8007868 <USBH_Process+0x3c8>
    break;
 8007852:	bf00      	nop
 8007854:	e008      	b.n	8007868 <USBH_Process+0x3c8>
      break;
 8007856:	bf00      	nop
 8007858:	e006      	b.n	8007868 <USBH_Process+0x3c8>
      break;
 800785a:	bf00      	nop
 800785c:	e004      	b.n	8007868 <USBH_Process+0x3c8>
      break;
 800785e:	bf00      	nop
 8007860:	e002      	b.n	8007868 <USBH_Process+0x3c8>
      break;
 8007862:	bf00      	nop
 8007864:	e000      	b.n	8007868 <USBH_Process+0x3c8>
      break;
 8007866:	bf00      	nop
  }
  return USBH_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop

08007874 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b088      	sub	sp, #32
 8007878:	af04      	add	r7, sp, #16
 800787a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800787c:	2301      	movs	r3, #1
 800787e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007880:	2301      	movs	r3, #1
 8007882:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	785b      	ldrb	r3, [r3, #1]
 8007888:	2b07      	cmp	r3, #7
 800788a:	f200 81bd 	bhi.w	8007c08 <USBH_HandleEnum+0x394>
 800788e:	a201      	add	r2, pc, #4	@ (adr r2, 8007894 <USBH_HandleEnum+0x20>)
 8007890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007894:	080078b5 	.word	0x080078b5
 8007898:	0800796f 	.word	0x0800796f
 800789c:	080079d9 	.word	0x080079d9
 80078a0:	08007a63 	.word	0x08007a63
 80078a4:	08007acd 	.word	0x08007acd
 80078a8:	08007b3d 	.word	0x08007b3d
 80078ac:	08007b83 	.word	0x08007b83
 80078b0:	08007bc9 	.word	0x08007bc9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80078b4:	2108      	movs	r1, #8
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fa50 	bl	8007d5c <USBH_Get_DevDesc>
 80078bc:	4603      	mov	r3, r0
 80078be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d12e      	bne.n	8007924 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	7919      	ldrb	r1, [r3, #4]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80078ea:	9202      	str	r2, [sp, #8]
 80078ec:	2200      	movs	r2, #0
 80078ee:	9201      	str	r2, [sp, #4]
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	4603      	mov	r3, r0
 80078f4:	2280      	movs	r2, #128	@ 0x80
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f001 f8e2 	bl	8008ac0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	7959      	ldrb	r1, [r3, #5]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007910:	9202      	str	r2, [sp, #8]
 8007912:	2200      	movs	r2, #0
 8007914:	9201      	str	r2, [sp, #4]
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	4603      	mov	r3, r0
 800791a:	2200      	movs	r2, #0
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f001 f8cf 	bl	8008ac0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007922:	e173      	b.n	8007c0c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007924:	7bbb      	ldrb	r3, [r7, #14]
 8007926:	2b03      	cmp	r3, #3
 8007928:	f040 8170 	bne.w	8007c0c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007932:	3301      	adds	r3, #1
 8007934:	b2da      	uxtb	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007942:	2b03      	cmp	r3, #3
 8007944:	d903      	bls.n	800794e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	220d      	movs	r2, #13
 800794a:	701a      	strb	r2, [r3, #0]
      break;
 800794c:	e15e      	b.n	8007c0c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	795b      	ldrb	r3, [r3, #5]
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f001 f903 	bl	8008b60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	791b      	ldrb	r3, [r3, #4]
 800795e:	4619      	mov	r1, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f001 f8fd 	bl	8008b60 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	701a      	strb	r2, [r3, #0]
      break;
 800796c:	e14e      	b.n	8007c0c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800796e:	2112      	movs	r1, #18
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f9f3 	bl	8007d5c <USBH_Get_DevDesc>
 8007976:	4603      	mov	r3, r0
 8007978:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800797a:	7bbb      	ldrb	r3, [r7, #14]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d103      	bne.n	8007988 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2202      	movs	r2, #2
 8007984:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007986:	e143      	b.n	8007c10 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007988:	7bbb      	ldrb	r3, [r7, #14]
 800798a:	2b03      	cmp	r3, #3
 800798c:	f040 8140 	bne.w	8007c10 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007996:	3301      	adds	r3, #1
 8007998:	b2da      	uxtb	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80079a6:	2b03      	cmp	r3, #3
 80079a8:	d903      	bls.n	80079b2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	220d      	movs	r2, #13
 80079ae:	701a      	strb	r2, [r3, #0]
      break;
 80079b0:	e12e      	b.n	8007c10 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	795b      	ldrb	r3, [r3, #5]
 80079b6:	4619      	mov	r1, r3
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f001 f8d1 	bl	8008b60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	791b      	ldrb	r3, [r3, #4]
 80079c2:	4619      	mov	r1, r3
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f001 f8cb 	bl	8008b60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	701a      	strb	r2, [r3, #0]
      break;
 80079d6:	e11b      	b.n	8007c10 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80079d8:	2101      	movs	r1, #1
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fa7d 	bl	8007eda <USBH_SetAddress>
 80079e0:	4603      	mov	r3, r0
 80079e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d130      	bne.n	8007a4c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80079ea:	2002      	movs	r0, #2
 80079ec:	f001 fb9f 	bl	800912e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2203      	movs	r2, #3
 80079fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	7919      	ldrb	r1, [r3, #4]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a12:	9202      	str	r2, [sp, #8]
 8007a14:	2200      	movs	r2, #0
 8007a16:	9201      	str	r2, [sp, #4]
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2280      	movs	r2, #128	@ 0x80
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f001 f84e 	bl	8008ac0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	7959      	ldrb	r1, [r3, #5]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a38:	9202      	str	r2, [sp, #8]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	9201      	str	r2, [sp, #4]
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	4603      	mov	r3, r0
 8007a42:	2200      	movs	r2, #0
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f001 f83b 	bl	8008ac0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a4a:	e0e3      	b.n	8007c14 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a4c:	7bbb      	ldrb	r3, [r7, #14]
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	f040 80e0 	bne.w	8007c14 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	220d      	movs	r2, #13
 8007a58:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	705a      	strb	r2, [r3, #1]
      break;
 8007a60:	e0d8      	b.n	8007c14 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007a62:	2109      	movs	r1, #9
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f9a5 	bl	8007db4 <USBH_Get_CfgDesc>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a6e:	7bbb      	ldrb	r3, [r7, #14]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d103      	bne.n	8007a7c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2204      	movs	r2, #4
 8007a78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a7a:	e0cd      	b.n	8007c18 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a7c:	7bbb      	ldrb	r3, [r7, #14]
 8007a7e:	2b03      	cmp	r3, #3
 8007a80:	f040 80ca 	bne.w	8007c18 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d903      	bls.n	8007aa6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	220d      	movs	r2, #13
 8007aa2:	701a      	strb	r2, [r3, #0]
      break;
 8007aa4:	e0b8      	b.n	8007c18 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	795b      	ldrb	r3, [r3, #5]
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f001 f857 	bl	8008b60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	791b      	ldrb	r3, [r3, #4]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f001 f851 	bl	8008b60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	701a      	strb	r2, [r3, #0]
      break;
 8007aca:	e0a5      	b.n	8007c18 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f96d 	bl	8007db4 <USBH_Get_CfgDesc>
 8007ada:	4603      	mov	r3, r0
 8007adc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ade:	7bbb      	ldrb	r3, [r7, #14]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d103      	bne.n	8007aec <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2205      	movs	r2, #5
 8007ae8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007aea:	e097      	b.n	8007c1c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007aec:	7bbb      	ldrb	r3, [r7, #14]
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	f040 8094 	bne.w	8007c1c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007afa:	3301      	adds	r3, #1
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	d903      	bls.n	8007b16 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	220d      	movs	r2, #13
 8007b12:	701a      	strb	r2, [r3, #0]
      break;
 8007b14:	e082      	b.n	8007c1c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	795b      	ldrb	r3, [r3, #5]
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f001 f81f 	bl	8008b60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	791b      	ldrb	r3, [r3, #4]
 8007b26:	4619      	mov	r1, r3
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f001 f819 	bl	8008b60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	701a      	strb	r2, [r3, #0]
      break;
 8007b3a:	e06f      	b.n	8007c1c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d019      	beq.n	8007b7a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b52:	23ff      	movs	r3, #255	@ 0xff
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f957 	bl	8007e08 <USBH_Get_StringDesc>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b5e:	7bbb      	ldrb	r3, [r7, #14]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d103      	bne.n	8007b6c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2206      	movs	r2, #6
 8007b68:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007b6a:	e059      	b.n	8007c20 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b6c:	7bbb      	ldrb	r3, [r7, #14]
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	d156      	bne.n	8007c20 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2206      	movs	r2, #6
 8007b76:	705a      	strb	r2, [r3, #1]
      break;
 8007b78:	e052      	b.n	8007c20 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2206      	movs	r2, #6
 8007b7e:	705a      	strb	r2, [r3, #1]
      break;
 8007b80:	e04e      	b.n	8007c20 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d019      	beq.n	8007bc0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007b98:	23ff      	movs	r3, #255	@ 0xff
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f934 	bl	8007e08 <USBH_Get_StringDesc>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ba4:	7bbb      	ldrb	r3, [r7, #14]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d103      	bne.n	8007bb2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2207      	movs	r2, #7
 8007bae:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007bb0:	e038      	b.n	8007c24 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bb2:	7bbb      	ldrb	r3, [r7, #14]
 8007bb4:	2b03      	cmp	r3, #3
 8007bb6:	d135      	bne.n	8007c24 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2207      	movs	r2, #7
 8007bbc:	705a      	strb	r2, [r3, #1]
      break;
 8007bbe:	e031      	b.n	8007c24 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2207      	movs	r2, #7
 8007bc4:	705a      	strb	r2, [r3, #1]
      break;
 8007bc6:	e02d      	b.n	8007c24 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d017      	beq.n	8007c02 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007bde:	23ff      	movs	r3, #255	@ 0xff
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f911 	bl	8007e08 <USBH_Get_StringDesc>
 8007be6:	4603      	mov	r3, r0
 8007be8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007bea:	7bbb      	ldrb	r3, [r7, #14]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d102      	bne.n	8007bf6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007bf4:	e018      	b.n	8007c28 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bf6:	7bbb      	ldrb	r3, [r7, #14]
 8007bf8:	2b03      	cmp	r3, #3
 8007bfa:	d115      	bne.n	8007c28 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8007c00:	e012      	b.n	8007c28 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	73fb      	strb	r3, [r7, #15]
      break;
 8007c06:	e00f      	b.n	8007c28 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007c08:	bf00      	nop
 8007c0a:	e00e      	b.n	8007c2a <USBH_HandleEnum+0x3b6>
      break;
 8007c0c:	bf00      	nop
 8007c0e:	e00c      	b.n	8007c2a <USBH_HandleEnum+0x3b6>
      break;
 8007c10:	bf00      	nop
 8007c12:	e00a      	b.n	8007c2a <USBH_HandleEnum+0x3b6>
      break;
 8007c14:	bf00      	nop
 8007c16:	e008      	b.n	8007c2a <USBH_HandleEnum+0x3b6>
      break;
 8007c18:	bf00      	nop
 8007c1a:	e006      	b.n	8007c2a <USBH_HandleEnum+0x3b6>
      break;
 8007c1c:	bf00      	nop
 8007c1e:	e004      	b.n	8007c2a <USBH_HandleEnum+0x3b6>
      break;
 8007c20:	bf00      	nop
 8007c22:	e002      	b.n	8007c2a <USBH_HandleEnum+0x3b6>
      break;
 8007c24:	bf00      	nop
 8007c26:	e000      	b.n	8007c2a <USBH_HandleEnum+0x3b6>
      break;
 8007c28:	bf00      	nop
  }
  return Status;
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b082      	sub	sp, #8
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f804 	bl	8007c76 <USBH_HandleSof>
}
 8007c6e:	bf00      	nop
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b082      	sub	sp, #8
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b0b      	cmp	r3, #11
 8007c86:	d10a      	bne.n	8007c9e <USBH_HandleSof+0x28>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d005      	beq.n	8007c9e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	4798      	blx	r3
  }
}
 8007c9e:	bf00      	nop
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b083      	sub	sp, #12
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8007cb6:	bf00      	nop
}
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b083      	sub	sp, #12
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8007cda:	bf00      	nop
}
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f001 f8c0 	bl	8008eba <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	791b      	ldrb	r3, [r3, #4]
 8007d3e:	4619      	mov	r1, r3
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 ff0d 	bl	8008b60 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	795b      	ldrb	r3, [r3, #5]
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 ff07 	bl	8008b60 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af02      	add	r7, sp, #8
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007d68:	887b      	ldrh	r3, [r7, #2]
 8007d6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d6e:	d901      	bls.n	8007d74 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e01b      	b.n	8007dac <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007d7a:	887b      	ldrh	r3, [r7, #2]
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d84:	2100      	movs	r1, #0
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f872 	bl	8007e70 <USBH_GetDescriptor>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d109      	bne.n	8007daa <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007d9c:	887a      	ldrh	r2, [r7, #2]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f929 	bl	8007ff8 <USBH_ParseDevDesc>
 8007da6:	4603      	mov	r3, r0
 8007da8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af02      	add	r7, sp, #8
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	331c      	adds	r3, #28
 8007dc4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007dc6:	887b      	ldrh	r3, [r7, #2]
 8007dc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dcc:	d901      	bls.n	8007dd2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e016      	b.n	8007e00 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007dd2:	887b      	ldrh	r3, [r7, #2]
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ddc:	2100      	movs	r1, #0
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f846 	bl	8007e70 <USBH_GetDescriptor>
 8007de4:	4603      	mov	r3, r0
 8007de6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007de8:	7bfb      	ldrb	r3, [r7, #15]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d107      	bne.n	8007dfe <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007dee:	887b      	ldrh	r3, [r7, #2]
 8007df0:	461a      	mov	r2, r3
 8007df2:	68b9      	ldr	r1, [r7, #8]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f9af 	bl	8008158 <USBH_ParseCfgDesc>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b088      	sub	sp, #32
 8007e0c:	af02      	add	r7, sp, #8
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	607a      	str	r2, [r7, #4]
 8007e12:	461a      	mov	r2, r3
 8007e14:	460b      	mov	r3, r1
 8007e16:	72fb      	strb	r3, [r7, #11]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007e1c:	893b      	ldrh	r3, [r7, #8]
 8007e1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e22:	d802      	bhi.n	8007e2a <USBH_Get_StringDesc+0x22>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e01c      	b.n	8007e68 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007e2e:	7afb      	ldrb	r3, [r7, #11]
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007e36:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007e3e:	893b      	ldrh	r3, [r7, #8]
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	460b      	mov	r3, r1
 8007e44:	2100      	movs	r1, #0
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f000 f812 	bl	8007e70 <USBH_GetDescriptor>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007e50:	7dfb      	ldrb	r3, [r7, #23]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d107      	bne.n	8007e66 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007e5c:	893a      	ldrh	r2, [r7, #8]
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 fb8c 	bl	800857e <USBH_ParseStringDesc>
  }

  return status;
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	607b      	str	r3, [r7, #4]
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	72fb      	strb	r3, [r7, #11]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	789b      	ldrb	r3, [r3, #2]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d11c      	bne.n	8007ec4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007e8a:	7afb      	ldrb	r3, [r7, #11]
 8007e8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2206      	movs	r2, #6
 8007e9a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	893a      	ldrh	r2, [r7, #8]
 8007ea0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007ea2:	893b      	ldrh	r3, [r7, #8]
 8007ea4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007ea8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007eac:	d104      	bne.n	8007eb8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f240 4209 	movw	r2, #1033	@ 0x409
 8007eb4:	829a      	strh	r2, [r3, #20]
 8007eb6:	e002      	b.n	8007ebe <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	8b3a      	ldrh	r2, [r7, #24]
 8007ec2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007ec4:	8b3b      	ldrh	r3, [r7, #24]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	6879      	ldr	r1, [r7, #4]
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f000 fba4 	bl	8008618 <USBH_CtlReq>
 8007ed0:	4603      	mov	r3, r0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b082      	sub	sp, #8
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	789b      	ldrb	r3, [r3, #2]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d10f      	bne.n	8007f0e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2205      	movs	r2, #5
 8007ef8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007efa:	78fb      	ldrb	r3, [r7, #3]
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f0e:	2200      	movs	r2, #0
 8007f10:	2100      	movs	r1, #0
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fb80 	bl	8008618 <USBH_CtlReq>
 8007f18:	4603      	mov	r3, r0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b082      	sub	sp, #8
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	789b      	ldrb	r3, [r3, #2]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d10e      	bne.n	8007f54 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2209      	movs	r2, #9
 8007f40:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	887a      	ldrh	r2, [r7, #2]
 8007f46:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f54:	2200      	movs	r2, #0
 8007f56:	2100      	movs	r1, #0
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fb5d 	bl	8008618 <USBH_CtlReq>
 8007f5e:	4603      	mov	r3, r0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	789b      	ldrb	r3, [r3, #2]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d10f      	bne.n	8007f9c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2203      	movs	r2, #3
 8007f86:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007f88:	78fb      	ldrb	r3, [r7, #3]
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fb39 	bl	8008618 <USBH_CtlReq>
 8007fa6:	4603      	mov	r3, r0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	789b      	ldrb	r3, [r3, #2]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d10f      	bne.n	8007fe4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007fd6:	78fb      	ldrb	r3, [r7, #3]
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fb15 	bl	8008618 <USBH_CtlReq>
 8007fee:	4603      	mov	r3, r0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b087      	sub	sp, #28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	4613      	mov	r3, r2
 8008004:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800800c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800800e:	2300      	movs	r3, #0
 8008010:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008018:	2302      	movs	r3, #2
 800801a:	e094      	b.n	8008146 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	781a      	ldrb	r2, [r3, #0]
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	785a      	ldrb	r2, [r3, #1]
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	3302      	adds	r3, #2
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	461a      	mov	r2, r3
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	3303      	adds	r3, #3
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	021b      	lsls	r3, r3, #8
 800803c:	b29b      	uxth	r3, r3
 800803e:	4313      	orrs	r3, r2
 8008040:	b29a      	uxth	r2, r3
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	791a      	ldrb	r2, [r3, #4]
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	795a      	ldrb	r2, [r3, #5]
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	799a      	ldrb	r2, [r3, #6]
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	79da      	ldrb	r2, [r3, #7]
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800806c:	2b00      	cmp	r3, #0
 800806e:	d004      	beq.n	800807a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008076:	2b01      	cmp	r3, #1
 8008078:	d11b      	bne.n	80080b2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	79db      	ldrb	r3, [r3, #7]
 800807e:	2b20      	cmp	r3, #32
 8008080:	dc0f      	bgt.n	80080a2 <USBH_ParseDevDesc+0xaa>
 8008082:	2b08      	cmp	r3, #8
 8008084:	db0f      	blt.n	80080a6 <USBH_ParseDevDesc+0xae>
 8008086:	3b08      	subs	r3, #8
 8008088:	4a32      	ldr	r2, [pc, #200]	@ (8008154 <USBH_ParseDevDesc+0x15c>)
 800808a:	fa22 f303 	lsr.w	r3, r2, r3
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	2b00      	cmp	r3, #0
 8008094:	bf14      	ite	ne
 8008096:	2301      	movne	r3, #1
 8008098:	2300      	moveq	r3, #0
 800809a:	b2db      	uxtb	r3, r3
 800809c:	2b00      	cmp	r3, #0
 800809e:	d106      	bne.n	80080ae <USBH_ParseDevDesc+0xb6>
 80080a0:	e001      	b.n	80080a6 <USBH_ParseDevDesc+0xae>
 80080a2:	2b40      	cmp	r3, #64	@ 0x40
 80080a4:	d003      	beq.n	80080ae <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	2208      	movs	r2, #8
 80080aa:	71da      	strb	r2, [r3, #7]
        break;
 80080ac:	e000      	b.n	80080b0 <USBH_ParseDevDesc+0xb8>
        break;
 80080ae:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80080b0:	e00e      	b.n	80080d0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d107      	bne.n	80080cc <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	79db      	ldrb	r3, [r3, #7]
 80080c0:	2b08      	cmp	r3, #8
 80080c2:	d005      	beq.n	80080d0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	2208      	movs	r2, #8
 80080c8:	71da      	strb	r2, [r3, #7]
 80080ca:	e001      	b.n	80080d0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80080cc:	2303      	movs	r3, #3
 80080ce:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80080d0:	88fb      	ldrh	r3, [r7, #6]
 80080d2:	2b08      	cmp	r3, #8
 80080d4:	d936      	bls.n	8008144 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	3308      	adds	r3, #8
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	461a      	mov	r2, r3
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	3309      	adds	r3, #9
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	021b      	lsls	r3, r3, #8
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	4313      	orrs	r3, r2
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	330a      	adds	r3, #10
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	330b      	adds	r3, #11
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	021b      	lsls	r3, r3, #8
 8008100:	b29b      	uxth	r3, r3
 8008102:	4313      	orrs	r3, r2
 8008104:	b29a      	uxth	r2, r3
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	330c      	adds	r3, #12
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	461a      	mov	r2, r3
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	330d      	adds	r3, #13
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	021b      	lsls	r3, r3, #8
 800811a:	b29b      	uxth	r3, r3
 800811c:	4313      	orrs	r3, r2
 800811e:	b29a      	uxth	r2, r3
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	7b9a      	ldrb	r2, [r3, #14]
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	7bda      	ldrb	r2, [r3, #15]
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	7c1a      	ldrb	r2, [r3, #16]
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	7c5a      	ldrb	r2, [r3, #17]
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008144:	7dfb      	ldrb	r3, [r7, #23]
}
 8008146:	4618      	mov	r0, r3
 8008148:	371c      	adds	r7, #28
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	01000101 	.word	0x01000101

08008158 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b08c      	sub	sp, #48	@ 0x30
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	4613      	mov	r3, r2
 8008164:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800816c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008174:	2300      	movs	r3, #0
 8008176:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800817a:	2300      	movs	r3, #0
 800817c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d101      	bne.n	800818a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008186:	2302      	movs	r3, #2
 8008188:	e0de      	b.n	8008348 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800818e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	2b09      	cmp	r3, #9
 8008194:	d002      	beq.n	800819c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008198:	2209      	movs	r2, #9
 800819a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	781a      	ldrb	r2, [r3, #0]
 80081a0:	6a3b      	ldr	r3, [r7, #32]
 80081a2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	785a      	ldrb	r2, [r3, #1]
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	3302      	adds	r3, #2
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	3303      	adds	r3, #3
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	021b      	lsls	r3, r3, #8
 80081bc:	b29b      	uxth	r3, r3
 80081be:	4313      	orrs	r3, r2
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081c6:	bf28      	it	cs
 80081c8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	6a3b      	ldr	r3, [r7, #32]
 80081d0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	791a      	ldrb	r2, [r3, #4]
 80081d6:	6a3b      	ldr	r3, [r7, #32]
 80081d8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	795a      	ldrb	r2, [r3, #5]
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	799a      	ldrb	r2, [r3, #6]
 80081e6:	6a3b      	ldr	r3, [r7, #32]
 80081e8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	79da      	ldrb	r2, [r3, #7]
 80081ee:	6a3b      	ldr	r3, [r7, #32]
 80081f0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	7a1a      	ldrb	r2, [r3, #8]
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80081fa:	88fb      	ldrh	r3, [r7, #6]
 80081fc:	2b09      	cmp	r3, #9
 80081fe:	f240 80a1 	bls.w	8008344 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 8008202:	2309      	movs	r3, #9
 8008204:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008206:	2300      	movs	r3, #0
 8008208:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800820a:	e085      	b.n	8008318 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800820c:	f107 0316 	add.w	r3, r7, #22
 8008210:	4619      	mov	r1, r3
 8008212:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008214:	f000 f9e6 	bl	80085e4 <USBH_GetNextDesc>
 8008218:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800821a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821c:	785b      	ldrb	r3, [r3, #1]
 800821e:	2b04      	cmp	r3, #4
 8008220:	d17a      	bne.n	8008318 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	2b09      	cmp	r3, #9
 8008228:	d002      	beq.n	8008230 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800822a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800822c:	2209      	movs	r2, #9
 800822e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008230:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008234:	221a      	movs	r2, #26
 8008236:	fb02 f303 	mul.w	r3, r2, r3
 800823a:	3308      	adds	r3, #8
 800823c:	6a3a      	ldr	r2, [r7, #32]
 800823e:	4413      	add	r3, r2
 8008240:	3302      	adds	r3, #2
 8008242:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008244:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008246:	69f8      	ldr	r0, [r7, #28]
 8008248:	f000 f882 	bl	8008350 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800824c:	2300      	movs	r3, #0
 800824e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008252:	2300      	movs	r3, #0
 8008254:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008256:	e043      	b.n	80082e0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008258:	f107 0316 	add.w	r3, r7, #22
 800825c:	4619      	mov	r1, r3
 800825e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008260:	f000 f9c0 	bl	80085e4 <USBH_GetNextDesc>
 8008264:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008268:	785b      	ldrb	r3, [r3, #1]
 800826a:	2b05      	cmp	r3, #5
 800826c:	d138      	bne.n	80082e0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	795b      	ldrb	r3, [r3, #5]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d113      	bne.n	800829e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800827a:	2b02      	cmp	r3, #2
 800827c:	d003      	beq.n	8008286 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	799b      	ldrb	r3, [r3, #6]
 8008282:	2b03      	cmp	r3, #3
 8008284:	d10b      	bne.n	800829e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	79db      	ldrb	r3, [r3, #7]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10b      	bne.n	80082a6 <USBH_ParseCfgDesc+0x14e>
 800828e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	2b09      	cmp	r3, #9
 8008294:	d007      	beq.n	80082a6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008298:	2209      	movs	r2, #9
 800829a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800829c:	e003      	b.n	80082a6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800829e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a0:	2207      	movs	r2, #7
 80082a2:	701a      	strb	r2, [r3, #0]
 80082a4:	e000      	b.n	80082a8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80082a6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80082a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082ac:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80082b0:	3201      	adds	r2, #1
 80082b2:	00d2      	lsls	r2, r2, #3
 80082b4:	211a      	movs	r1, #26
 80082b6:	fb01 f303 	mul.w	r3, r1, r3
 80082ba:	4413      	add	r3, r2
 80082bc:	3308      	adds	r3, #8
 80082be:	6a3a      	ldr	r2, [r7, #32]
 80082c0:	4413      	add	r3, r2
 80082c2:	3304      	adds	r3, #4
 80082c4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80082c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082c8:	69b9      	ldr	r1, [r7, #24]
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f000 f86f 	bl	80083ae <USBH_ParseEPDesc>
 80082d0:	4603      	mov	r3, r0
 80082d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80082d6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80082da:	3301      	adds	r3, #1
 80082dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80082e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d80a      	bhi.n	80082fe <USBH_ParseCfgDesc+0x1a6>
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	791b      	ldrb	r3, [r3, #4]
 80082ec:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d204      	bcs.n	80082fe <USBH_ParseCfgDesc+0x1a6>
 80082f4:	6a3b      	ldr	r3, [r7, #32]
 80082f6:	885a      	ldrh	r2, [r3, #2]
 80082f8:	8afb      	ldrh	r3, [r7, #22]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d8ac      	bhi.n	8008258 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	791b      	ldrb	r3, [r3, #4]
 8008302:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008306:	429a      	cmp	r2, r3
 8008308:	d201      	bcs.n	800830e <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800830a:	2303      	movs	r3, #3
 800830c:	e01c      	b.n	8008348 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800830e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008312:	3301      	adds	r3, #1
 8008314:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008318:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800831c:	2b01      	cmp	r3, #1
 800831e:	d805      	bhi.n	800832c <USBH_ParseCfgDesc+0x1d4>
 8008320:	6a3b      	ldr	r3, [r7, #32]
 8008322:	885a      	ldrh	r2, [r3, #2]
 8008324:	8afb      	ldrh	r3, [r7, #22]
 8008326:	429a      	cmp	r2, r3
 8008328:	f63f af70 	bhi.w	800820c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	791b      	ldrb	r3, [r3, #4]
 8008330:	2b02      	cmp	r3, #2
 8008332:	bf28      	it	cs
 8008334:	2302      	movcs	r3, #2
 8008336:	b2db      	uxtb	r3, r3
 8008338:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800833c:	429a      	cmp	r2, r3
 800833e:	d201      	bcs.n	8008344 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 8008340:	2303      	movs	r3, #3
 8008342:	e001      	b.n	8008348 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8008344:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008348:	4618      	mov	r0, r3
 800834a:	3730      	adds	r7, #48	@ 0x30
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	781a      	ldrb	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	785a      	ldrb	r2, [r3, #1]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	789a      	ldrb	r2, [r3, #2]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	78da      	ldrb	r2, [r3, #3]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	791a      	ldrb	r2, [r3, #4]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	795a      	ldrb	r2, [r3, #5]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	799a      	ldrb	r2, [r3, #6]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	79da      	ldrb	r2, [r3, #7]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	7a1a      	ldrb	r2, [r3, #8]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	721a      	strb	r2, [r3, #8]
}
 80083a2:	bf00      	nop
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b087      	sub	sp, #28
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	60f8      	str	r0, [r7, #12]
 80083b6:	60b9      	str	r1, [r7, #8]
 80083b8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80083ba:	2300      	movs	r3, #0
 80083bc:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	781a      	ldrb	r2, [r3, #0]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	785a      	ldrb	r2, [r3, #1]
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	789a      	ldrb	r2, [r3, #2]
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	78da      	ldrb	r2, [r3, #3]
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	3304      	adds	r3, #4
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	461a      	mov	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	3305      	adds	r3, #5
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	021b      	lsls	r3, r3, #8
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	4313      	orrs	r3, r2
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	799a      	ldrb	r2, [r3, #6]
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	889b      	ldrh	r3, [r3, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d009      	beq.n	800841c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800840c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008410:	d804      	bhi.n	800841c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008416:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800841a:	d901      	bls.n	8008420 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800841c:	2303      	movs	r3, #3
 800841e:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008426:	2b00      	cmp	r3, #0
 8008428:	d136      	bne.n	8008498 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	78db      	ldrb	r3, [r3, #3]
 800842e:	f003 0303 	and.w	r3, r3, #3
 8008432:	2b02      	cmp	r3, #2
 8008434:	d108      	bne.n	8008448 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	889b      	ldrh	r3, [r3, #4]
 800843a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800843e:	f240 8097 	bls.w	8008570 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008442:	2303      	movs	r3, #3
 8008444:	75fb      	strb	r3, [r7, #23]
 8008446:	e093      	b.n	8008570 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	78db      	ldrb	r3, [r3, #3]
 800844c:	f003 0303 	and.w	r3, r3, #3
 8008450:	2b00      	cmp	r3, #0
 8008452:	d107      	bne.n	8008464 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	889b      	ldrh	r3, [r3, #4]
 8008458:	2b40      	cmp	r3, #64	@ 0x40
 800845a:	f240 8089 	bls.w	8008570 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800845e:	2303      	movs	r3, #3
 8008460:	75fb      	strb	r3, [r7, #23]
 8008462:	e085      	b.n	8008570 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	78db      	ldrb	r3, [r3, #3]
 8008468:	f003 0303 	and.w	r3, r3, #3
 800846c:	2b01      	cmp	r3, #1
 800846e:	d005      	beq.n	800847c <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	78db      	ldrb	r3, [r3, #3]
 8008474:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008478:	2b03      	cmp	r3, #3
 800847a:	d10a      	bne.n	8008492 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	799b      	ldrb	r3, [r3, #6]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d003      	beq.n	800848c <USBH_ParseEPDesc+0xde>
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	799b      	ldrb	r3, [r3, #6]
 8008488:	2b10      	cmp	r3, #16
 800848a:	d970      	bls.n	800856e <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800848c:	2303      	movs	r3, #3
 800848e:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008490:	e06d      	b.n	800856e <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008492:	2303      	movs	r3, #3
 8008494:	75fb      	strb	r3, [r7, #23]
 8008496:	e06b      	b.n	8008570 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d13c      	bne.n	800851c <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	78db      	ldrb	r3, [r3, #3]
 80084a6:	f003 0303 	and.w	r3, r3, #3
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d005      	beq.n	80084ba <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	78db      	ldrb	r3, [r3, #3]
 80084b2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d106      	bne.n	80084c8 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	889b      	ldrh	r3, [r3, #4]
 80084be:	2b40      	cmp	r3, #64	@ 0x40
 80084c0:	d956      	bls.n	8008570 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80084c2:	2303      	movs	r3, #3
 80084c4:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80084c6:	e053      	b.n	8008570 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	78db      	ldrb	r3, [r3, #3]
 80084cc:	f003 0303 	and.w	r3, r3, #3
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d10e      	bne.n	80084f2 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	799b      	ldrb	r3, [r3, #6]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d007      	beq.n	80084ec <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80084e0:	2b10      	cmp	r3, #16
 80084e2:	d803      	bhi.n	80084ec <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80084e8:	2b40      	cmp	r3, #64	@ 0x40
 80084ea:	d941      	bls.n	8008570 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80084ec:	2303      	movs	r3, #3
 80084ee:	75fb      	strb	r3, [r7, #23]
 80084f0:	e03e      	b.n	8008570 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	78db      	ldrb	r3, [r3, #3]
 80084f6:	f003 0303 	and.w	r3, r3, #3
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	d10b      	bne.n	8008516 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	799b      	ldrb	r3, [r3, #6]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d004      	beq.n	8008510 <USBH_ParseEPDesc+0x162>
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	889b      	ldrh	r3, [r3, #4]
 800850a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800850e:	d32f      	bcc.n	8008570 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008510:	2303      	movs	r3, #3
 8008512:	75fb      	strb	r3, [r7, #23]
 8008514:	e02c      	b.n	8008570 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008516:	2303      	movs	r3, #3
 8008518:	75fb      	strb	r3, [r7, #23]
 800851a:	e029      	b.n	8008570 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008522:	2b02      	cmp	r3, #2
 8008524:	d120      	bne.n	8008568 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	78db      	ldrb	r3, [r3, #3]
 800852a:	f003 0303 	and.w	r3, r3, #3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d106      	bne.n	8008540 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	889b      	ldrh	r3, [r3, #4]
 8008536:	2b08      	cmp	r3, #8
 8008538:	d01a      	beq.n	8008570 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800853a:	2303      	movs	r3, #3
 800853c:	75fb      	strb	r3, [r7, #23]
 800853e:	e017      	b.n	8008570 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	78db      	ldrb	r3, [r3, #3]
 8008544:	f003 0303 	and.w	r3, r3, #3
 8008548:	2b03      	cmp	r3, #3
 800854a:	d10a      	bne.n	8008562 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	799b      	ldrb	r3, [r3, #6]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d003      	beq.n	800855c <USBH_ParseEPDesc+0x1ae>
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	889b      	ldrh	r3, [r3, #4]
 8008558:	2b08      	cmp	r3, #8
 800855a:	d909      	bls.n	8008570 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800855c:	2303      	movs	r3, #3
 800855e:	75fb      	strb	r3, [r7, #23]
 8008560:	e006      	b.n	8008570 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008562:	2303      	movs	r3, #3
 8008564:	75fb      	strb	r3, [r7, #23]
 8008566:	e003      	b.n	8008570 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008568:	2303      	movs	r3, #3
 800856a:	75fb      	strb	r3, [r7, #23]
 800856c:	e000      	b.n	8008570 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800856e:	bf00      	nop
  }

  return status;
 8008570:	7dfb      	ldrb	r3, [r7, #23]
}
 8008572:	4618      	mov	r0, r3
 8008574:	371c      	adds	r7, #28
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800857e:	b480      	push	{r7}
 8008580:	b087      	sub	sp, #28
 8008582:	af00      	add	r7, sp, #0
 8008584:	60f8      	str	r0, [r7, #12]
 8008586:	60b9      	str	r1, [r7, #8]
 8008588:	4613      	mov	r3, r2
 800858a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	3301      	adds	r3, #1
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	2b03      	cmp	r3, #3
 8008594:	d120      	bne.n	80085d8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	1e9a      	subs	r2, r3, #2
 800859c:	88fb      	ldrh	r3, [r7, #6]
 800859e:	4293      	cmp	r3, r2
 80085a0:	bf28      	it	cs
 80085a2:	4613      	movcs	r3, r2
 80085a4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	3302      	adds	r3, #2
 80085aa:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80085ac:	2300      	movs	r3, #0
 80085ae:	82fb      	strh	r3, [r7, #22]
 80085b0:	e00b      	b.n	80085ca <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80085b2:	8afb      	ldrh	r3, [r7, #22]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	4413      	add	r3, r2
 80085b8:	781a      	ldrb	r2, [r3, #0]
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	701a      	strb	r2, [r3, #0]
      pdest++;
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	3301      	adds	r3, #1
 80085c2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80085c4:	8afb      	ldrh	r3, [r7, #22]
 80085c6:	3302      	adds	r3, #2
 80085c8:	82fb      	strh	r3, [r7, #22]
 80085ca:	8afa      	ldrh	r2, [r7, #22]
 80085cc:	8abb      	ldrh	r3, [r7, #20]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d3ef      	bcc.n	80085b2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	2200      	movs	r2, #0
 80085d6:	701a      	strb	r2, [r3, #0]
  }
}
 80085d8:	bf00      	nop
 80085da:	371c      	adds	r7, #28
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	881b      	ldrh	r3, [r3, #0]
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	7812      	ldrb	r2, [r2, #0]
 80085f6:	4413      	add	r3, r2
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4413      	add	r3, r2
 8008608:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800860a:	68fb      	ldr	r3, [r7, #12]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	4613      	mov	r3, r2
 8008624:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008626:	2301      	movs	r3, #1
 8008628:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	789b      	ldrb	r3, [r3, #2]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d002      	beq.n	8008638 <USBH_CtlReq+0x20>
 8008632:	2b02      	cmp	r3, #2
 8008634:	d00f      	beq.n	8008656 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8008636:	e027      	b.n	8008688 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	88fa      	ldrh	r2, [r7, #6]
 8008642:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2201      	movs	r2, #1
 8008648:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2202      	movs	r2, #2
 800864e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008650:	2301      	movs	r3, #1
 8008652:	75fb      	strb	r3, [r7, #23]
      break;
 8008654:	e018      	b.n	8008688 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f000 f81c 	bl	8008694 <USBH_HandleControl>
 800865c:	4603      	mov	r3, r0
 800865e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008660:	7dfb      	ldrb	r3, [r7, #23]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d002      	beq.n	800866c <USBH_CtlReq+0x54>
 8008666:	7dfb      	ldrb	r3, [r7, #23]
 8008668:	2b03      	cmp	r3, #3
 800866a:	d106      	bne.n	800867a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2201      	movs	r2, #1
 8008670:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	761a      	strb	r2, [r3, #24]
      break;
 8008678:	e005      	b.n	8008686 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800867a:	7dfb      	ldrb	r3, [r7, #23]
 800867c:	2b02      	cmp	r3, #2
 800867e:	d102      	bne.n	8008686 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2201      	movs	r2, #1
 8008684:	709a      	strb	r2, [r3, #2]
      break;
 8008686:	bf00      	nop
  }
  return status;
 8008688:	7dfb      	ldrb	r3, [r7, #23]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3718      	adds	r7, #24
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
	...

08008694 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b086      	sub	sp, #24
 8008698:	af02      	add	r7, sp, #8
 800869a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800869c:	2301      	movs	r3, #1
 800869e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80086a0:	2300      	movs	r3, #0
 80086a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	7e1b      	ldrb	r3, [r3, #24]
 80086a8:	3b01      	subs	r3, #1
 80086aa:	2b0a      	cmp	r3, #10
 80086ac:	f200 8157 	bhi.w	800895e <USBH_HandleControl+0x2ca>
 80086b0:	a201      	add	r2, pc, #4	@ (adr r2, 80086b8 <USBH_HandleControl+0x24>)
 80086b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b6:	bf00      	nop
 80086b8:	080086e5 	.word	0x080086e5
 80086bc:	080086ff 	.word	0x080086ff
 80086c0:	08008769 	.word	0x08008769
 80086c4:	0800878f 	.word	0x0800878f
 80086c8:	080087c9 	.word	0x080087c9
 80086cc:	080087f3 	.word	0x080087f3
 80086d0:	08008845 	.word	0x08008845
 80086d4:	08008867 	.word	0x08008867
 80086d8:	080088a3 	.word	0x080088a3
 80086dc:	080088c9 	.word	0x080088c9
 80086e0:	08008907 	.word	0x08008907
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f103 0110 	add.w	r1, r3, #16
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	795b      	ldrb	r3, [r3, #5]
 80086ee:	461a      	mov	r2, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f945 	bl	8008980 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2202      	movs	r2, #2
 80086fa:	761a      	strb	r2, [r3, #24]
      break;
 80086fc:	e13a      	b.n	8008974 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	795b      	ldrb	r3, [r3, #5]
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 fcb5 	bl	8009074 <USBH_LL_GetURBState>
 800870a:	4603      	mov	r3, r0
 800870c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800870e:	7bbb      	ldrb	r3, [r7, #14]
 8008710:	2b01      	cmp	r3, #1
 8008712:	d11e      	bne.n	8008752 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	7c1b      	ldrb	r3, [r3, #16]
 8008718:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800871c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	8adb      	ldrh	r3, [r3, #22]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00a      	beq.n	800873c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008726:	7b7b      	ldrb	r3, [r7, #13]
 8008728:	2b80      	cmp	r3, #128	@ 0x80
 800872a:	d103      	bne.n	8008734 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2203      	movs	r2, #3
 8008730:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008732:	e116      	b.n	8008962 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2205      	movs	r2, #5
 8008738:	761a      	strb	r2, [r3, #24]
      break;
 800873a:	e112      	b.n	8008962 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800873c:	7b7b      	ldrb	r3, [r7, #13]
 800873e:	2b80      	cmp	r3, #128	@ 0x80
 8008740:	d103      	bne.n	800874a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2209      	movs	r2, #9
 8008746:	761a      	strb	r2, [r3, #24]
      break;
 8008748:	e10b      	b.n	8008962 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2207      	movs	r2, #7
 800874e:	761a      	strb	r2, [r3, #24]
      break;
 8008750:	e107      	b.n	8008962 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008752:	7bbb      	ldrb	r3, [r7, #14]
 8008754:	2b04      	cmp	r3, #4
 8008756:	d003      	beq.n	8008760 <USBH_HandleControl+0xcc>
 8008758:	7bbb      	ldrb	r3, [r7, #14]
 800875a:	2b02      	cmp	r3, #2
 800875c:	f040 8101 	bne.w	8008962 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	220b      	movs	r2, #11
 8008764:	761a      	strb	r2, [r3, #24]
      break;
 8008766:	e0fc      	b.n	8008962 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800876e:	b29a      	uxth	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6899      	ldr	r1, [r3, #8]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	899a      	ldrh	r2, [r3, #12]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	791b      	ldrb	r3, [r3, #4]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f93c 	bl	80089fe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2204      	movs	r2, #4
 800878a:	761a      	strb	r2, [r3, #24]
      break;
 800878c:	e0f2      	b.n	8008974 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	791b      	ldrb	r3, [r3, #4]
 8008792:	4619      	mov	r1, r3
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fc6d 	bl	8009074 <USBH_LL_GetURBState>
 800879a:	4603      	mov	r3, r0
 800879c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800879e:	7bbb      	ldrb	r3, [r7, #14]
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d103      	bne.n	80087ac <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2209      	movs	r2, #9
 80087a8:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80087aa:	e0dc      	b.n	8008966 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 80087ac:	7bbb      	ldrb	r3, [r7, #14]
 80087ae:	2b05      	cmp	r3, #5
 80087b0:	d102      	bne.n	80087b8 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 80087b2:	2303      	movs	r3, #3
 80087b4:	73fb      	strb	r3, [r7, #15]
      break;
 80087b6:	e0d6      	b.n	8008966 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 80087b8:	7bbb      	ldrb	r3, [r7, #14]
 80087ba:	2b04      	cmp	r3, #4
 80087bc:	f040 80d3 	bne.w	8008966 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	220b      	movs	r2, #11
 80087c4:	761a      	strb	r2, [r3, #24]
      break;
 80087c6:	e0ce      	b.n	8008966 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6899      	ldr	r1, [r3, #8]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	899a      	ldrh	r2, [r3, #12]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	795b      	ldrb	r3, [r3, #5]
 80087d4:	2001      	movs	r0, #1
 80087d6:	9000      	str	r0, [sp, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f8eb 	bl	80089b4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2206      	movs	r2, #6
 80087ee:	761a      	strb	r2, [r3, #24]
      break;
 80087f0:	e0c0      	b.n	8008974 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	795b      	ldrb	r3, [r3, #5]
 80087f6:	4619      	mov	r1, r3
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 fc3b 	bl	8009074 <USBH_LL_GetURBState>
 80087fe:	4603      	mov	r3, r0
 8008800:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008802:	7bbb      	ldrb	r3, [r7, #14]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d103      	bne.n	8008810 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2207      	movs	r2, #7
 800880c:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800880e:	e0ac      	b.n	800896a <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 8008810:	7bbb      	ldrb	r3, [r7, #14]
 8008812:	2b05      	cmp	r3, #5
 8008814:	d105      	bne.n	8008822 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	220c      	movs	r2, #12
 800881a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800881c:	2303      	movs	r3, #3
 800881e:	73fb      	strb	r3, [r7, #15]
      break;
 8008820:	e0a3      	b.n	800896a <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008822:	7bbb      	ldrb	r3, [r7, #14]
 8008824:	2b02      	cmp	r3, #2
 8008826:	d103      	bne.n	8008830 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2205      	movs	r2, #5
 800882c:	761a      	strb	r2, [r3, #24]
      break;
 800882e:	e09c      	b.n	800896a <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 8008830:	7bbb      	ldrb	r3, [r7, #14]
 8008832:	2b04      	cmp	r3, #4
 8008834:	f040 8099 	bne.w	800896a <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	220b      	movs	r2, #11
 800883c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800883e:	2302      	movs	r3, #2
 8008840:	73fb      	strb	r3, [r7, #15]
      break;
 8008842:	e092      	b.n	800896a <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	791b      	ldrb	r3, [r3, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	2100      	movs	r1, #0
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f8d6 	bl	80089fe <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008858:	b29a      	uxth	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2208      	movs	r2, #8
 8008862:	761a      	strb	r2, [r3, #24]

      break;
 8008864:	e086      	b.n	8008974 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	791b      	ldrb	r3, [r3, #4]
 800886a:	4619      	mov	r1, r3
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 fc01 	bl	8009074 <USBH_LL_GetURBState>
 8008872:	4603      	mov	r3, r0
 8008874:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008876:	7bbb      	ldrb	r3, [r7, #14]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d105      	bne.n	8008888 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	220d      	movs	r2, #13
 8008880:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008886:	e072      	b.n	800896e <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 8008888:	7bbb      	ldrb	r3, [r7, #14]
 800888a:	2b04      	cmp	r3, #4
 800888c:	d103      	bne.n	8008896 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	220b      	movs	r2, #11
 8008892:	761a      	strb	r2, [r3, #24]
      break;
 8008894:	e06b      	b.n	800896e <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 8008896:	7bbb      	ldrb	r3, [r7, #14]
 8008898:	2b05      	cmp	r3, #5
 800889a:	d168      	bne.n	800896e <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800889c:	2303      	movs	r3, #3
 800889e:	73fb      	strb	r3, [r7, #15]
      break;
 80088a0:	e065      	b.n	800896e <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	795b      	ldrb	r3, [r3, #5]
 80088a6:	2201      	movs	r2, #1
 80088a8:	9200      	str	r2, [sp, #0]
 80088aa:	2200      	movs	r2, #0
 80088ac:	2100      	movs	r1, #0
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f880 	bl	80089b4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	220a      	movs	r2, #10
 80088c4:	761a      	strb	r2, [r3, #24]
      break;
 80088c6:	e055      	b.n	8008974 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	795b      	ldrb	r3, [r3, #5]
 80088cc:	4619      	mov	r1, r3
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fbd0 	bl	8009074 <USBH_LL_GetURBState>
 80088d4:	4603      	mov	r3, r0
 80088d6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d105      	bne.n	80088ea <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	220d      	movs	r2, #13
 80088e6:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80088e8:	e043      	b.n	8008972 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 80088ea:	7bbb      	ldrb	r3, [r7, #14]
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d103      	bne.n	80088f8 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2209      	movs	r2, #9
 80088f4:	761a      	strb	r2, [r3, #24]
      break;
 80088f6:	e03c      	b.n	8008972 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 80088f8:	7bbb      	ldrb	r3, [r7, #14]
 80088fa:	2b04      	cmp	r3, #4
 80088fc:	d139      	bne.n	8008972 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	220b      	movs	r2, #11
 8008902:	761a      	strb	r2, [r3, #24]
      break;
 8008904:	e035      	b.n	8008972 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	7e5b      	ldrb	r3, [r3, #25]
 800890a:	3301      	adds	r3, #1
 800890c:	b2da      	uxtb	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	765a      	strb	r2, [r3, #25]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	7e5b      	ldrb	r3, [r3, #25]
 8008916:	2b02      	cmp	r3, #2
 8008918:	d806      	bhi.n	8008928 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008926:	e025      	b.n	8008974 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800892e:	2106      	movs	r1, #6
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	795b      	ldrb	r3, [r3, #5]
 800893e:	4619      	mov	r1, r3
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 f90d 	bl	8008b60 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	791b      	ldrb	r3, [r3, #4]
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f907 	bl	8008b60 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008958:	2302      	movs	r3, #2
 800895a:	73fb      	strb	r3, [r7, #15]
      break;
 800895c:	e00a      	b.n	8008974 <USBH_HandleControl+0x2e0>

    default:
      break;
 800895e:	bf00      	nop
 8008960:	e008      	b.n	8008974 <USBH_HandleControl+0x2e0>
      break;
 8008962:	bf00      	nop
 8008964:	e006      	b.n	8008974 <USBH_HandleControl+0x2e0>
      break;
 8008966:	bf00      	nop
 8008968:	e004      	b.n	8008974 <USBH_HandleControl+0x2e0>
      break;
 800896a:	bf00      	nop
 800896c:	e002      	b.n	8008974 <USBH_HandleControl+0x2e0>
      break;
 800896e:	bf00      	nop
 8008970:	e000      	b.n	8008974 <USBH_HandleControl+0x2e0>
      break;
 8008972:	bf00      	nop
  }

  return status;
 8008974:	7bfb      	ldrb	r3, [r7, #15]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop

08008980 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b088      	sub	sp, #32
 8008984:	af04      	add	r7, sp, #16
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	4613      	mov	r3, r2
 800898c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800898e:	79f9      	ldrb	r1, [r7, #7]
 8008990:	2300      	movs	r3, #0
 8008992:	9303      	str	r3, [sp, #12]
 8008994:	2308      	movs	r3, #8
 8008996:	9302      	str	r3, [sp, #8]
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	9301      	str	r3, [sp, #4]
 800899c:	2300      	movs	r3, #0
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	2300      	movs	r3, #0
 80089a2:	2200      	movs	r2, #0
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 fb34 	bl	8009012 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b088      	sub	sp, #32
 80089b8:	af04      	add	r7, sp, #16
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	4611      	mov	r1, r2
 80089c0:	461a      	mov	r2, r3
 80089c2:	460b      	mov	r3, r1
 80089c4:	80fb      	strh	r3, [r7, #6]
 80089c6:	4613      	mov	r3, r2
 80089c8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80089d4:	2300      	movs	r3, #0
 80089d6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089d8:	7979      	ldrb	r1, [r7, #5]
 80089da:	7e3b      	ldrb	r3, [r7, #24]
 80089dc:	9303      	str	r3, [sp, #12]
 80089de:	88fb      	ldrh	r3, [r7, #6]
 80089e0:	9302      	str	r3, [sp, #8]
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	9301      	str	r3, [sp, #4]
 80089e6:	2301      	movs	r3, #1
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	2300      	movs	r3, #0
 80089ec:	2200      	movs	r2, #0
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f000 fb0f 	bl	8009012 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b088      	sub	sp, #32
 8008a02:	af04      	add	r7, sp, #16
 8008a04:	60f8      	str	r0, [r7, #12]
 8008a06:	60b9      	str	r1, [r7, #8]
 8008a08:	4611      	mov	r1, r2
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	80fb      	strh	r3, [r7, #6]
 8008a10:	4613      	mov	r3, r2
 8008a12:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a14:	7979      	ldrb	r1, [r7, #5]
 8008a16:	2300      	movs	r3, #0
 8008a18:	9303      	str	r3, [sp, #12]
 8008a1a:	88fb      	ldrh	r3, [r7, #6]
 8008a1c:	9302      	str	r3, [sp, #8]
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	9301      	str	r3, [sp, #4]
 8008a22:	2301      	movs	r3, #1
 8008a24:	9300      	str	r3, [sp, #0]
 8008a26:	2300      	movs	r3, #0
 8008a28:	2201      	movs	r2, #1
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f000 faf1 	bl	8009012 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008a30:	2300      	movs	r3, #0

}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b088      	sub	sp, #32
 8008a3e:	af04      	add	r7, sp, #16
 8008a40:	60f8      	str	r0, [r7, #12]
 8008a42:	60b9      	str	r1, [r7, #8]
 8008a44:	4611      	mov	r1, r2
 8008a46:	461a      	mov	r2, r3
 8008a48:	460b      	mov	r3, r1
 8008a4a:	80fb      	strh	r3, [r7, #6]
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d001      	beq.n	8008a5e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a5e:	7979      	ldrb	r1, [r7, #5]
 8008a60:	7e3b      	ldrb	r3, [r7, #24]
 8008a62:	9303      	str	r3, [sp, #12]
 8008a64:	88fb      	ldrh	r3, [r7, #6]
 8008a66:	9302      	str	r3, [sp, #8]
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	9301      	str	r3, [sp, #4]
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	9300      	str	r3, [sp, #0]
 8008a70:	2302      	movs	r3, #2
 8008a72:	2200      	movs	r2, #0
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f000 facc 	bl	8009012 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af04      	add	r7, sp, #16
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	4611      	mov	r1, r2
 8008a90:	461a      	mov	r2, r3
 8008a92:	460b      	mov	r3, r1
 8008a94:	80fb      	strh	r3, [r7, #6]
 8008a96:	4613      	mov	r3, r2
 8008a98:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a9a:	7979      	ldrb	r1, [r7, #5]
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	9303      	str	r3, [sp, #12]
 8008aa0:	88fb      	ldrh	r3, [r7, #6]
 8008aa2:	9302      	str	r3, [sp, #8]
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	9301      	str	r3, [sp, #4]
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	2302      	movs	r3, #2
 8008aae:	2201      	movs	r2, #1
 8008ab0:	68f8      	ldr	r0, [r7, #12]
 8008ab2:	f000 faae 	bl	8009012 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b086      	sub	sp, #24
 8008ac4:	af04      	add	r7, sp, #16
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	4608      	mov	r0, r1
 8008aca:	4611      	mov	r1, r2
 8008acc:	461a      	mov	r2, r3
 8008ace:	4603      	mov	r3, r0
 8008ad0:	70fb      	strb	r3, [r7, #3]
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	70bb      	strb	r3, [r7, #2]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008ada:	7878      	ldrb	r0, [r7, #1]
 8008adc:	78ba      	ldrb	r2, [r7, #2]
 8008ade:	78f9      	ldrb	r1, [r7, #3]
 8008ae0:	8b3b      	ldrh	r3, [r7, #24]
 8008ae2:	9302      	str	r3, [sp, #8]
 8008ae4:	7d3b      	ldrb	r3, [r7, #20]
 8008ae6:	9301      	str	r3, [sp, #4]
 8008ae8:	7c3b      	ldrb	r3, [r7, #16]
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	4603      	mov	r3, r0
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fa53 	bl	8008f9a <USBH_LL_OpenPipe>

  return USBH_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b082      	sub	sp, #8
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	460b      	mov	r3, r1
 8008b08:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008b0a:	78fb      	ldrb	r3, [r7, #3]
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fa72 	bl	8008ff8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b084      	sub	sp, #16
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
 8008b26:	460b      	mov	r3, r1
 8008b28:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 f836 	bl	8008b9c <USBH_GetFreePipe>
 8008b30:	4603      	mov	r3, r0
 8008b32:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008b34:	89fb      	ldrh	r3, [r7, #14]
 8008b36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d00a      	beq.n	8008b54 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008b3e:	78fa      	ldrb	r2, [r7, #3]
 8008b40:	89fb      	ldrh	r3, [r7, #14]
 8008b42:	f003 030f 	and.w	r3, r3, #15
 8008b46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b4a:	6879      	ldr	r1, [r7, #4]
 8008b4c:	33e0      	adds	r3, #224	@ 0xe0
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	440b      	add	r3, r1
 8008b52:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008b54:	89fb      	ldrh	r3, [r7, #14]
 8008b56:	b2db      	uxtb	r3, r3
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008b6c:	78fb      	ldrb	r3, [r7, #3]
 8008b6e:	2b0f      	cmp	r3, #15
 8008b70:	d80d      	bhi.n	8008b8e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008b72:	78fb      	ldrb	r3, [r7, #3]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	33e0      	adds	r3, #224	@ 0xe0
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	685a      	ldr	r2, [r3, #4]
 8008b7e:	78fb      	ldrb	r3, [r7, #3]
 8008b80:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008b84:	6879      	ldr	r1, [r7, #4]
 8008b86:	33e0      	adds	r3, #224	@ 0xe0
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	440b      	add	r3, r1
 8008b8c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008ba8:	2300      	movs	r3, #0
 8008baa:	73fb      	strb	r3, [r7, #15]
 8008bac:	e00f      	b.n	8008bce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008bae:	7bfb      	ldrb	r3, [r7, #15]
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	33e0      	adds	r3, #224	@ 0xe0
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4413      	add	r3, r2
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d102      	bne.n	8008bc8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008bc2:	7bfb      	ldrb	r3, [r7, #15]
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	e007      	b.n	8008bd8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008bc8:	7bfb      	ldrb	r3, [r7, #15]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	73fb      	strb	r3, [r7, #15]
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
 8008bd0:	2b0f      	cmp	r3, #15
 8008bd2:	d9ec      	bls.n	8008bae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008bd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008be8:	2201      	movs	r2, #1
 8008bea:	490e      	ldr	r1, [pc, #56]	@ (8008c24 <MX_USB_HOST_Init+0x40>)
 8008bec:	480e      	ldr	r0, [pc, #56]	@ (8008c28 <MX_USB_HOST_Init+0x44>)
 8008bee:	f7fe fb0f 	bl	8007210 <USBH_Init>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d001      	beq.n	8008bfc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008bf8:	f7f7 ff58 	bl	8000aac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008bfc:	490b      	ldr	r1, [pc, #44]	@ (8008c2c <MX_USB_HOST_Init+0x48>)
 8008bfe:	480a      	ldr	r0, [pc, #40]	@ (8008c28 <MX_USB_HOST_Init+0x44>)
 8008c00:	f7fe fbb1 	bl	8007366 <USBH_RegisterClass>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d001      	beq.n	8008c0e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008c0a:	f7f7 ff4f 	bl	8000aac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008c0e:	4806      	ldr	r0, [pc, #24]	@ (8008c28 <MX_USB_HOST_Init+0x44>)
 8008c10:	f7fe fc35 	bl	800747e <USBH_Start>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008c1a:	f7f7 ff47 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008c1e:	bf00      	nop
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	08008c45 	.word	0x08008c45
 8008c28:	200001dc 	.word	0x200001dc
 8008c2c:	2000000c 	.word	0x2000000c

08008c30 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008c34:	4802      	ldr	r0, [pc, #8]	@ (8008c40 <MX_USB_HOST_Process+0x10>)
 8008c36:	f7fe fc33 	bl	80074a0 <USBH_Process>
}
 8008c3a:	bf00      	nop
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	200001dc 	.word	0x200001dc

08008c44 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008c50:	78fb      	ldrb	r3, [r7, #3]
 8008c52:	3b01      	subs	r3, #1
 8008c54:	2b04      	cmp	r3, #4
 8008c56:	d819      	bhi.n	8008c8c <USBH_UserProcess+0x48>
 8008c58:	a201      	add	r2, pc, #4	@ (adr r2, 8008c60 <USBH_UserProcess+0x1c>)
 8008c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5e:	bf00      	nop
 8008c60:	08008c8d 	.word	0x08008c8d
 8008c64:	08008c7d 	.word	0x08008c7d
 8008c68:	08008c8d 	.word	0x08008c8d
 8008c6c:	08008c85 	.word	0x08008c85
 8008c70:	08008c75 	.word	0x08008c75
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008c74:	4b09      	ldr	r3, [pc, #36]	@ (8008c9c <USBH_UserProcess+0x58>)
 8008c76:	2203      	movs	r2, #3
 8008c78:	701a      	strb	r2, [r3, #0]
  break;
 8008c7a:	e008      	b.n	8008c8e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008c7c:	4b07      	ldr	r3, [pc, #28]	@ (8008c9c <USBH_UserProcess+0x58>)
 8008c7e:	2202      	movs	r2, #2
 8008c80:	701a      	strb	r2, [r3, #0]
  break;
 8008c82:	e004      	b.n	8008c8e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008c84:	4b05      	ldr	r3, [pc, #20]	@ (8008c9c <USBH_UserProcess+0x58>)
 8008c86:	2201      	movs	r2, #1
 8008c88:	701a      	strb	r2, [r3, #0]
  break;
 8008c8a:	e000      	b.n	8008c8e <USBH_UserProcess+0x4a>

  default:
  break;
 8008c8c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008c8e:	bf00      	nop
 8008c90:	370c      	adds	r7, #12
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	200005b4 	.word	0x200005b4

08008ca0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b08a      	sub	sp, #40	@ 0x28
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ca8:	f107 0314 	add.w	r3, r7, #20
 8008cac:	2200      	movs	r2, #0
 8008cae:	601a      	str	r2, [r3, #0]
 8008cb0:	605a      	str	r2, [r3, #4]
 8008cb2:	609a      	str	r2, [r3, #8]
 8008cb4:	60da      	str	r2, [r3, #12]
 8008cb6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008cc0:	d147      	bne.n	8008d52 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	613b      	str	r3, [r7, #16]
 8008cc6:	4b25      	ldr	r3, [pc, #148]	@ (8008d5c <HAL_HCD_MspInit+0xbc>)
 8008cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cca:	4a24      	ldr	r2, [pc, #144]	@ (8008d5c <HAL_HCD_MspInit+0xbc>)
 8008ccc:	f043 0301 	orr.w	r3, r3, #1
 8008cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8008cd2:	4b22      	ldr	r3, [pc, #136]	@ (8008d5c <HAL_HCD_MspInit+0xbc>)
 8008cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	613b      	str	r3, [r7, #16]
 8008cdc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008cde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008cec:	f107 0314 	add.w	r3, r7, #20
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	481b      	ldr	r0, [pc, #108]	@ (8008d60 <HAL_HCD_MspInit+0xc0>)
 8008cf4:	f7f8 fa4c 	bl	8001190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008cf8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cfe:	2302      	movs	r3, #2
 8008d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d02:	2300      	movs	r3, #0
 8008d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d06:	2300      	movs	r3, #0
 8008d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d0a:	230a      	movs	r3, #10
 8008d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d0e:	f107 0314 	add.w	r3, r7, #20
 8008d12:	4619      	mov	r1, r3
 8008d14:	4812      	ldr	r0, [pc, #72]	@ (8008d60 <HAL_HCD_MspInit+0xc0>)
 8008d16:	f7f8 fa3b 	bl	8001190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d1a:	4b10      	ldr	r3, [pc, #64]	@ (8008d5c <HAL_HCD_MspInit+0xbc>)
 8008d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d1e:	4a0f      	ldr	r2, [pc, #60]	@ (8008d5c <HAL_HCD_MspInit+0xbc>)
 8008d20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d24:	6353      	str	r3, [r2, #52]	@ 0x34
 8008d26:	2300      	movs	r3, #0
 8008d28:	60fb      	str	r3, [r7, #12]
 8008d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8008d5c <HAL_HCD_MspInit+0xbc>)
 8008d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d2e:	4a0b      	ldr	r2, [pc, #44]	@ (8008d5c <HAL_HCD_MspInit+0xbc>)
 8008d30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8008d36:	4b09      	ldr	r3, [pc, #36]	@ (8008d5c <HAL_HCD_MspInit+0xbc>)
 8008d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d3e:	60fb      	str	r3, [r7, #12]
 8008d40:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d42:	2200      	movs	r2, #0
 8008d44:	2100      	movs	r1, #0
 8008d46:	2043      	movs	r0, #67	@ 0x43
 8008d48:	f7f8 f9eb 	bl	8001122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d4c:	2043      	movs	r0, #67	@ 0x43
 8008d4e:	f7f8 fa04 	bl	800115a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d52:	bf00      	nop
 8008d54:	3728      	adds	r7, #40	@ 0x28
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	40023800 	.word	0x40023800
 8008d60:	40020000 	.word	0x40020000

08008d64 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fe ff6d 	bl	8007c52 <USBH_LL_IncTimer>
}
 8008d78:	bf00      	nop
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fe ffa9 	bl	8007ce6 <USBH_LL_Connect>
}
 8008d94:	bf00      	nop
 8008d96:	3708      	adds	r7, #8
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fe ffb2 	bl	8007d14 <USBH_LL_Disconnect>
}
 8008db0:	bf00      	nop
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	70fb      	strb	r3, [r7, #3]
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008dc8:	bf00      	nop
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fe ff5f 	bl	8007ca6 <USBH_LL_PortEnabled>
}
 8008de8:	bf00      	nop
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fe ff5f 	bl	8007cc2 <USBH_LL_PortDisabled>
}
 8008e04:	bf00      	nop
 8008e06:	3708      	adds	r7, #8
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d12a      	bne.n	8008e74 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008e1e:	4a18      	ldr	r2, [pc, #96]	@ (8008e80 <USBH_LL_Init+0x74>)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a15      	ldr	r2, [pc, #84]	@ (8008e80 <USBH_LL_Init+0x74>)
 8008e2a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008e2e:	4b14      	ldr	r3, [pc, #80]	@ (8008e80 <USBH_LL_Init+0x74>)
 8008e30:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008e34:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008e36:	4b12      	ldr	r3, [pc, #72]	@ (8008e80 <USBH_LL_Init+0x74>)
 8008e38:	2208      	movs	r2, #8
 8008e3a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008e3c:	4b10      	ldr	r3, [pc, #64]	@ (8008e80 <USBH_LL_Init+0x74>)
 8008e3e:	2201      	movs	r2, #1
 8008e40:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008e42:	4b0f      	ldr	r3, [pc, #60]	@ (8008e80 <USBH_LL_Init+0x74>)
 8008e44:	2200      	movs	r2, #0
 8008e46:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008e48:	4b0d      	ldr	r3, [pc, #52]	@ (8008e80 <USBH_LL_Init+0x74>)
 8008e4a:	2202      	movs	r2, #2
 8008e4c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8008e80 <USBH_LL_Init+0x74>)
 8008e50:	2200      	movs	r2, #0
 8008e52:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008e54:	480a      	ldr	r0, [pc, #40]	@ (8008e80 <USBH_LL_Init+0x74>)
 8008e56:	f7f8 fb68 	bl	800152a <HAL_HCD_Init>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d001      	beq.n	8008e64 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008e60:	f7f7 fe24 	bl	8000aac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008e64:	4806      	ldr	r0, [pc, #24]	@ (8008e80 <USBH_LL_Init+0x74>)
 8008e66:	f7f8 ffa5 	bl	8001db4 <HAL_HCD_GetCurrentFrame>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f7fe fee0 	bl	8007c34 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	200005b8 	.word	0x200005b8

08008e84 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e90:	2300      	movs	r3, #0
 8008e92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7f8 ff12 	bl	8001cc4 <HAL_HCD_Start>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ea4:	7bfb      	ldrb	r3, [r7, #15]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 f94c 	bl	8009144 <USBH_Get_USB_Status>
 8008eac:	4603      	mov	r3, r0
 8008eae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008eb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7f8 ff1a 	bl	8001d0a <HAL_HCD_Stop>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008eda:	7bfb      	ldrb	r3, [r7, #15]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 f931 	bl	8009144 <USBH_Get_USB_Status>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ee6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7f8 ff64 	bl	8001dd0 <HAL_HCD_GetCurrentSpeed>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d00c      	beq.n	8008f28 <USBH_LL_GetSpeed+0x38>
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d80d      	bhi.n	8008f2e <USBH_LL_GetSpeed+0x3e>
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d002      	beq.n	8008f1c <USBH_LL_GetSpeed+0x2c>
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d003      	beq.n	8008f22 <USBH_LL_GetSpeed+0x32>
 8008f1a:	e008      	b.n	8008f2e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f20:	e008      	b.n	8008f34 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008f22:	2301      	movs	r3, #1
 8008f24:	73fb      	strb	r3, [r7, #15]
    break;
 8008f26:	e005      	b.n	8008f34 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008f28:	2302      	movs	r3, #2
 8008f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f2c:	e002      	b.n	8008f34 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	73fb      	strb	r3, [r7, #15]
    break;
 8008f32:	bf00      	nop
  }
  return  speed;
 8008f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008f3e:	b580      	push	{r7, lr}
 8008f40:	b084      	sub	sp, #16
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7f8 fef5 	bl	8001d44 <HAL_HCD_ResetPort>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f5e:	7bfb      	ldrb	r3, [r7, #15]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f000 f8ef 	bl	8009144 <USBH_Get_USB_Status>
 8008f66:	4603      	mov	r3, r0
 8008f68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008f86:	78fa      	ldrb	r2, [r7, #3]
 8008f88:	4611      	mov	r1, r2
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7f8 fefd 	bl	8001d8a <HAL_HCD_HC_GetXferCount>
 8008f90:	4603      	mov	r3, r0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <USBH_LL_OpenPipe>:
                                    uint8_t epnum,
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
 8008f9a:	b590      	push	{r4, r7, lr}
 8008f9c:	b089      	sub	sp, #36	@ 0x24
 8008f9e:	af04      	add	r7, sp, #16
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	4608      	mov	r0, r1
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	4603      	mov	r3, r0
 8008faa:	70fb      	strb	r3, [r7, #3]
 8008fac:	460b      	mov	r3, r1
 8008fae:	70bb      	strb	r3, [r7, #2]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe, epnum,
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008fc2:	787c      	ldrb	r4, [r7, #1]
 8008fc4:	78ba      	ldrb	r2, [r7, #2]
 8008fc6:	78f9      	ldrb	r1, [r7, #3]
 8008fc8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008fca:	9302      	str	r3, [sp, #8]
 8008fcc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008fd0:	9301      	str	r3, [sp, #4]
 8008fd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	4623      	mov	r3, r4
 8008fda:	f7f8 fb0d 	bl	80015f8 <HAL_HCD_HC_Init>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f000 f8ad 	bl	8009144 <USBH_Get_USB_Status>
 8008fea:	4603      	mov	r3, r0
 8008fec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fee:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3714      	adds	r7, #20
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd90      	pop	{r4, r7, pc}

08008ff8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(pipe);

  return USBH_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009012:	b590      	push	{r4, r7, lr}
 8009014:	b089      	sub	sp, #36	@ 0x24
 8009016:	af04      	add	r7, sp, #16
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	4608      	mov	r0, r1
 800901c:	4611      	mov	r1, r2
 800901e:	461a      	mov	r2, r3
 8009020:	4603      	mov	r3, r0
 8009022:	70fb      	strb	r3, [r7, #3]
 8009024:	460b      	mov	r3, r1
 8009026:	70bb      	strb	r3, [r7, #2]
 8009028:	4613      	mov	r3, r2
 800902a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800902c:	2300      	movs	r3, #0
 800902e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009030:	2300      	movs	r3, #0
 8009032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800903a:	787c      	ldrb	r4, [r7, #1]
 800903c:	78ba      	ldrb	r2, [r7, #2]
 800903e:	78f9      	ldrb	r1, [r7, #3]
 8009040:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009044:	9303      	str	r3, [sp, #12]
 8009046:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009048:	9302      	str	r3, [sp, #8]
 800904a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904c:	9301      	str	r3, [sp, #4]
 800904e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	4623      	mov	r3, r4
 8009056:	f7f8 fb87 	bl	8001768 <HAL_HCD_HC_SubmitRequest>
 800905a:	4603      	mov	r3, r0
 800905c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800905e:	7bfb      	ldrb	r3, [r7, #15]
 8009060:	4618      	mov	r0, r3
 8009062:	f000 f86f 	bl	8009144 <USBH_Get_USB_Status>
 8009066:	4603      	mov	r3, r0
 8009068:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800906a:	7bbb      	ldrb	r3, [r7, #14]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3714      	adds	r7, #20
 8009070:	46bd      	mov	sp, r7
 8009072:	bd90      	pop	{r4, r7, pc}

08009074 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	460b      	mov	r3, r1
 800907e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009086:	78fa      	ldrb	r2, [r7, #3]
 8009088:	4611      	mov	r1, r2
 800908a:	4618      	mov	r0, r3
 800908c:	f7f8 fe68 	bl	8001d60 <HAL_HCD_HC_GetURBState>
 8009090:	4603      	mov	r3, r0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b082      	sub	sp, #8
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
 80090a2:	460b      	mov	r3, r1
 80090a4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d103      	bne.n	80090b8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80090b0:	78fb      	ldrb	r3, [r7, #3]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 f872 	bl	800919c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80090b8:	20c8      	movs	r0, #200	@ 0xc8
 80090ba:	f7f7 ff33 	bl	8000f24 <HAL_Delay>
  return USBH_OK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	460b      	mov	r3, r1
 80090d2:	70fb      	strb	r3, [r7, #3]
 80090d4:	4613      	mov	r3, r2
 80090d6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80090de:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80090e0:	78fa      	ldrb	r2, [r7, #3]
 80090e2:	68f9      	ldr	r1, [r7, #12]
 80090e4:	4613      	mov	r3, r2
 80090e6:	011b      	lsls	r3, r3, #4
 80090e8:	1a9b      	subs	r3, r3, r2
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	440b      	add	r3, r1
 80090ee:	3317      	adds	r3, #23
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00a      	beq.n	800910c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80090f6:	78fa      	ldrb	r2, [r7, #3]
 80090f8:	68f9      	ldr	r1, [r7, #12]
 80090fa:	4613      	mov	r3, r2
 80090fc:	011b      	lsls	r3, r3, #4
 80090fe:	1a9b      	subs	r3, r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	440b      	add	r3, r1
 8009104:	333c      	adds	r3, #60	@ 0x3c
 8009106:	78ba      	ldrb	r2, [r7, #2]
 8009108:	701a      	strb	r2, [r3, #0]
 800910a:	e009      	b.n	8009120 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800910c:	78fa      	ldrb	r2, [r7, #3]
 800910e:	68f9      	ldr	r1, [r7, #12]
 8009110:	4613      	mov	r3, r2
 8009112:	011b      	lsls	r3, r3, #4
 8009114:	1a9b      	subs	r3, r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	440b      	add	r3, r1
 800911a:	333d      	adds	r3, #61	@ 0x3d
 800911c:	78ba      	ldrb	r2, [r7, #2]
 800911e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr

0800912e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b082      	sub	sp, #8
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7f7 fef4 	bl	8000f24 <HAL_Delay>
}
 800913c:	bf00      	nop
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	4603      	mov	r3, r0
 800914c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800914e:	2300      	movs	r3, #0
 8009150:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009152:	79fb      	ldrb	r3, [r7, #7]
 8009154:	2b03      	cmp	r3, #3
 8009156:	d817      	bhi.n	8009188 <USBH_Get_USB_Status+0x44>
 8009158:	a201      	add	r2, pc, #4	@ (adr r2, 8009160 <USBH_Get_USB_Status+0x1c>)
 800915a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915e:	bf00      	nop
 8009160:	08009171 	.word	0x08009171
 8009164:	08009177 	.word	0x08009177
 8009168:	0800917d 	.word	0x0800917d
 800916c:	08009183 	.word	0x08009183
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	73fb      	strb	r3, [r7, #15]
    break;
 8009174:	e00b      	b.n	800918e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009176:	2302      	movs	r3, #2
 8009178:	73fb      	strb	r3, [r7, #15]
    break;
 800917a:	e008      	b.n	800918e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800917c:	2301      	movs	r3, #1
 800917e:	73fb      	strb	r3, [r7, #15]
    break;
 8009180:	e005      	b.n	800918e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009182:	2302      	movs	r3, #2
 8009184:	73fb      	strb	r3, [r7, #15]
    break;
 8009186:	e002      	b.n	800918e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009188:	2302      	movs	r3, #2
 800918a:	73fb      	strb	r3, [r7, #15]
    break;
 800918c:	bf00      	nop
  }
  return usb_status;
 800918e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009190:	4618      	mov	r0, r3
 8009192:	3714      	adds	r7, #20
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	4603      	mov	r3, r0
 80091a4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80091a6:	79fb      	ldrb	r3, [r7, #7]
 80091a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80091aa:	79fb      	ldrb	r3, [r7, #7]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d102      	bne.n	80091b6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80091b0:	2300      	movs	r3, #0
 80091b2:	73fb      	strb	r3, [r7, #15]
 80091b4:	e001      	b.n	80091ba <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80091b6:	2301      	movs	r3, #1
 80091b8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
 80091bc:	461a      	mov	r2, r3
 80091be:	2101      	movs	r1, #1
 80091c0:	4803      	ldr	r0, [pc, #12]	@ (80091d0 <MX_DriverVbusFS+0x34>)
 80091c2:	f7f8 f999 	bl	80014f8 <HAL_GPIO_WritePin>
}
 80091c6:	bf00      	nop
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	40020800 	.word	0x40020800

080091d4 <malloc>:
 80091d4:	4b02      	ldr	r3, [pc, #8]	@ (80091e0 <malloc+0xc>)
 80091d6:	4601      	mov	r1, r0
 80091d8:	6818      	ldr	r0, [r3, #0]
 80091da:	f000 b82d 	b.w	8009238 <_malloc_r>
 80091de:	bf00      	nop
 80091e0:	2000002c 	.word	0x2000002c

080091e4 <free>:
 80091e4:	4b02      	ldr	r3, [pc, #8]	@ (80091f0 <free+0xc>)
 80091e6:	4601      	mov	r1, r0
 80091e8:	6818      	ldr	r0, [r3, #0]
 80091ea:	f000 b8f5 	b.w	80093d8 <_free_r>
 80091ee:	bf00      	nop
 80091f0:	2000002c 	.word	0x2000002c

080091f4 <sbrk_aligned>:
 80091f4:	b570      	push	{r4, r5, r6, lr}
 80091f6:	4e0f      	ldr	r6, [pc, #60]	@ (8009234 <sbrk_aligned+0x40>)
 80091f8:	460c      	mov	r4, r1
 80091fa:	6831      	ldr	r1, [r6, #0]
 80091fc:	4605      	mov	r5, r0
 80091fe:	b911      	cbnz	r1, 8009206 <sbrk_aligned+0x12>
 8009200:	f000 f8ae 	bl	8009360 <_sbrk_r>
 8009204:	6030      	str	r0, [r6, #0]
 8009206:	4621      	mov	r1, r4
 8009208:	4628      	mov	r0, r5
 800920a:	f000 f8a9 	bl	8009360 <_sbrk_r>
 800920e:	1c43      	adds	r3, r0, #1
 8009210:	d103      	bne.n	800921a <sbrk_aligned+0x26>
 8009212:	f04f 34ff 	mov.w	r4, #4294967295
 8009216:	4620      	mov	r0, r4
 8009218:	bd70      	pop	{r4, r5, r6, pc}
 800921a:	1cc4      	adds	r4, r0, #3
 800921c:	f024 0403 	bic.w	r4, r4, #3
 8009220:	42a0      	cmp	r0, r4
 8009222:	d0f8      	beq.n	8009216 <sbrk_aligned+0x22>
 8009224:	1a21      	subs	r1, r4, r0
 8009226:	4628      	mov	r0, r5
 8009228:	f000 f89a 	bl	8009360 <_sbrk_r>
 800922c:	3001      	adds	r0, #1
 800922e:	d1f2      	bne.n	8009216 <sbrk_aligned+0x22>
 8009230:	e7ef      	b.n	8009212 <sbrk_aligned+0x1e>
 8009232:	bf00      	nop
 8009234:	20000998 	.word	0x20000998

08009238 <_malloc_r>:
 8009238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800923c:	1ccd      	adds	r5, r1, #3
 800923e:	f025 0503 	bic.w	r5, r5, #3
 8009242:	3508      	adds	r5, #8
 8009244:	2d0c      	cmp	r5, #12
 8009246:	bf38      	it	cc
 8009248:	250c      	movcc	r5, #12
 800924a:	2d00      	cmp	r5, #0
 800924c:	4606      	mov	r6, r0
 800924e:	db01      	blt.n	8009254 <_malloc_r+0x1c>
 8009250:	42a9      	cmp	r1, r5
 8009252:	d904      	bls.n	800925e <_malloc_r+0x26>
 8009254:	230c      	movs	r3, #12
 8009256:	6033      	str	r3, [r6, #0]
 8009258:	2000      	movs	r0, #0
 800925a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800925e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009334 <_malloc_r+0xfc>
 8009262:	f000 f869 	bl	8009338 <__malloc_lock>
 8009266:	f8d8 3000 	ldr.w	r3, [r8]
 800926a:	461c      	mov	r4, r3
 800926c:	bb44      	cbnz	r4, 80092c0 <_malloc_r+0x88>
 800926e:	4629      	mov	r1, r5
 8009270:	4630      	mov	r0, r6
 8009272:	f7ff ffbf 	bl	80091f4 <sbrk_aligned>
 8009276:	1c43      	adds	r3, r0, #1
 8009278:	4604      	mov	r4, r0
 800927a:	d158      	bne.n	800932e <_malloc_r+0xf6>
 800927c:	f8d8 4000 	ldr.w	r4, [r8]
 8009280:	4627      	mov	r7, r4
 8009282:	2f00      	cmp	r7, #0
 8009284:	d143      	bne.n	800930e <_malloc_r+0xd6>
 8009286:	2c00      	cmp	r4, #0
 8009288:	d04b      	beq.n	8009322 <_malloc_r+0xea>
 800928a:	6823      	ldr	r3, [r4, #0]
 800928c:	4639      	mov	r1, r7
 800928e:	4630      	mov	r0, r6
 8009290:	eb04 0903 	add.w	r9, r4, r3
 8009294:	f000 f864 	bl	8009360 <_sbrk_r>
 8009298:	4581      	cmp	r9, r0
 800929a:	d142      	bne.n	8009322 <_malloc_r+0xea>
 800929c:	6821      	ldr	r1, [r4, #0]
 800929e:	1a6d      	subs	r5, r5, r1
 80092a0:	4629      	mov	r1, r5
 80092a2:	4630      	mov	r0, r6
 80092a4:	f7ff ffa6 	bl	80091f4 <sbrk_aligned>
 80092a8:	3001      	adds	r0, #1
 80092aa:	d03a      	beq.n	8009322 <_malloc_r+0xea>
 80092ac:	6823      	ldr	r3, [r4, #0]
 80092ae:	442b      	add	r3, r5
 80092b0:	6023      	str	r3, [r4, #0]
 80092b2:	f8d8 3000 	ldr.w	r3, [r8]
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	bb62      	cbnz	r2, 8009314 <_malloc_r+0xdc>
 80092ba:	f8c8 7000 	str.w	r7, [r8]
 80092be:	e00f      	b.n	80092e0 <_malloc_r+0xa8>
 80092c0:	6822      	ldr	r2, [r4, #0]
 80092c2:	1b52      	subs	r2, r2, r5
 80092c4:	d420      	bmi.n	8009308 <_malloc_r+0xd0>
 80092c6:	2a0b      	cmp	r2, #11
 80092c8:	d917      	bls.n	80092fa <_malloc_r+0xc2>
 80092ca:	1961      	adds	r1, r4, r5
 80092cc:	42a3      	cmp	r3, r4
 80092ce:	6025      	str	r5, [r4, #0]
 80092d0:	bf18      	it	ne
 80092d2:	6059      	strne	r1, [r3, #4]
 80092d4:	6863      	ldr	r3, [r4, #4]
 80092d6:	bf08      	it	eq
 80092d8:	f8c8 1000 	streq.w	r1, [r8]
 80092dc:	5162      	str	r2, [r4, r5]
 80092de:	604b      	str	r3, [r1, #4]
 80092e0:	4630      	mov	r0, r6
 80092e2:	f000 f82f 	bl	8009344 <__malloc_unlock>
 80092e6:	f104 000b 	add.w	r0, r4, #11
 80092ea:	1d23      	adds	r3, r4, #4
 80092ec:	f020 0007 	bic.w	r0, r0, #7
 80092f0:	1ac2      	subs	r2, r0, r3
 80092f2:	bf1c      	itt	ne
 80092f4:	1a1b      	subne	r3, r3, r0
 80092f6:	50a3      	strne	r3, [r4, r2]
 80092f8:	e7af      	b.n	800925a <_malloc_r+0x22>
 80092fa:	6862      	ldr	r2, [r4, #4]
 80092fc:	42a3      	cmp	r3, r4
 80092fe:	bf0c      	ite	eq
 8009300:	f8c8 2000 	streq.w	r2, [r8]
 8009304:	605a      	strne	r2, [r3, #4]
 8009306:	e7eb      	b.n	80092e0 <_malloc_r+0xa8>
 8009308:	4623      	mov	r3, r4
 800930a:	6864      	ldr	r4, [r4, #4]
 800930c:	e7ae      	b.n	800926c <_malloc_r+0x34>
 800930e:	463c      	mov	r4, r7
 8009310:	687f      	ldr	r7, [r7, #4]
 8009312:	e7b6      	b.n	8009282 <_malloc_r+0x4a>
 8009314:	461a      	mov	r2, r3
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	42a3      	cmp	r3, r4
 800931a:	d1fb      	bne.n	8009314 <_malloc_r+0xdc>
 800931c:	2300      	movs	r3, #0
 800931e:	6053      	str	r3, [r2, #4]
 8009320:	e7de      	b.n	80092e0 <_malloc_r+0xa8>
 8009322:	230c      	movs	r3, #12
 8009324:	6033      	str	r3, [r6, #0]
 8009326:	4630      	mov	r0, r6
 8009328:	f000 f80c 	bl	8009344 <__malloc_unlock>
 800932c:	e794      	b.n	8009258 <_malloc_r+0x20>
 800932e:	6005      	str	r5, [r0, #0]
 8009330:	e7d6      	b.n	80092e0 <_malloc_r+0xa8>
 8009332:	bf00      	nop
 8009334:	2000099c 	.word	0x2000099c

08009338 <__malloc_lock>:
 8009338:	4801      	ldr	r0, [pc, #4]	@ (8009340 <__malloc_lock+0x8>)
 800933a:	f000 b84b 	b.w	80093d4 <__retarget_lock_acquire_recursive>
 800933e:	bf00      	nop
 8009340:	20000adc 	.word	0x20000adc

08009344 <__malloc_unlock>:
 8009344:	4801      	ldr	r0, [pc, #4]	@ (800934c <__malloc_unlock+0x8>)
 8009346:	f000 b846 	b.w	80093d6 <__retarget_lock_release_recursive>
 800934a:	bf00      	nop
 800934c:	20000adc 	.word	0x20000adc

08009350 <memset>:
 8009350:	4402      	add	r2, r0
 8009352:	4603      	mov	r3, r0
 8009354:	4293      	cmp	r3, r2
 8009356:	d100      	bne.n	800935a <memset+0xa>
 8009358:	4770      	bx	lr
 800935a:	f803 1b01 	strb.w	r1, [r3], #1
 800935e:	e7f9      	b.n	8009354 <memset+0x4>

08009360 <_sbrk_r>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	4d06      	ldr	r5, [pc, #24]	@ (800937c <_sbrk_r+0x1c>)
 8009364:	2300      	movs	r3, #0
 8009366:	4604      	mov	r4, r0
 8009368:	4608      	mov	r0, r1
 800936a:	602b      	str	r3, [r5, #0]
 800936c:	f7f7 fc84 	bl	8000c78 <_sbrk>
 8009370:	1c43      	adds	r3, r0, #1
 8009372:	d102      	bne.n	800937a <_sbrk_r+0x1a>
 8009374:	682b      	ldr	r3, [r5, #0]
 8009376:	b103      	cbz	r3, 800937a <_sbrk_r+0x1a>
 8009378:	6023      	str	r3, [r4, #0]
 800937a:	bd38      	pop	{r3, r4, r5, pc}
 800937c:	20000ad8 	.word	0x20000ad8

08009380 <__errno>:
 8009380:	4b01      	ldr	r3, [pc, #4]	@ (8009388 <__errno+0x8>)
 8009382:	6818      	ldr	r0, [r3, #0]
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop
 8009388:	2000002c 	.word	0x2000002c

0800938c <__libc_init_array>:
 800938c:	b570      	push	{r4, r5, r6, lr}
 800938e:	4d0d      	ldr	r5, [pc, #52]	@ (80093c4 <__libc_init_array+0x38>)
 8009390:	4c0d      	ldr	r4, [pc, #52]	@ (80093c8 <__libc_init_array+0x3c>)
 8009392:	1b64      	subs	r4, r4, r5
 8009394:	10a4      	asrs	r4, r4, #2
 8009396:	2600      	movs	r6, #0
 8009398:	42a6      	cmp	r6, r4
 800939a:	d109      	bne.n	80093b0 <__libc_init_array+0x24>
 800939c:	4d0b      	ldr	r5, [pc, #44]	@ (80093cc <__libc_init_array+0x40>)
 800939e:	4c0c      	ldr	r4, [pc, #48]	@ (80093d0 <__libc_init_array+0x44>)
 80093a0:	f000 f864 	bl	800946c <_init>
 80093a4:	1b64      	subs	r4, r4, r5
 80093a6:	10a4      	asrs	r4, r4, #2
 80093a8:	2600      	movs	r6, #0
 80093aa:	42a6      	cmp	r6, r4
 80093ac:	d105      	bne.n	80093ba <__libc_init_array+0x2e>
 80093ae:	bd70      	pop	{r4, r5, r6, pc}
 80093b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80093b4:	4798      	blx	r3
 80093b6:	3601      	adds	r6, #1
 80093b8:	e7ee      	b.n	8009398 <__libc_init_array+0xc>
 80093ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80093be:	4798      	blx	r3
 80093c0:	3601      	adds	r6, #1
 80093c2:	e7f2      	b.n	80093aa <__libc_init_array+0x1e>
 80093c4:	080094bc 	.word	0x080094bc
 80093c8:	080094bc 	.word	0x080094bc
 80093cc:	080094bc 	.word	0x080094bc
 80093d0:	080094c0 	.word	0x080094c0

080093d4 <__retarget_lock_acquire_recursive>:
 80093d4:	4770      	bx	lr

080093d6 <__retarget_lock_release_recursive>:
 80093d6:	4770      	bx	lr

080093d8 <_free_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	4605      	mov	r5, r0
 80093dc:	2900      	cmp	r1, #0
 80093de:	d041      	beq.n	8009464 <_free_r+0x8c>
 80093e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093e4:	1f0c      	subs	r4, r1, #4
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	bfb8      	it	lt
 80093ea:	18e4      	addlt	r4, r4, r3
 80093ec:	f7ff ffa4 	bl	8009338 <__malloc_lock>
 80093f0:	4a1d      	ldr	r2, [pc, #116]	@ (8009468 <_free_r+0x90>)
 80093f2:	6813      	ldr	r3, [r2, #0]
 80093f4:	b933      	cbnz	r3, 8009404 <_free_r+0x2c>
 80093f6:	6063      	str	r3, [r4, #4]
 80093f8:	6014      	str	r4, [r2, #0]
 80093fa:	4628      	mov	r0, r5
 80093fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009400:	f7ff bfa0 	b.w	8009344 <__malloc_unlock>
 8009404:	42a3      	cmp	r3, r4
 8009406:	d908      	bls.n	800941a <_free_r+0x42>
 8009408:	6820      	ldr	r0, [r4, #0]
 800940a:	1821      	adds	r1, r4, r0
 800940c:	428b      	cmp	r3, r1
 800940e:	bf01      	itttt	eq
 8009410:	6819      	ldreq	r1, [r3, #0]
 8009412:	685b      	ldreq	r3, [r3, #4]
 8009414:	1809      	addeq	r1, r1, r0
 8009416:	6021      	streq	r1, [r4, #0]
 8009418:	e7ed      	b.n	80093f6 <_free_r+0x1e>
 800941a:	461a      	mov	r2, r3
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	b10b      	cbz	r3, 8009424 <_free_r+0x4c>
 8009420:	42a3      	cmp	r3, r4
 8009422:	d9fa      	bls.n	800941a <_free_r+0x42>
 8009424:	6811      	ldr	r1, [r2, #0]
 8009426:	1850      	adds	r0, r2, r1
 8009428:	42a0      	cmp	r0, r4
 800942a:	d10b      	bne.n	8009444 <_free_r+0x6c>
 800942c:	6820      	ldr	r0, [r4, #0]
 800942e:	4401      	add	r1, r0
 8009430:	1850      	adds	r0, r2, r1
 8009432:	4283      	cmp	r3, r0
 8009434:	6011      	str	r1, [r2, #0]
 8009436:	d1e0      	bne.n	80093fa <_free_r+0x22>
 8009438:	6818      	ldr	r0, [r3, #0]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	6053      	str	r3, [r2, #4]
 800943e:	4408      	add	r0, r1
 8009440:	6010      	str	r0, [r2, #0]
 8009442:	e7da      	b.n	80093fa <_free_r+0x22>
 8009444:	d902      	bls.n	800944c <_free_r+0x74>
 8009446:	230c      	movs	r3, #12
 8009448:	602b      	str	r3, [r5, #0]
 800944a:	e7d6      	b.n	80093fa <_free_r+0x22>
 800944c:	6820      	ldr	r0, [r4, #0]
 800944e:	1821      	adds	r1, r4, r0
 8009450:	428b      	cmp	r3, r1
 8009452:	bf04      	itt	eq
 8009454:	6819      	ldreq	r1, [r3, #0]
 8009456:	685b      	ldreq	r3, [r3, #4]
 8009458:	6063      	str	r3, [r4, #4]
 800945a:	bf04      	itt	eq
 800945c:	1809      	addeq	r1, r1, r0
 800945e:	6021      	streq	r1, [r4, #0]
 8009460:	6054      	str	r4, [r2, #4]
 8009462:	e7ca      	b.n	80093fa <_free_r+0x22>
 8009464:	bd38      	pop	{r3, r4, r5, pc}
 8009466:	bf00      	nop
 8009468:	2000099c 	.word	0x2000099c

0800946c <_init>:
 800946c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946e:	bf00      	nop
 8009470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009472:	bc08      	pop	{r3}
 8009474:	469e      	mov	lr, r3
 8009476:	4770      	bx	lr

08009478 <_fini>:
 8009478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800947a:	bf00      	nop
 800947c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800947e:	bc08      	pop	{r3}
 8009480:	469e      	mov	lr, r3
 8009482:	4770      	bx	lr
