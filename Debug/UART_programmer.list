
UART_programmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005904  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005a8c  08005a8c  00006a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ac4  08005ac4  00007258  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005ac4  08005ac4  00006ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005acc  08005acc  00007258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005acc  08005acc  00006acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ad0  08005ad0  00006ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000258  20000000  08005ad4  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007258  2**0
                  CONTENTS
 10 .bss          0000044c  20000258  20000258  00007258  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006a4  200006a4  00007258  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007258  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012a9f  00000000  00000000  00007288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cfb  00000000  00000000  00019d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c0  00000000  00000000  0001ca28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cf9  00000000  00000000  0001dae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002268b  00000000  00000000  0001e7e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014bd0  00000000  00000000  00040e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3a9f  00000000  00000000  00055a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001294db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004708  00000000  00000000  00129520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0012dc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000258 	.word	0x20000258
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a74 	.word	0x08005a74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000025c 	.word	0x2000025c
 80001c4:	08005a74 	.word	0x08005a74

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <DI_Button_GetState>:
		{.id = eID_LED3,.name = "LED3",.gpio=GPIOD,.pin = LD3_Pin,.mode = GPIO_MODE_OUTPUT_PP,.pull = GPIO_NOPULL,.speed = GPIO_SPEED_FREQ_LOW,.default_value = -1},
		{.id = eID_LED5,.name = "LED5",.gpio=GPIOD,.pin = LD5_Pin,.mode = GPIO_MODE_OUTPUT_PP,.pull = GPIO_NOPULL,.speed = GPIO_SPEED_FREQ_LOW,.default_value = -1},
		{.id = eID_LED6,.name = "LED6",.gpio=GPIOD,.pin = LD6_Pin,.mode = GPIO_MODE_OUTPUT_PP,.pull = GPIO_NOPULL,.speed = GPIO_SPEED_FREQ_LOW,.default_value = -1}
};

eButton_State DI_Button_GetState(eDIO_ID id){
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
	return sDIOTable[id].state;
 80004fe:	79fa      	ldrb	r2, [r7, #7]
 8000500:	4907      	ldr	r1, [pc, #28]	@ (8000520 <DI_Button_GetState+0x2c>)
 8000502:	4613      	mov	r3, r2
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	4413      	add	r3, r2
 8000508:	011b      	lsls	r3, r3, #4
 800050a:	440b      	add	r3, r1
 800050c:	3334      	adds	r3, #52	@ 0x34
 800050e:	f993 3000 	ldrsb.w	r3, [r3]
}
 8000512:	4618      	mov	r0, r3
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	20000000 	.word	0x20000000

08000524 <DIO_Button_Poll>:


void DIO_Button_Poll(void){
 8000524:	b590      	push	{r4, r7, lr}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
	for(int i = 0;i < eID_DIO_MAX ;i++){
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	e288      	b.n	8000a42 <DIO_Button_Poll+0x51e>
		if(sDIOTable[i].mode == GPIO_MODE_INPUT || sDIOTable[i].mode == GPIO_MODE_EVT_RISING){
 8000530:	49c1      	ldr	r1, [pc, #772]	@ (8000838 <DIO_Button_Poll+0x314>)
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	4613      	mov	r3, r2
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	4413      	add	r3, r2
 800053a:	011b      	lsls	r3, r3, #4
 800053c:	440b      	add	r3, r1
 800053e:	3320      	adds	r3, #32
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d00c      	beq.n	8000560 <DIO_Button_Poll+0x3c>
 8000546:	49bc      	ldr	r1, [pc, #752]	@ (8000838 <DIO_Button_Poll+0x314>)
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	4613      	mov	r3, r2
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	4413      	add	r3, r2
 8000550:	011b      	lsls	r3, r3, #4
 8000552:	440b      	add	r3, r1
 8000554:	3320      	adds	r3, #32
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 800055c:	f040 826e 	bne.w	8000a3c <DIO_Button_Poll+0x518>
			bool current_state = DI_Read(sDIOTable[i].id);
 8000560:	49b5      	ldr	r1, [pc, #724]	@ (8000838 <DIO_Button_Poll+0x314>)
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	4613      	mov	r3, r2
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	4413      	add	r3, r2
 800056a:	011b      	lsls	r3, r3, #4
 800056c:	440b      	add	r3, r1
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4618      	mov	r0, r3
 8000572:	f000 fc11 	bl	8000d98 <DI_Read>
 8000576:	4603      	mov	r3, r0
 8000578:	70fb      	strb	r3, [r7, #3]
			switch(sDIOTable[i].state){
 800057a:	49af      	ldr	r1, [pc, #700]	@ (8000838 <DIO_Button_Poll+0x314>)
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	4613      	mov	r3, r2
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	4413      	add	r3, r2
 8000584:	011b      	lsls	r3, r3, #4
 8000586:	440b      	add	r3, r1
 8000588:	3334      	adds	r3, #52	@ 0x34
 800058a:	f993 3000 	ldrsb.w	r3, [r3]
 800058e:	3301      	adds	r3, #1
 8000590:	2b04      	cmp	r3, #4
 8000592:	f200 8243 	bhi.w	8000a1c <DIO_Button_Poll+0x4f8>
 8000596:	a201      	add	r2, pc, #4	@ (adr r2, 800059c <DIO_Button_Poll+0x78>)
 8000598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059c:	080005b1 	.word	0x080005b1
 80005a0:	0800063b 	.word	0x0800063b
 80005a4:	08000783 	.word	0x08000783
 80005a8:	080007e5 	.word	0x080007e5
 80005ac:	08000931 	.word	0x08000931
			case eSTATE_Uknown:
				if(current_state == true){
 80005b0:	78fb      	ldrb	r3, [r7, #3]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d020      	beq.n	80005f8 <DIO_Button_Poll+0xd4>
					sDIOTable[i].state = eSTATE_Pressed;
 80005b6:	49a0      	ldr	r1, [pc, #640]	@ (8000838 <DIO_Button_Poll+0x314>)
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	4613      	mov	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	011b      	lsls	r3, r3, #4
 80005c2:	440b      	add	r3, r1
 80005c4:	3334      	adds	r3, #52	@ 0x34
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
					sDIOTable[i].real_state = eSTATE_Pressed;
 80005ca:	499b      	ldr	r1, [pc, #620]	@ (8000838 <DIO_Button_Poll+0x314>)
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	4613      	mov	r3, r2
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	4413      	add	r3, r2
 80005d4:	011b      	lsls	r3, r3, #4
 80005d6:	440b      	add	r3, r1
 80005d8:	3335      	adds	r3, #53	@ 0x35
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
					sDIOTable[i].pressed_timer = TMR_Now();
 80005de:	f000 fe05 	bl	80011ec <TMR_Now>
 80005e2:	4c95      	ldr	r4, [pc, #596]	@ (8000838 <DIO_Button_Poll+0x314>)
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	4613      	mov	r3, r2
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	4413      	add	r3, r2
 80005ec:	011b      	lsls	r3, r3, #4
 80005ee:	4423      	add	r3, r4
 80005f0:	3340      	adds	r3, #64	@ 0x40
 80005f2:	e9c3 0100 	strd	r0, r1, [r3]
				}else{
					sDIOTable[i].state = eSTATE_Released;
					sDIOTable[i].real_state = eSTATE_Released;
					sDIOTable[i].released_timer = TMR_Now();
				}
				break;
 80005f6:	e221      	b.n	8000a3c <DIO_Button_Poll+0x518>
					sDIOTable[i].state = eSTATE_Released;
 80005f8:	498f      	ldr	r1, [pc, #572]	@ (8000838 <DIO_Button_Poll+0x314>)
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	4613      	mov	r3, r2
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	4413      	add	r3, r2
 8000602:	011b      	lsls	r3, r3, #4
 8000604:	440b      	add	r3, r1
 8000606:	3334      	adds	r3, #52	@ 0x34
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
					sDIOTable[i].real_state = eSTATE_Released;
 800060c:	498a      	ldr	r1, [pc, #552]	@ (8000838 <DIO_Button_Poll+0x314>)
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	4613      	mov	r3, r2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	4413      	add	r3, r2
 8000616:	011b      	lsls	r3, r3, #4
 8000618:	440b      	add	r3, r1
 800061a:	3335      	adds	r3, #53	@ 0x35
 800061c:	2201      	movs	r2, #1
 800061e:	701a      	strb	r2, [r3, #0]
					sDIOTable[i].released_timer = TMR_Now();
 8000620:	f000 fde4 	bl	80011ec <TMR_Now>
 8000624:	4c84      	ldr	r4, [pc, #528]	@ (8000838 <DIO_Button_Poll+0x314>)
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4613      	mov	r3, r2
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	4413      	add	r3, r2
 800062e:	011b      	lsls	r3, r3, #4
 8000630:	4423      	add	r3, r4
 8000632:	3348      	adds	r3, #72	@ 0x48
 8000634:	e9c3 0100 	strd	r0, r1, [r3]
				break;
 8000638:	e200      	b.n	8000a3c <DIO_Button_Poll+0x518>
			case eSTATE_Pressed:
				if(current_state == false){
 800063a:	78fb      	ldrb	r3, [r7, #3]
 800063c:	f083 0301 	eor.w	r3, r3, #1
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d071      	beq.n	800072a <DIO_Button_Poll+0x206>
					if(sDIOTable[i].real_state != eSTATE_Released){
 8000646:	497c      	ldr	r1, [pc, #496]	@ (8000838 <DIO_Button_Poll+0x314>)
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4613      	mov	r3, r2
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	4413      	add	r3, r2
 8000650:	011b      	lsls	r3, r3, #4
 8000652:	440b      	add	r3, r1
 8000654:	3335      	adds	r3, #53	@ 0x35
 8000656:	f993 3000 	ldrsb.w	r3, [r3]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d016      	beq.n	800068c <DIO_Button_Poll+0x168>
						sDIOTable[i].released_timer = TMR_Now();
 800065e:	f000 fdc5 	bl	80011ec <TMR_Now>
 8000662:	4c75      	ldr	r4, [pc, #468]	@ (8000838 <DIO_Button_Poll+0x314>)
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	4613      	mov	r3, r2
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	4413      	add	r3, r2
 800066c:	011b      	lsls	r3, r3, #4
 800066e:	4423      	add	r3, r4
 8000670:	3348      	adds	r3, #72	@ 0x48
 8000672:	e9c3 0100 	strd	r0, r1, [r3]
						sDIOTable[i].real_state = eSTATE_Released;
 8000676:	4970      	ldr	r1, [pc, #448]	@ (8000838 <DIO_Button_Poll+0x314>)
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	4613      	mov	r3, r2
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	4413      	add	r3, r2
 8000680:	011b      	lsls	r3, r3, #4
 8000682:	440b      	add	r3, r1
 8000684:	3335      	adds	r3, #53	@ 0x35
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
					if(TMR_Elapsed(sDIOTable[i].pressed_timer) >= 50000UL){ // 50 ms
						sDIOTable[i].state = eSTATE_Short_Press;
						sDIOTable[i].real_state = eSTATE_Short_Press;
					}
				}
				break;
 800068a:	e1d2      	b.n	8000a32 <DIO_Button_Poll+0x50e>
					else if(sDIOTable[i].real_state == eSTATE_Released && TMR_Elapsed(sDIOTable[i].released_timer) > 50000){
 800068c:	496a      	ldr	r1, [pc, #424]	@ (8000838 <DIO_Button_Poll+0x314>)
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	4613      	mov	r3, r2
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	011b      	lsls	r3, r3, #4
 8000698:	440b      	add	r3, r1
 800069a:	3335      	adds	r3, #53	@ 0x35
 800069c:	f993 3000 	ldrsb.w	r3, [r3]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	f040 81c6 	bne.w	8000a32 <DIO_Button_Poll+0x50e>
 80006a6:	4964      	ldr	r1, [pc, #400]	@ (8000838 <DIO_Button_Poll+0x314>)
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	4613      	mov	r3, r2
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	4413      	add	r3, r2
 80006b0:	011b      	lsls	r3, r3, #4
 80006b2:	440b      	add	r3, r1
 80006b4:	3348      	adds	r3, #72	@ 0x48
 80006b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006ba:	4610      	mov	r0, r2
 80006bc:	4619      	mov	r1, r3
 80006be:	f000 fde2 	bl	8001286 <TMR_Elapsed>
 80006c2:	4602      	mov	r2, r0
 80006c4:	460b      	mov	r3, r1
 80006c6:	f24c 3151 	movw	r1, #50001	@ 0xc351
 80006ca:	428a      	cmp	r2, r1
 80006cc:	f173 0300 	sbcs.w	r3, r3, #0
 80006d0:	f0c0 81af 	bcc.w	8000a32 <DIO_Button_Poll+0x50e>
						sDIOTable[i].state = eSTATE_Released;
 80006d4:	4958      	ldr	r1, [pc, #352]	@ (8000838 <DIO_Button_Poll+0x314>)
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	4613      	mov	r3, r2
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	4413      	add	r3, r2
 80006de:	011b      	lsls	r3, r3, #4
 80006e0:	440b      	add	r3, r1
 80006e2:	3334      	adds	r3, #52	@ 0x34
 80006e4:	2201      	movs	r2, #1
 80006e6:	701a      	strb	r2, [r3, #0]
						sDIOTable[i].press_time = sDIOTable[i].released_timer - sDIOTable[i].pressed_timer;
 80006e8:	4953      	ldr	r1, [pc, #332]	@ (8000838 <DIO_Button_Poll+0x314>)
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	4613      	mov	r3, r2
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4413      	add	r3, r2
 80006f2:	011b      	lsls	r3, r3, #4
 80006f4:	440b      	add	r3, r1
 80006f6:	3348      	adds	r3, #72	@ 0x48
 80006f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006fc:	4610      	mov	r0, r2
 80006fe:	494e      	ldr	r1, [pc, #312]	@ (8000838 <DIO_Button_Poll+0x314>)
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	4613      	mov	r3, r2
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	4413      	add	r3, r2
 8000708:	011b      	lsls	r3, r3, #4
 800070a:	440b      	add	r3, r1
 800070c:	3340      	adds	r3, #64	@ 0x40
 800070e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000712:	4613      	mov	r3, r2
 8000714:	1ac1      	subs	r1, r0, r3
 8000716:	4848      	ldr	r0, [pc, #288]	@ (8000838 <DIO_Button_Poll+0x314>)
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	4613      	mov	r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	4413      	add	r3, r2
 8000720:	011b      	lsls	r3, r3, #4
 8000722:	4403      	add	r3, r0
 8000724:	3338      	adds	r3, #56	@ 0x38
 8000726:	6019      	str	r1, [r3, #0]
				break;
 8000728:	e183      	b.n	8000a32 <DIO_Button_Poll+0x50e>
					if(TMR_Elapsed(sDIOTable[i].pressed_timer) >= 50000UL){ // 50 ms
 800072a:	4943      	ldr	r1, [pc, #268]	@ (8000838 <DIO_Button_Poll+0x314>)
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	4613      	mov	r3, r2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	4413      	add	r3, r2
 8000734:	011b      	lsls	r3, r3, #4
 8000736:	440b      	add	r3, r1
 8000738:	3340      	adds	r3, #64	@ 0x40
 800073a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800073e:	4610      	mov	r0, r2
 8000740:	4619      	mov	r1, r3
 8000742:	f000 fda0 	bl	8001286 <TMR_Elapsed>
 8000746:	4602      	mov	r2, r0
 8000748:	460b      	mov	r3, r1
 800074a:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800074e:	428a      	cmp	r2, r1
 8000750:	f173 0300 	sbcs.w	r3, r3, #0
 8000754:	f0c0 816d 	bcc.w	8000a32 <DIO_Button_Poll+0x50e>
						sDIOTable[i].state = eSTATE_Short_Press;
 8000758:	4937      	ldr	r1, [pc, #220]	@ (8000838 <DIO_Button_Poll+0x314>)
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	4613      	mov	r3, r2
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4413      	add	r3, r2
 8000762:	011b      	lsls	r3, r3, #4
 8000764:	440b      	add	r3, r1
 8000766:	3334      	adds	r3, #52	@ 0x34
 8000768:	2202      	movs	r2, #2
 800076a:	701a      	strb	r2, [r3, #0]
						sDIOTable[i].real_state = eSTATE_Short_Press;
 800076c:	4932      	ldr	r1, [pc, #200]	@ (8000838 <DIO_Button_Poll+0x314>)
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	4613      	mov	r3, r2
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4413      	add	r3, r2
 8000776:	011b      	lsls	r3, r3, #4
 8000778:	440b      	add	r3, r1
 800077a:	3335      	adds	r3, #53	@ 0x35
 800077c:	2202      	movs	r2, #2
 800077e:	701a      	strb	r2, [r3, #0]
				break;
 8000780:	e157      	b.n	8000a32 <DIO_Button_Poll+0x50e>
			case eSTATE_Released:
				if(current_state == true){
 8000782:	78fb      	ldrb	r3, [r7, #3]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d020      	beq.n	80007ca <DIO_Button_Poll+0x2a6>
					sDIOTable[i].state = eSTATE_Pressed;
 8000788:	492b      	ldr	r1, [pc, #172]	@ (8000838 <DIO_Button_Poll+0x314>)
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	4613      	mov	r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4413      	add	r3, r2
 8000792:	011b      	lsls	r3, r3, #4
 8000794:	440b      	add	r3, r1
 8000796:	3334      	adds	r3, #52	@ 0x34
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
					sDIOTable[i].real_state = eSTATE_Pressed;
 800079c:	4926      	ldr	r1, [pc, #152]	@ (8000838 <DIO_Button_Poll+0x314>)
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	4613      	mov	r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	4413      	add	r3, r2
 80007a6:	011b      	lsls	r3, r3, #4
 80007a8:	440b      	add	r3, r1
 80007aa:	3335      	adds	r3, #53	@ 0x35
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
					sDIOTable[i].pressed_timer = TMR_Now();
 80007b0:	f000 fd1c 	bl	80011ec <TMR_Now>
 80007b4:	4c20      	ldr	r4, [pc, #128]	@ (8000838 <DIO_Button_Poll+0x314>)
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	4613      	mov	r3, r2
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4413      	add	r3, r2
 80007be:	011b      	lsls	r3, r3, #4
 80007c0:	4423      	add	r3, r4
 80007c2:	3340      	adds	r3, #64	@ 0x40
 80007c4:	e9c3 0100 	strd	r0, r1, [r3]
				}else{
					sDIOTable[i].released_timer = TMR_Now();
				}
				break;
 80007c8:	e138      	b.n	8000a3c <DIO_Button_Poll+0x518>
					sDIOTable[i].released_timer = TMR_Now();
 80007ca:	f000 fd0f 	bl	80011ec <TMR_Now>
 80007ce:	4c1a      	ldr	r4, [pc, #104]	@ (8000838 <DIO_Button_Poll+0x314>)
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	4613      	mov	r3, r2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	4413      	add	r3, r2
 80007d8:	011b      	lsls	r3, r3, #4
 80007da:	4423      	add	r3, r4
 80007dc:	3348      	adds	r3, #72	@ 0x48
 80007de:	e9c3 0100 	strd	r0, r1, [r3]
				break;
 80007e2:	e12b      	b.n	8000a3c <DIO_Button_Poll+0x518>
			case eSTATE_Short_Press:
				if(current_state == false){
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	f083 0301 	eor.w	r3, r3, #1
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d074      	beq.n	80008da <DIO_Button_Poll+0x3b6>
					if(sDIOTable[i].real_state != eSTATE_Released){
 80007f0:	4911      	ldr	r1, [pc, #68]	@ (8000838 <DIO_Button_Poll+0x314>)
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	4613      	mov	r3, r2
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	4413      	add	r3, r2
 80007fa:	011b      	lsls	r3, r3, #4
 80007fc:	440b      	add	r3, r1
 80007fe:	3335      	adds	r3, #53	@ 0x35
 8000800:	f993 3000 	ldrsb.w	r3, [r3]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d019      	beq.n	800083c <DIO_Button_Poll+0x318>
						sDIOTable[i].released_timer = TMR_Now();
 8000808:	f000 fcf0 	bl	80011ec <TMR_Now>
 800080c:	4c0a      	ldr	r4, [pc, #40]	@ (8000838 <DIO_Button_Poll+0x314>)
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	4613      	mov	r3, r2
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	4413      	add	r3, r2
 8000816:	011b      	lsls	r3, r3, #4
 8000818:	4423      	add	r3, r4
 800081a:	3348      	adds	r3, #72	@ 0x48
 800081c:	e9c3 0100 	strd	r0, r1, [r3]
						sDIOTable[i].real_state = eSTATE_Released;
 8000820:	4905      	ldr	r1, [pc, #20]	@ (8000838 <DIO_Button_Poll+0x314>)
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	4613      	mov	r3, r2
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	4413      	add	r3, r2
 800082a:	011b      	lsls	r3, r3, #4
 800082c:	440b      	add	r3, r1
 800082e:	3335      	adds	r3, #53	@ 0x35
 8000830:	2201      	movs	r2, #1
 8000832:	701a      	strb	r2, [r3, #0]
					if(TMR_Elapsed(sDIOTable[i].pressed_timer) >= 3000000UL){ // 3 secondes
						sDIOTable[i].state = eSTATE_Long_Press;
						sDIOTable[i].real_state = eSTATE_Long_Press;
					}
				}
				break;
 8000834:	e0ff      	b.n	8000a36 <DIO_Button_Poll+0x512>
 8000836:	bf00      	nop
 8000838:	20000000 	.word	0x20000000
					else if(sDIOTable[i].real_state == eSTATE_Released && TMR_Elapsed(sDIOTable[i].released_timer) > 50000){
 800083c:	4985      	ldr	r1, [pc, #532]	@ (8000a54 <DIO_Button_Poll+0x530>)
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	4613      	mov	r3, r2
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	4413      	add	r3, r2
 8000846:	011b      	lsls	r3, r3, #4
 8000848:	440b      	add	r3, r1
 800084a:	3335      	adds	r3, #53	@ 0x35
 800084c:	f993 3000 	ldrsb.w	r3, [r3]
 8000850:	2b01      	cmp	r3, #1
 8000852:	f040 80f0 	bne.w	8000a36 <DIO_Button_Poll+0x512>
 8000856:	497f      	ldr	r1, [pc, #508]	@ (8000a54 <DIO_Button_Poll+0x530>)
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	4613      	mov	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	4413      	add	r3, r2
 8000860:	011b      	lsls	r3, r3, #4
 8000862:	440b      	add	r3, r1
 8000864:	3348      	adds	r3, #72	@ 0x48
 8000866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800086a:	4610      	mov	r0, r2
 800086c:	4619      	mov	r1, r3
 800086e:	f000 fd0a 	bl	8001286 <TMR_Elapsed>
 8000872:	4602      	mov	r2, r0
 8000874:	460b      	mov	r3, r1
 8000876:	f24c 3151 	movw	r1, #50001	@ 0xc351
 800087a:	428a      	cmp	r2, r1
 800087c:	f173 0300 	sbcs.w	r3, r3, #0
 8000880:	f0c0 80d9 	bcc.w	8000a36 <DIO_Button_Poll+0x512>
						sDIOTable[i].state = eSTATE_Released;
 8000884:	4973      	ldr	r1, [pc, #460]	@ (8000a54 <DIO_Button_Poll+0x530>)
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	4613      	mov	r3, r2
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	4413      	add	r3, r2
 800088e:	011b      	lsls	r3, r3, #4
 8000890:	440b      	add	r3, r1
 8000892:	3334      	adds	r3, #52	@ 0x34
 8000894:	2201      	movs	r2, #1
 8000896:	701a      	strb	r2, [r3, #0]
						sDIOTable[i].press_time = sDIOTable[i].released_timer - sDIOTable[i].pressed_timer;
 8000898:	496e      	ldr	r1, [pc, #440]	@ (8000a54 <DIO_Button_Poll+0x530>)
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	4613      	mov	r3, r2
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	4413      	add	r3, r2
 80008a2:	011b      	lsls	r3, r3, #4
 80008a4:	440b      	add	r3, r1
 80008a6:	3348      	adds	r3, #72	@ 0x48
 80008a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008ac:	4610      	mov	r0, r2
 80008ae:	4969      	ldr	r1, [pc, #420]	@ (8000a54 <DIO_Button_Poll+0x530>)
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	4613      	mov	r3, r2
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	4413      	add	r3, r2
 80008b8:	011b      	lsls	r3, r3, #4
 80008ba:	440b      	add	r3, r1
 80008bc:	3340      	adds	r3, #64	@ 0x40
 80008be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008c2:	4613      	mov	r3, r2
 80008c4:	1ac1      	subs	r1, r0, r3
 80008c6:	4863      	ldr	r0, [pc, #396]	@ (8000a54 <DIO_Button_Poll+0x530>)
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	4613      	mov	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	4413      	add	r3, r2
 80008d0:	011b      	lsls	r3, r3, #4
 80008d2:	4403      	add	r3, r0
 80008d4:	3338      	adds	r3, #56	@ 0x38
 80008d6:	6019      	str	r1, [r3, #0]
				break;
 80008d8:	e0ad      	b.n	8000a36 <DIO_Button_Poll+0x512>
					if(TMR_Elapsed(sDIOTable[i].pressed_timer) >= 3000000UL){ // 3 secondes
 80008da:	495e      	ldr	r1, [pc, #376]	@ (8000a54 <DIO_Button_Poll+0x530>)
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	4613      	mov	r3, r2
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	4413      	add	r3, r2
 80008e4:	011b      	lsls	r3, r3, #4
 80008e6:	440b      	add	r3, r1
 80008e8:	3340      	adds	r3, #64	@ 0x40
 80008ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008ee:	4610      	mov	r0, r2
 80008f0:	4619      	mov	r1, r3
 80008f2:	f000 fcc8 	bl	8001286 <TMR_Elapsed>
 80008f6:	4602      	mov	r2, r0
 80008f8:	460b      	mov	r3, r1
 80008fa:	4957      	ldr	r1, [pc, #348]	@ (8000a58 <DIO_Button_Poll+0x534>)
 80008fc:	428a      	cmp	r2, r1
 80008fe:	f173 0300 	sbcs.w	r3, r3, #0
 8000902:	f0c0 8098 	bcc.w	8000a36 <DIO_Button_Poll+0x512>
						sDIOTable[i].state = eSTATE_Long_Press;
 8000906:	4953      	ldr	r1, [pc, #332]	@ (8000a54 <DIO_Button_Poll+0x530>)
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	4613      	mov	r3, r2
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	4413      	add	r3, r2
 8000910:	011b      	lsls	r3, r3, #4
 8000912:	440b      	add	r3, r1
 8000914:	3334      	adds	r3, #52	@ 0x34
 8000916:	2203      	movs	r2, #3
 8000918:	701a      	strb	r2, [r3, #0]
						sDIOTable[i].real_state = eSTATE_Long_Press;
 800091a:	494e      	ldr	r1, [pc, #312]	@ (8000a54 <DIO_Button_Poll+0x530>)
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	4613      	mov	r3, r2
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	4413      	add	r3, r2
 8000924:	011b      	lsls	r3, r3, #4
 8000926:	440b      	add	r3, r1
 8000928:	3335      	adds	r3, #53	@ 0x35
 800092a:	2203      	movs	r2, #3
 800092c:	701a      	strb	r2, [r3, #0]
				break;
 800092e:	e082      	b.n	8000a36 <DIO_Button_Poll+0x512>
			case eSTATE_Long_Press:
				if(current_state == false){
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	f083 0301 	eor.w	r3, r3, #1
 8000936:	b2db      	uxtb	r3, r3
 8000938:	2b00      	cmp	r3, #0
 800093a:	d07e      	beq.n	8000a3a <DIO_Button_Poll+0x516>
					if(sDIOTable[i].real_state != eSTATE_Released){
 800093c:	4945      	ldr	r1, [pc, #276]	@ (8000a54 <DIO_Button_Poll+0x530>)
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	4613      	mov	r3, r2
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	011b      	lsls	r3, r3, #4
 8000948:	440b      	add	r3, r1
 800094a:	3335      	adds	r3, #53	@ 0x35
 800094c:	f993 3000 	ldrsb.w	r3, [r3]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d016      	beq.n	8000982 <DIO_Button_Poll+0x45e>
						sDIOTable[i].released_timer = TMR_Now();
 8000954:	f000 fc4a 	bl	80011ec <TMR_Now>
 8000958:	4c3e      	ldr	r4, [pc, #248]	@ (8000a54 <DIO_Button_Poll+0x530>)
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	4613      	mov	r3, r2
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	4413      	add	r3, r2
 8000962:	011b      	lsls	r3, r3, #4
 8000964:	4423      	add	r3, r4
 8000966:	3348      	adds	r3, #72	@ 0x48
 8000968:	e9c3 0100 	strd	r0, r1, [r3]
						sDIOTable[i].real_state = eSTATE_Released;
 800096c:	4939      	ldr	r1, [pc, #228]	@ (8000a54 <DIO_Button_Poll+0x530>)
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	4613      	mov	r3, r2
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	4413      	add	r3, r2
 8000976:	011b      	lsls	r3, r3, #4
 8000978:	440b      	add	r3, r1
 800097a:	3335      	adds	r3, #53	@ 0x35
 800097c:	2201      	movs	r2, #1
 800097e:	701a      	strb	r2, [r3, #0]
						sDIOTable[i].state = eSTATE_Released;
						sDIOTable[i].press_time = sDIOTable[i].released_timer - sDIOTable[i].pressed_timer;
					}
				}else{
				}
				break;
 8000980:	e05b      	b.n	8000a3a <DIO_Button_Poll+0x516>
					else if(sDIOTable[i].real_state == eSTATE_Released && TMR_Elapsed(sDIOTable[i].released_timer) > 50000){
 8000982:	4934      	ldr	r1, [pc, #208]	@ (8000a54 <DIO_Button_Poll+0x530>)
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	4613      	mov	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	4413      	add	r3, r2
 800098c:	011b      	lsls	r3, r3, #4
 800098e:	440b      	add	r3, r1
 8000990:	3335      	adds	r3, #53	@ 0x35
 8000992:	f993 3000 	ldrsb.w	r3, [r3]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d14f      	bne.n	8000a3a <DIO_Button_Poll+0x516>
 800099a:	492e      	ldr	r1, [pc, #184]	@ (8000a54 <DIO_Button_Poll+0x530>)
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	011b      	lsls	r3, r3, #4
 80009a6:	440b      	add	r3, r1
 80009a8:	3348      	adds	r3, #72	@ 0x48
 80009aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	f000 fc68 	bl	8001286 <TMR_Elapsed>
 80009b6:	4602      	mov	r2, r0
 80009b8:	460b      	mov	r3, r1
 80009ba:	f24c 3151 	movw	r1, #50001	@ 0xc351
 80009be:	428a      	cmp	r2, r1
 80009c0:	f173 0300 	sbcs.w	r3, r3, #0
 80009c4:	d339      	bcc.n	8000a3a <DIO_Button_Poll+0x516>
						sDIOTable[i].state = eSTATE_Released;
 80009c6:	4923      	ldr	r1, [pc, #140]	@ (8000a54 <DIO_Button_Poll+0x530>)
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	4613      	mov	r3, r2
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	4413      	add	r3, r2
 80009d0:	011b      	lsls	r3, r3, #4
 80009d2:	440b      	add	r3, r1
 80009d4:	3334      	adds	r3, #52	@ 0x34
 80009d6:	2201      	movs	r2, #1
 80009d8:	701a      	strb	r2, [r3, #0]
						sDIOTable[i].press_time = sDIOTable[i].released_timer - sDIOTable[i].pressed_timer;
 80009da:	491e      	ldr	r1, [pc, #120]	@ (8000a54 <DIO_Button_Poll+0x530>)
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	4613      	mov	r3, r2
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	4413      	add	r3, r2
 80009e4:	011b      	lsls	r3, r3, #4
 80009e6:	440b      	add	r3, r1
 80009e8:	3348      	adds	r3, #72	@ 0x48
 80009ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009ee:	4610      	mov	r0, r2
 80009f0:	4918      	ldr	r1, [pc, #96]	@ (8000a54 <DIO_Button_Poll+0x530>)
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	4613      	mov	r3, r2
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	4413      	add	r3, r2
 80009fa:	011b      	lsls	r3, r3, #4
 80009fc:	440b      	add	r3, r1
 80009fe:	3340      	adds	r3, #64	@ 0x40
 8000a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a04:	4613      	mov	r3, r2
 8000a06:	1ac1      	subs	r1, r0, r3
 8000a08:	4812      	ldr	r0, [pc, #72]	@ (8000a54 <DIO_Button_Poll+0x530>)
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	4413      	add	r3, r2
 8000a12:	011b      	lsls	r3, r3, #4
 8000a14:	4403      	add	r3, r0
 8000a16:	3338      	adds	r3, #56	@ 0x38
 8000a18:	6019      	str	r1, [r3, #0]
				break;
 8000a1a:	e00e      	b.n	8000a3a <DIO_Button_Poll+0x516>
			default:
				sDIOTable[i].state = eSTATE_Uknown;
 8000a1c:	490d      	ldr	r1, [pc, #52]	@ (8000a54 <DIO_Button_Poll+0x530>)
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	4613      	mov	r3, r2
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	4413      	add	r3, r2
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	440b      	add	r3, r1
 8000a2a:	3334      	adds	r3, #52	@ 0x34
 8000a2c:	22ff      	movs	r2, #255	@ 0xff
 8000a2e:	701a      	strb	r2, [r3, #0]
				break;
 8000a30:	e004      	b.n	8000a3c <DIO_Button_Poll+0x518>
				break;
 8000a32:	bf00      	nop
 8000a34:	e002      	b.n	8000a3c <DIO_Button_Poll+0x518>
				break;
 8000a36:	bf00      	nop
 8000a38:	e000      	b.n	8000a3c <DIO_Button_Poll+0x518>
				break;
 8000a3a:	bf00      	nop
	for(int i = 0;i < eID_DIO_MAX ;i++){
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b05      	cmp	r3, #5
 8000a46:	f77f ad73 	ble.w	8000530 <DIO_Button_Poll+0xc>
			}
		}
	}
}
 8000a4a:	bf00      	nop
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	20000000 	.word	0x20000000
 8000a58:	002dc6c0 	.word	0x002dc6c0

08000a5c <DIO_GPIO_CLK_ENABLE>:
void DIO_GPIO_CLK_ENABLE(uint32_t sGPIO){
 8000a5c:	b480      	push	{r7}
 8000a5e:	b08b      	sub	sp, #44	@ 0x2c
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

	switch(sGPIO){
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a5f      	ldr	r2, [pc, #380]	@ (8000be4 <DIO_GPIO_CLK_ENABLE+0x188>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	f000 80a5 	beq.w	8000bb8 <DIO_GPIO_CLK_ENABLE+0x15c>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a5c      	ldr	r2, [pc, #368]	@ (8000be4 <DIO_GPIO_CLK_ENABLE+0x188>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	f200 80af 	bhi.w	8000bd6 <DIO_GPIO_CLK_ENABLE+0x17a>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a5b      	ldr	r2, [pc, #364]	@ (8000be8 <DIO_GPIO_CLK_ENABLE+0x18c>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	f000 808c 	beq.w	8000b9a <DIO_GPIO_CLK_ENABLE+0x13e>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a58      	ldr	r2, [pc, #352]	@ (8000be8 <DIO_GPIO_CLK_ENABLE+0x18c>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	f200 80a5 	bhi.w	8000bd6 <DIO_GPIO_CLK_ENABLE+0x17a>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a57      	ldr	r2, [pc, #348]	@ (8000bec <DIO_GPIO_CLK_ENABLE+0x190>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d073      	beq.n	8000b7c <DIO_GPIO_CLK_ENABLE+0x120>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a55      	ldr	r2, [pc, #340]	@ (8000bec <DIO_GPIO_CLK_ENABLE+0x190>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	f200 809c 	bhi.w	8000bd6 <DIO_GPIO_CLK_ENABLE+0x17a>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a53      	ldr	r2, [pc, #332]	@ (8000bf0 <DIO_GPIO_CLK_ENABLE+0x194>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d05b      	beq.n	8000b5e <DIO_GPIO_CLK_ENABLE+0x102>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a51      	ldr	r2, [pc, #324]	@ (8000bf0 <DIO_GPIO_CLK_ENABLE+0x194>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	f200 8093 	bhi.w	8000bd6 <DIO_GPIO_CLK_ENABLE+0x17a>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a50      	ldr	r2, [pc, #320]	@ (8000bf4 <DIO_GPIO_CLK_ENABLE+0x198>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d043      	beq.n	8000b40 <DIO_GPIO_CLK_ENABLE+0xe4>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a4e      	ldr	r2, [pc, #312]	@ (8000bf4 <DIO_GPIO_CLK_ENABLE+0x198>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	f200 808a 	bhi.w	8000bd6 <DIO_GPIO_CLK_ENABLE+0x17a>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a4c      	ldr	r2, [pc, #304]	@ (8000bf8 <DIO_GPIO_CLK_ENABLE+0x19c>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d02b      	beq.n	8000b22 <DIO_GPIO_CLK_ENABLE+0xc6>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a4a      	ldr	r2, [pc, #296]	@ (8000bf8 <DIO_GPIO_CLK_ENABLE+0x19c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	f200 8081 	bhi.w	8000bd6 <DIO_GPIO_CLK_ENABLE+0x17a>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a49      	ldr	r2, [pc, #292]	@ (8000bfc <DIO_GPIO_CLK_ENABLE+0x1a0>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d004      	beq.n	8000ae6 <DIO_GPIO_CLK_ENABLE+0x8a>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a48      	ldr	r2, [pc, #288]	@ (8000c00 <DIO_GPIO_CLK_ENABLE+0x1a4>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d00f      	beq.n	8000b04 <DIO_GPIO_CLK_ENABLE+0xa8>
		break;
	case (uint32_t)GPIOH:
		  __HAL_RCC_GPIOH_CLK_ENABLE();
		break;
	}
}
 8000ae4:	e077      	b.n	8000bd6 <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000aea:	4b46      	ldr	r3, [pc, #280]	@ (8000c04 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a45      	ldr	r2, [pc, #276]	@ (8000c04 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b43      	ldr	r3, [pc, #268]	@ (8000c04 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
		break;
 8000b02:	e068      	b.n	8000bd6 <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
 8000b08:	4b3e      	ldr	r3, [pc, #248]	@ (8000c04 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0c:	4a3d      	ldr	r2, [pc, #244]	@ (8000c04 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000b0e:	f043 0302 	orr.w	r3, r3, #2
 8000b12:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b14:	4b3b      	ldr	r3, [pc, #236]	@ (8000c04 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b18:	f003 0302 	and.w	r3, r3, #2
 8000b1c:	623b      	str	r3, [r7, #32]
 8000b1e:	6a3b      	ldr	r3, [r7, #32]
		break;
 8000b20:	e059      	b.n	8000bd6 <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
 8000b26:	4b37      	ldr	r3, [pc, #220]	@ (8000c04 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a36      	ldr	r2, [pc, #216]	@ (8000c04 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000b2c:	f043 0304 	orr.w	r3, r3, #4
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b34      	ldr	r3, [pc, #208]	@ (8000c04 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	61fb      	str	r3, [r7, #28]
 8000b3c:	69fb      	ldr	r3, [r7, #28]
		break;
 8000b3e:	e04a      	b.n	8000bd6 <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	61bb      	str	r3, [r7, #24]
 8000b44:	4b2f      	ldr	r3, [pc, #188]	@ (8000c04 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b48:	4a2e      	ldr	r2, [pc, #184]	@ (8000c04 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000b4a:	f043 0308 	orr.w	r3, r3, #8
 8000b4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b50:	4b2c      	ldr	r3, [pc, #176]	@ (8000c04 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b54:	f003 0308 	and.w	r3, r3, #8
 8000b58:	61bb      	str	r3, [r7, #24]
 8000b5a:	69bb      	ldr	r3, [r7, #24]
		break;
 8000b5c:	e03b      	b.n	8000bd6 <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	4b28      	ldr	r3, [pc, #160]	@ (8000c04 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a27      	ldr	r2, [pc, #156]	@ (8000c04 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000b68:	f043 0310 	orr.w	r3, r3, #16
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b25      	ldr	r3, [pc, #148]	@ (8000c04 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0310 	and.w	r3, r3, #16
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697b      	ldr	r3, [r7, #20]
		break;
 8000b7a:	e02c      	b.n	8000bd6 <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	4b20      	ldr	r3, [pc, #128]	@ (8000c04 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b84:	4a1f      	ldr	r2, [pc, #124]	@ (8000c04 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000b86:	f043 0320 	orr.w	r3, r3, #32
 8000b8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c04 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b90:	f003 0320 	and.w	r3, r3, #32
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	693b      	ldr	r3, [r7, #16]
		break;
 8000b98:	e01d      	b.n	8000bd6 <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b19      	ldr	r3, [pc, #100]	@ (8000c04 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a18      	ldr	r2, [pc, #96]	@ (8000c04 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000ba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b16      	ldr	r3, [pc, #88]	@ (8000c04 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
		break;
 8000bb6:	e00e      	b.n	8000bd6 <DIO_GPIO_CLK_ENABLE+0x17a>
		  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc0:	4a10      	ldr	r2, [pc, #64]	@ (8000c04 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c04 <DIO_GPIO_CLK_ENABLE+0x1a8>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
		break;
 8000bd4:	bf00      	nop
}
 8000bd6:	bf00      	nop
 8000bd8:	372c      	adds	r7, #44	@ 0x2c
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40021c00 	.word	0x40021c00
 8000be8:	40021800 	.word	0x40021800
 8000bec:	40021400 	.word	0x40021400
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40020c00 	.word	0x40020c00
 8000bf8:	40020800 	.word	0x40020800
 8000bfc:	40020000 	.word	0x40020000
 8000c00:	40020400 	.word	0x40020400
 8000c04:	40023800 	.word	0x40023800

08000c08 <DIO_Init>:

bool DIO_Init(void){
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b087      	sub	sp, #28
 8000c0c:	af00      	add	r7, sp, #0
	for(int i = 0;i < eID_DIO_MAX ;i++){
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	e0b6      	b.n	8000d82 <DIO_Init+0x17a>
		  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	463b      	mov	r3, r7
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]
		  GPIO_InitStruct.Pin = sDIOTable[i].pin;
 8000c22:	495c      	ldr	r1, [pc, #368]	@ (8000d94 <DIO_Init+0x18c>)
 8000c24:	697a      	ldr	r2, [r7, #20]
 8000c26:	4613      	mov	r3, r2
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	4413      	add	r3, r2
 8000c2c:	011b      	lsls	r3, r3, #4
 8000c2e:	440b      	add	r3, r1
 8000c30:	331c      	adds	r3, #28
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	603b      	str	r3, [r7, #0]
		  GPIO_InitStruct.Mode = sDIOTable[i].mode;
 8000c36:	4957      	ldr	r1, [pc, #348]	@ (8000d94 <DIO_Init+0x18c>)
 8000c38:	697a      	ldr	r2, [r7, #20]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	4413      	add	r3, r2
 8000c40:	011b      	lsls	r3, r3, #4
 8000c42:	440b      	add	r3, r1
 8000c44:	3320      	adds	r3, #32
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	607b      	str	r3, [r7, #4]
		  GPIO_InitStruct.Pull = sDIOTable[i].pull;
 8000c4a:	4952      	ldr	r1, [pc, #328]	@ (8000d94 <DIO_Init+0x18c>)
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	4413      	add	r3, r2
 8000c54:	011b      	lsls	r3, r3, #4
 8000c56:	440b      	add	r3, r1
 8000c58:	3324      	adds	r3, #36	@ 0x24
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStruct.Alternate = sDIOTable[i].alternate;
 8000c5e:	494d      	ldr	r1, [pc, #308]	@ (8000d94 <DIO_Init+0x18c>)
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	4613      	mov	r3, r2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	4413      	add	r3, r2
 8000c68:	011b      	lsls	r3, r3, #4
 8000c6a:	440b      	add	r3, r1
 8000c6c:	332c      	adds	r3, #44	@ 0x2c
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	613b      	str	r3, [r7, #16]
		  GPIO_InitStruct.Speed = sDIOTable[i].speed;
 8000c72:	4948      	ldr	r1, [pc, #288]	@ (8000d94 <DIO_Init+0x18c>)
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	4613      	mov	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	4413      	add	r3, r2
 8000c7c:	011b      	lsls	r3, r3, #4
 8000c7e:	440b      	add	r3, r1
 8000c80:	3328      	adds	r3, #40	@ 0x28
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	60fb      	str	r3, [r7, #12]
		  sDIOTable[i].state = eSTATE_Uknown;
 8000c86:	4943      	ldr	r1, [pc, #268]	@ (8000d94 <DIO_Init+0x18c>)
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	4413      	add	r3, r2
 8000c90:	011b      	lsls	r3, r3, #4
 8000c92:	440b      	add	r3, r1
 8000c94:	3334      	adds	r3, #52	@ 0x34
 8000c96:	22ff      	movs	r2, #255	@ 0xff
 8000c98:	701a      	strb	r2, [r3, #0]
		  sDIOTable[i].press_time = 0;
 8000c9a:	493e      	ldr	r1, [pc, #248]	@ (8000d94 <DIO_Init+0x18c>)
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4413      	add	r3, r2
 8000ca4:	011b      	lsls	r3, r3, #4
 8000ca6:	440b      	add	r3, r1
 8000ca8:	3338      	adds	r3, #56	@ 0x38
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
		  sDIOTable[i].pressed_timer = 0;
 8000cae:	4939      	ldr	r1, [pc, #228]	@ (8000d94 <DIO_Init+0x18c>)
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	4413      	add	r3, r2
 8000cb8:	011b      	lsls	r3, r3, #4
 8000cba:	440b      	add	r3, r1
 8000cbc:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8000cc0:	f04f 0200 	mov.w	r2, #0
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e9c1 2300 	strd	r2, r3, [r1]
		  sDIOTable[i].released_timer = 0;
 8000ccc:	4931      	ldr	r1, [pc, #196]	@ (8000d94 <DIO_Init+0x18c>)
 8000cce:	697a      	ldr	r2, [r7, #20]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	011b      	lsls	r3, r3, #4
 8000cd8:	440b      	add	r3, r1
 8000cda:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8000cde:	f04f 0200 	mov.w	r2, #0
 8000ce2:	f04f 0300 	mov.w	r3, #0
 8000ce6:	e9c1 2300 	strd	r2, r3, [r1]

		  DIO_GPIO_CLK_ENABLE(sDIOTable[i].gpio);
 8000cea:	492a      	ldr	r1, [pc, #168]	@ (8000d94 <DIO_Init+0x18c>)
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4413      	add	r3, r2
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	440b      	add	r3, r1
 8000cf8:	3318      	adds	r3, #24
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fead 	bl	8000a5c <DIO_GPIO_CLK_ENABLE>

		  HAL_GPIO_Init(sDIOTable[i].gpio, &GPIO_InitStruct);
 8000d02:	4924      	ldr	r1, [pc, #144]	@ (8000d94 <DIO_Init+0x18c>)
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	4613      	mov	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	4413      	add	r3, r2
 8000d0c:	011b      	lsls	r3, r3, #4
 8000d0e:	440b      	add	r3, r1
 8000d10:	3318      	adds	r3, #24
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	463b      	mov	r3, r7
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4610      	mov	r0, r2
 8000d1c:	f000 fd92 	bl	8001844 <HAL_GPIO_Init>
		  if(sDIOTable[i].default_value != -1)
 8000d20:	491c      	ldr	r1, [pc, #112]	@ (8000d94 <DIO_Init+0x18c>)
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	4613      	mov	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	011b      	lsls	r3, r3, #4
 8000d2c:	440b      	add	r3, r1
 8000d2e:	3330      	adds	r3, #48	@ 0x30
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d36:	d021      	beq.n	8000d7c <DIO_Init+0x174>
			  HAL_GPIO_WritePin(sDIOTable[i].gpio, sDIOTable[i].pin, sDIOTable[i].default_value);
 8000d38:	4916      	ldr	r1, [pc, #88]	@ (8000d94 <DIO_Init+0x18c>)
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4413      	add	r3, r2
 8000d42:	011b      	lsls	r3, r3, #4
 8000d44:	440b      	add	r3, r1
 8000d46:	3318      	adds	r3, #24
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	461c      	mov	r4, r3
 8000d4c:	4911      	ldr	r1, [pc, #68]	@ (8000d94 <DIO_Init+0x18c>)
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	011b      	lsls	r3, r3, #4
 8000d58:	440b      	add	r3, r1
 8000d5a:	331c      	adds	r3, #28
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	b299      	uxth	r1, r3
 8000d60:	480c      	ldr	r0, [pc, #48]	@ (8000d94 <DIO_Init+0x18c>)
 8000d62:	697a      	ldr	r2, [r7, #20]
 8000d64:	4613      	mov	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	011b      	lsls	r3, r3, #4
 8000d6c:	4403      	add	r3, r0
 8000d6e:	3330      	adds	r3, #48	@ 0x30
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	461a      	mov	r2, r3
 8000d76:	4620      	mov	r0, r4
 8000d78:	f000 ff18 	bl	8001bac <HAL_GPIO_WritePin>
	for(int i = 0;i < eID_DIO_MAX ;i++){
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	2b05      	cmp	r3, #5
 8000d86:	f77f af45 	ble.w	8000c14 <DIO_Init+0xc>
	}
}
 8000d8a:	bf00      	nop
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	371c      	adds	r7, #28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd90      	pop	{r4, r7, pc}
 8000d94:	20000000 	.word	0x20000000

08000d98 <DI_Read>:
bool DI_Read(eDIO_ID input_index){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
	if(input_index > eID_DIO_MAX) return false;
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b06      	cmp	r3, #6
 8000da6:	d901      	bls.n	8000dac <DI_Read+0x14>
 8000da8:	2300      	movs	r3, #0
 8000daa:	e01c      	b.n	8000de6 <DI_Read+0x4e>
	return (HAL_GPIO_ReadPin(sDIOTable[input_index].gpio ,sDIOTable[input_index].pin ) == GPIO_PIN_SET);
 8000dac:	79fa      	ldrb	r2, [r7, #7]
 8000dae:	4910      	ldr	r1, [pc, #64]	@ (8000df0 <DI_Read+0x58>)
 8000db0:	4613      	mov	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	011b      	lsls	r3, r3, #4
 8000db8:	440b      	add	r3, r1
 8000dba:	3318      	adds	r3, #24
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	79fa      	ldrb	r2, [r7, #7]
 8000dc2:	490b      	ldr	r1, [pc, #44]	@ (8000df0 <DI_Read+0x58>)
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	440b      	add	r3, r1
 8000dce:	331c      	adds	r3, #28
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f000 fed1 	bl	8001b7c <HAL_GPIO_ReadPin>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	bf0c      	ite	eq
 8000de0:	2301      	moveq	r3, #1
 8000de2:	2300      	movne	r3, #0
 8000de4:	b2db      	uxtb	r3, r3
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000000 	.word	0x20000000

08000df4 <DO_Write>:

bool DO_Write(eDIO_ID output_index,uint32_t value){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]

	if(output_index > eID_DIO_MAX) return false;
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d901      	bls.n	8000e0a <DO_Write+0x16>
 8000e06:	2300      	movs	r3, #0
 8000e08:	e018      	b.n	8000e3c <DO_Write+0x48>
	  HAL_GPIO_WritePin(sDIOTable[output_index].gpio , sDIOTable[output_index].pin , value);
 8000e0a:	79fa      	ldrb	r2, [r7, #7]
 8000e0c:	490d      	ldr	r1, [pc, #52]	@ (8000e44 <DO_Write+0x50>)
 8000e0e:	4613      	mov	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	011b      	lsls	r3, r3, #4
 8000e16:	440b      	add	r3, r1
 8000e18:	3318      	adds	r3, #24
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	79fa      	ldrb	r2, [r7, #7]
 8000e20:	4908      	ldr	r1, [pc, #32]	@ (8000e44 <DO_Write+0x50>)
 8000e22:	4613      	mov	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4413      	add	r3, r2
 8000e28:	011b      	lsls	r3, r3, #4
 8000e2a:	440b      	add	r3, r1
 8000e2c:	331c      	adds	r3, #28
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	4619      	mov	r1, r3
 8000e38:	f000 feb8 	bl	8001bac <HAL_GPIO_WritePin>
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000000 	.word	0x20000000

08000e48 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	DIO_Init();
 8000e4c:	f7ff fedc 	bl	8000c08 <DIO_Init>

}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b08f      	sub	sp, #60	@ 0x3c
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

    bool data_sent = false;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    char data[20] = "hello world\n\r";
 8000e60:	4b32      	ldr	r3, [pc, #200]	@ (8000f2c <main+0xd8>)
 8000e62:	f107 0410 	add.w	r4, r7, #16
 8000e66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e68:	c407      	stmia	r4!, {r0, r1, r2}
 8000e6a:	8023      	strh	r3, [r4, #0]
 8000e6c:	f107 031e 	add.w	r3, r7, #30
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	809a      	strh	r2, [r3, #4]
    char data2[10] = "s =          \n\r";
 8000e76:	4a2e      	ldr	r2, [pc, #184]	@ (8000f30 <main+0xdc>)
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e7c:	c303      	stmia	r3!, {r0, r1}
 8000e7e:	801a      	strh	r2, [r3, #0]
    char cntr = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint64_t timer = 0;
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	f04f 0300 	mov.w	r3, #0
 8000e8e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e92:	f000 fb53 	bl	800153c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e96:	f000 f84f 	bl	8000f38 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_TIM2_Init();
 8000e9a:	f000 f931 	bl	8001100 <MX_TIM2_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e9e:	f7ff ffd3 	bl	8000e48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ea2:	f000 facb 	bl	800143c <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	DIO_Button_Poll();
 8000ea6:	f7ff fb3d 	bl	8000524 <DIO_Button_Poll>
  	if(TMR_Expired(timer)){
 8000eaa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000eae:	f000 f9d6 	bl	800125e <TMR_Expired>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d015      	beq.n	8000ee4 <main+0x90>
  		timer = TMR_Set(500000);
 8000eb8:	481e      	ldr	r0, [pc, #120]	@ (8000f34 <main+0xe0>)
 8000eba:	f04f 0100 	mov.w	r1, #0
 8000ebe:	f000 f9bb 	bl	8001238 <TMR_Set>
 8000ec2:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
  		if(GPIO_PIN_SET == DI_Read(eID_LED5))
 8000ec6:	2004      	movs	r0, #4
 8000ec8:	f7ff ff66 	bl	8000d98 <DI_Read>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d004      	beq.n	8000edc <main+0x88>
  			DO_Write(eID_LED5,GPIO_PIN_RESET);
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	2004      	movs	r0, #4
 8000ed6:	f7ff ff8d 	bl	8000df4 <DO_Write>
 8000eda:	e003      	b.n	8000ee4 <main+0x90>
  		else
  			DO_Write(eID_LED5,GPIO_PIN_SET);
 8000edc:	2101      	movs	r1, #1
 8000ede:	2004      	movs	r0, #4
 8000ee0:	f7ff ff88 	bl	8000df4 <DO_Write>
  	}
    if(DI_Button_GetState(eID_btn_blue) >= eSTATE_Short_Press){
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f7ff fb05 	bl	80004f4 <DI_Button_GetState>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	dd15      	ble.n	8000f1c <main+0xc8>
		DO_Write(eID_LED4,GPIO_PIN_SET);
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	2002      	movs	r0, #2
 8000ef4:	f7ff ff7e 	bl	8000df4 <DO_Write>
  	  if(data_sent == false){
 8000ef8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000efc:	f083 0301 	eor.w	r3, r3, #1
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0cf      	beq.n	8000ea6 <main+0x52>
  		UART_Send(eID_UART2,data,sizeof(data));
 8000f06:	f107 0310 	add.w	r3, r7, #16
 8000f0a:	2214      	movs	r2, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f000 fa6e 	bl	80013f0 <UART_Send>
  	  	data_sent = true;
 8000f14:	2301      	movs	r3, #1
 8000f16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000f1a:	e7c4      	b.n	8000ea6 <main+0x52>
  	  }

    }
    else{
    	DO_Write(eID_LED4,GPIO_PIN_RESET);
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	2002      	movs	r0, #2
 8000f20:	f7ff ff68 	bl	8000df4 <DO_Write>
    	data_sent = false;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	DIO_Button_Poll();
 8000f2a:	e7bc      	b.n	8000ea6 <main+0x52>
 8000f2c:	08005a8c 	.word	0x08005a8c
 8000f30:	08005aa0 	.word	0x08005aa0
 8000f34:	0007a120 	.word	0x0007a120

08000f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b094      	sub	sp, #80	@ 0x50
 8000f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3e:	f107 0320 	add.w	r3, r7, #32
 8000f42:	2230      	movs	r2, #48	@ 0x30
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f004 fd68 	bl	8005a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	4b28      	ldr	r3, [pc, #160]	@ (8001004 <SystemClock_Config+0xcc>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f64:	4a27      	ldr	r2, [pc, #156]	@ (8001004 <SystemClock_Config+0xcc>)
 8000f66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f6c:	4b25      	ldr	r3, [pc, #148]	@ (8001004 <SystemClock_Config+0xcc>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f78:	2300      	movs	r3, #0
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	4b22      	ldr	r3, [pc, #136]	@ (8001008 <SystemClock_Config+0xd0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a21      	ldr	r2, [pc, #132]	@ (8001008 <SystemClock_Config+0xd0>)
 8000f82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <SystemClock_Config+0xd0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f94:	2301      	movs	r3, #1
 8000f96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fa8:	2308      	movs	r3, #8
 8000faa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000fb0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fb6:	2307      	movs	r3, #7
 8000fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fba:	f107 0320 	add.w	r3, r7, #32
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f002 fbb4 	bl	800372c <HAL_RCC_OscConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fca:	f000 f81f 	bl	800100c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fce:	230f      	movs	r3, #15
 8000fd0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fda:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fde:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fe0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	2105      	movs	r1, #5
 8000fec:	4618      	mov	r0, r3
 8000fee:	f002 fe15 	bl	8003c1c <HAL_RCC_ClockConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ff8:	f000 f808 	bl	800100c <Error_Handler>
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	3750      	adds	r7, #80	@ 0x50
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40023800 	.word	0x40023800
 8001008:	40007000 	.word	0x40007000

0800100c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001010:	b672      	cpsid	i
}
 8001012:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <Error_Handler+0x8>

08001018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <HAL_MspInit+0x4c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001026:	4a0f      	ldr	r2, [pc, #60]	@ (8001064 <HAL_MspInit+0x4c>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800102c:	6453      	str	r3, [r2, #68]	@ 0x44
 800102e:	4b0d      	ldr	r3, [pc, #52]	@ (8001064 <HAL_MspInit+0x4c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <HAL_MspInit+0x4c>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	4a08      	ldr	r2, [pc, #32]	@ (8001064 <HAL_MspInit+0x4c>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001048:	6413      	str	r3, [r2, #64]	@ 0x40
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_MspInit+0x4c>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001056:	2007      	movs	r0, #7
 8001058:	f000 fbb2 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <NMI_Handler+0x4>

08001070 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <MemManage_Handler+0x4>

08001080 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <BusFault_Handler+0x4>

08001088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <UsageFault_Handler+0x4>

08001090 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010be:	f000 fa8f 	bl	80015e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80010cc:	4802      	ldr	r0, [pc, #8]	@ (80010d8 <OTG_FS_IRQHandler+0x10>)
 80010ce:	f000 fd86 	bl	8001bde <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200002c4 	.word	0x200002c4

080010dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <SystemInit+0x20>)
 80010e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010e6:	4a05      	ldr	r2, [pc, #20]	@ (80010fc <SystemInit+0x20>)
 80010e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800111c:	4b1f      	ldr	r3, [pc, #124]	@ (800119c <MX_TIM2_Init+0x9c>)
 800111e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001122:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = (84-1);
 8001124:	4b1d      	ldr	r3, [pc, #116]	@ (800119c <MX_TIM2_Init+0x9c>)
 8001126:	2253      	movs	r2, #83	@ 0x53
 8001128:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112a:	4b1c      	ldr	r3, [pc, #112]	@ (800119c <MX_TIM2_Init+0x9c>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8001130:	4b1a      	ldr	r3, [pc, #104]	@ (800119c <MX_TIM2_Init+0x9c>)
 8001132:	f04f 32ff 	mov.w	r2, #4294967295
 8001136:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001138:	4b18      	ldr	r3, [pc, #96]	@ (800119c <MX_TIM2_Init+0x9c>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b17      	ldr	r3, [pc, #92]	@ (800119c <MX_TIM2_Init+0x9c>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001144:	4815      	ldr	r0, [pc, #84]	@ (800119c <MX_TIM2_Init+0x9c>)
 8001146:	f002 ff89 	bl	800405c <HAL_TIM_Base_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001150:	f7ff ff5c 	bl	800100c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001158:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4619      	mov	r1, r3
 8001160:	480e      	ldr	r0, [pc, #56]	@ (800119c <MX_TIM2_Init+0x9c>)
 8001162:	f003 f92b 	bl	80043bc <HAL_TIM_ConfigClockSource>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800116c:	f7ff ff4e 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001170:	2300      	movs	r3, #0
 8001172:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001178:	463b      	mov	r3, r7
 800117a:	4619      	mov	r1, r3
 800117c:	4807      	ldr	r0, [pc, #28]	@ (800119c <MX_TIM2_Init+0x9c>)
 800117e:	f003 fb57 	bl	8004830 <HAL_TIMEx_MasterConfigSynchronization>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001188:	f7ff ff40 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800118c:	4803      	ldr	r0, [pc, #12]	@ (800119c <MX_TIM2_Init+0x9c>)
 800118e:	f002 ffb5 	bl	80040fc <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000278 	.word	0x20000278

080011a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011b0:	d115      	bne.n	80011de <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <HAL_TIM_Base_MspInit+0x48>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	4a0b      	ldr	r2, [pc, #44]	@ (80011e8 <HAL_TIM_Base_MspInit+0x48>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c2:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <HAL_TIM_Base_MspInit+0x48>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	201c      	movs	r0, #28
 80011d4:	f000 faff 	bl	80017d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011d8:	201c      	movs	r0, #28
 80011da:	f000 fb18 	bl	800180e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800

080011ec <TMR_Now>:
  }
}

/* USER CODE BEGIN 1 */

uint64_t TMR_Now(void){
 80011ec:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80011f0:	af00      	add	r7, sp, #0
	return ((uint64_t)((uint64_t) sTimerCounterExtention<<32u) | ((uint64_t)htim2.Instance->CNT));
 80011f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <TMR_Now+0x44>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2200      	movs	r2, #0
 80011f8:	4698      	mov	r8, r3
 80011fa:	4691      	mov	r9, r2
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	4643      	mov	r3, r8
 8001206:	2200      	movs	r2, #0
 8001208:	4e0a      	ldr	r6, [pc, #40]	@ (8001234 <TMR_Now+0x48>)
 800120a:	6836      	ldr	r6, [r6, #0]
 800120c:	6a76      	ldr	r6, [r6, #36]	@ 0x24
 800120e:	f04f 0c00 	mov.w	ip, #0
 8001212:	4630      	mov	r0, r6
 8001214:	4661      	mov	r1, ip
 8001216:	ea42 0400 	orr.w	r4, r2, r0
 800121a:	ea43 0501 	orr.w	r5, r3, r1
 800121e:	4622      	mov	r2, r4
 8001220:	462b      	mov	r3, r5
}
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000274 	.word	0x20000274
 8001234:	20000278 	.word	0x20000278

08001238 <TMR_Set>:
uint64_t TMR_Set(uint64_t timer){
 8001238:	b5b0      	push	{r4, r5, r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	e9c7 0100 	strd	r0, r1, [r7]
	return timer + TMR_Now();
 8001242:	f7ff ffd3 	bl	80011ec <TMR_Now>
 8001246:	e9d7 2300 	ldrd	r2, r3, [r7]
 800124a:	1884      	adds	r4, r0, r2
 800124c:	eb41 0503 	adc.w	r5, r1, r3
 8001250:	4622      	mov	r2, r4
 8001252:	462b      	mov	r3, r5
}
 8001254:	4610      	mov	r0, r2
 8001256:	4619      	mov	r1, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bdb0      	pop	{r4, r5, r7, pc}

0800125e <TMR_Expired>:
bool TMR_Expired(uint64_t timer){
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	e9c7 0100 	strd	r0, r1, [r7]
	return TMR_Now() >= timer;
 8001268:	f7ff ffc0 	bl	80011ec <TMR_Now>
 800126c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001270:	4290      	cmp	r0, r2
 8001272:	eb71 0303 	sbcs.w	r3, r1, r3
 8001276:	bf2c      	ite	cs
 8001278:	2301      	movcs	r3, #1
 800127a:	2300      	movcc	r3, #0
 800127c:	b2db      	uxtb	r3, r3
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <TMR_Elapsed>:
uint64_t TMR_Elapsed(uint64_t timer){
 8001286:	b5b0      	push	{r4, r5, r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	e9c7 0100 	strd	r0, r1, [r7]
	if(TMR_Expired(timer) == false) return 0;
 8001290:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001294:	f7ff ffe3 	bl	800125e <TMR_Expired>
 8001298:	4603      	mov	r3, r0
 800129a:	f083 0301 	eor.w	r3, r3, #1
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d004      	beq.n	80012ae <TMR_Elapsed+0x28>
 80012a4:	f04f 0400 	mov.w	r4, #0
 80012a8:	f04f 0500 	mov.w	r5, #0
 80012ac:	e006      	b.n	80012bc <TMR_Elapsed+0x36>
	return TMR_Now() - timer;
 80012ae:	f7ff ff9d 	bl	80011ec <TMR_Now>
 80012b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012b6:	1a84      	subs	r4, r0, r2
 80012b8:	eb61 0503 	sbc.w	r5, r1, r3
}
 80012bc:	4622      	mov	r2, r4
 80012be:	462b      	mov	r3, r5
 80012c0:	4610      	mov	r0, r2
 80012c2:	4619      	mov	r1, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080012cc <TIM2_IRQHandler>:
/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	sTimerCounterExtention++;
 80012d0:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <TIM2_IRQHandler+0x18>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	3301      	adds	r3, #1
 80012d6:	4a03      	ldr	r2, [pc, #12]	@ (80012e4 <TIM2_IRQHandler+0x18>)
 80012d8:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012da:	4803      	ldr	r0, [pc, #12]	@ (80012e8 <TIM2_IRQHandler+0x1c>)
 80012dc:	f002 ff7e 	bl	80041dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000274 	.word	0x20000274
 80012e8:	20000278 	.word	0x20000278

080012ec <UART_Init>:

static tUART_Infos sUARTTable[] = {
		{.id = eID_UART2,.name = "UART2",.instance=USART2,.baud_rate = 115200,.oversimpling = UART_OVERSAMPLING_16}
};

bool UART_Init(void){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0

	for(int i = 0;i < eID_UART_MAX ;i++){
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	e070      	b.n	80013da <UART_Init+0xee>

		  sUARTTable[i].handle.Instance = sUARTTable[i].instance;
 80012f8:	4a3c      	ldr	r2, [pc, #240]	@ (80013ec <UART_Init+0x100>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	216c      	movs	r1, #108	@ 0x6c
 80012fe:	fb01 f303 	mul.w	r3, r1, r3
 8001302:	4413      	add	r3, r2
 8001304:	3318      	adds	r3, #24
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	4a38      	ldr	r2, [pc, #224]	@ (80013ec <UART_Init+0x100>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	216c      	movs	r1, #108	@ 0x6c
 8001310:	fb01 f303 	mul.w	r3, r1, r3
 8001314:	4413      	add	r3, r2
 8001316:	3324      	adds	r3, #36	@ 0x24
 8001318:	6018      	str	r0, [r3, #0]
		  sUARTTable[i].handle.Init.BaudRate =  sUARTTable[i].baud_rate;
 800131a:	4a34      	ldr	r2, [pc, #208]	@ (80013ec <UART_Init+0x100>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	216c      	movs	r1, #108	@ 0x6c
 8001320:	fb01 f303 	mul.w	r3, r1, r3
 8001324:	4413      	add	r3, r2
 8001326:	331c      	adds	r3, #28
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4930      	ldr	r1, [pc, #192]	@ (80013ec <UART_Init+0x100>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	206c      	movs	r0, #108	@ 0x6c
 8001330:	fb00 f303 	mul.w	r3, r0, r3
 8001334:	440b      	add	r3, r1
 8001336:	3328      	adds	r3, #40	@ 0x28
 8001338:	601a      	str	r2, [r3, #0]
		  sUARTTable[i].handle.Init.WordLength = UART_WORDLENGTH_8B;
 800133a:	4a2c      	ldr	r2, [pc, #176]	@ (80013ec <UART_Init+0x100>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	216c      	movs	r1, #108	@ 0x6c
 8001340:	fb01 f303 	mul.w	r3, r1, r3
 8001344:	4413      	add	r3, r2
 8001346:	332c      	adds	r3, #44	@ 0x2c
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
		  sUARTTable[i].handle.Init.StopBits = UART_STOPBITS_1;
 800134c:	4a27      	ldr	r2, [pc, #156]	@ (80013ec <UART_Init+0x100>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	216c      	movs	r1, #108	@ 0x6c
 8001352:	fb01 f303 	mul.w	r3, r1, r3
 8001356:	4413      	add	r3, r2
 8001358:	3330      	adds	r3, #48	@ 0x30
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
		  sUARTTable[i].handle.Init.Parity = UART_PARITY_NONE;
 800135e:	4a23      	ldr	r2, [pc, #140]	@ (80013ec <UART_Init+0x100>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	216c      	movs	r1, #108	@ 0x6c
 8001364:	fb01 f303 	mul.w	r3, r1, r3
 8001368:	4413      	add	r3, r2
 800136a:	3334      	adds	r3, #52	@ 0x34
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
		  sUARTTable[i].handle.Init.Mode = UART_MODE_TX_RX;
 8001370:	4a1e      	ldr	r2, [pc, #120]	@ (80013ec <UART_Init+0x100>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	216c      	movs	r1, #108	@ 0x6c
 8001376:	fb01 f303 	mul.w	r3, r1, r3
 800137a:	4413      	add	r3, r2
 800137c:	3338      	adds	r3, #56	@ 0x38
 800137e:	220c      	movs	r2, #12
 8001380:	601a      	str	r2, [r3, #0]
		  sUARTTable[i].handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001382:	4a1a      	ldr	r2, [pc, #104]	@ (80013ec <UART_Init+0x100>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	216c      	movs	r1, #108	@ 0x6c
 8001388:	fb01 f303 	mul.w	r3, r1, r3
 800138c:	4413      	add	r3, r2
 800138e:	333c      	adds	r3, #60	@ 0x3c
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
		  sUARTTable[i].handle.Init.OverSampling =  sUARTTable[i].oversimpling;
 8001394:	4a15      	ldr	r2, [pc, #84]	@ (80013ec <UART_Init+0x100>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	216c      	movs	r1, #108	@ 0x6c
 800139a:	fb01 f303 	mul.w	r3, r1, r3
 800139e:	4413      	add	r3, r2
 80013a0:	3320      	adds	r3, #32
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4911      	ldr	r1, [pc, #68]	@ (80013ec <UART_Init+0x100>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	206c      	movs	r0, #108	@ 0x6c
 80013aa:	fb00 f303 	mul.w	r3, r0, r3
 80013ae:	440b      	add	r3, r1
 80013b0:	3340      	adds	r3, #64	@ 0x40
 80013b2:	601a      	str	r2, [r3, #0]
		  if (HAL_UART_Init(&sUARTTable[i].handle) != HAL_OK)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	226c      	movs	r2, #108	@ 0x6c
 80013b8:	fb02 f303 	mul.w	r3, r2, r3
 80013bc:	3320      	adds	r3, #32
 80013be:	4a0b      	ldr	r2, [pc, #44]	@ (80013ec <UART_Init+0x100>)
 80013c0:	4413      	add	r3, r2
 80013c2:	3304      	adds	r3, #4
 80013c4:	4618      	mov	r0, r3
 80013c6:	f003 fac3 	bl	8004950 <HAL_UART_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <UART_Init+0xe8>
		  {
		    return false;
 80013d0:	2300      	movs	r3, #0
 80013d2:	e006      	b.n	80013e2 <UART_Init+0xf6>
	for(int i = 0;i < eID_UART_MAX ;i++){
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3301      	adds	r3, #1
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	dd8b      	ble.n	80012f8 <UART_Init+0xc>
		  }
	}
	return true;
 80013e0:	2301      	movs	r3, #1
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200001e4 	.word	0x200001e4

080013f0 <UART_Send>:

bool UART_Send(eUART_ID id,char * data,uint32_t len){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	73fb      	strb	r3, [r7, #15]
	if(id > eID_UART_MAX) return false;
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d901      	bls.n	8001408 <UART_Send+0x18>
 8001404:	2300      	movs	r3, #0
 8001406:	e013      	b.n	8001430 <UART_Send+0x40>
	return (HAL_UART_Transmit(&sUARTTable[id].handle,data,len,UART_TIMEOUT) == HAL_OK);
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	226c      	movs	r2, #108	@ 0x6c
 800140c:	fb02 f303 	mul.w	r3, r2, r3
 8001410:	3320      	adds	r3, #32
 8001412:	4a09      	ldr	r2, [pc, #36]	@ (8001438 <UART_Send+0x48>)
 8001414:	4413      	add	r3, r2
 8001416:	1d18      	adds	r0, r3, #4
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	b29a      	uxth	r2, r3
 800141c:	2303      	movs	r3, #3
 800141e:	68b9      	ldr	r1, [r7, #8]
 8001420:	f003 fae6 	bl	80049f0 <HAL_UART_Transmit>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	bf0c      	ite	eq
 800142a:	2301      	moveq	r3, #1
 800142c:	2300      	movne	r3, #0
 800142e:	b2db      	uxtb	r3, r3
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200001e4 	.word	0x200001e4

0800143c <MX_USART2_UART_Init>:


/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
	if(UART_Init() == false){
 8001440:	f7ff ff54 	bl	80012ec <UART_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	f083 0301 	eor.w	r3, r3, #1
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_USART2_UART_Init+0x18>
		Error_Handler();
 8001450:	f7ff fddc 	bl	800100c <Error_Handler>
  /* USER CODE END USART2_Init 1 */
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	@ 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a19      	ldr	r2, [pc, #100]	@ (80014dc <HAL_UART_MspInit+0x84>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d12b      	bne.n	80014d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <HAL_UART_MspInit+0x88>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001482:	4a17      	ldr	r2, [pc, #92]	@ (80014e0 <HAL_UART_MspInit+0x88>)
 8001484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001488:	6413      	str	r3, [r2, #64]	@ 0x40
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <HAL_UART_MspInit+0x88>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <HAL_UART_MspInit+0x88>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a10      	ldr	r2, [pc, #64]	@ (80014e0 <HAL_UART_MspInit+0x88>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <HAL_UART_MspInit+0x88>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014b2:	230c      	movs	r3, #12
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c2:	2307      	movs	r3, #7
 80014c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4805      	ldr	r0, [pc, #20]	@ (80014e4 <HAL_UART_MspInit+0x8c>)
 80014ce:	f000 f9b9 	bl	8001844 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	@ 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40004400 	.word	0x40004400
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020000 	.word	0x40020000

080014e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001520 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014ec:	f7ff fdf6 	bl	80010dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f0:	480c      	ldr	r0, [pc, #48]	@ (8001524 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014f2:	490d      	ldr	r1, [pc, #52]	@ (8001528 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f4:	4a0d      	ldr	r2, [pc, #52]	@ (800152c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f8:	e002      	b.n	8001500 <LoopCopyDataInit>

080014fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fe:	3304      	adds	r3, #4

08001500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001504:	d3f9      	bcc.n	80014fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001506:	4a0a      	ldr	r2, [pc, #40]	@ (8001530 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001508:	4c0a      	ldr	r4, [pc, #40]	@ (8001534 <LoopFillZerobss+0x22>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800150c:	e001      	b.n	8001512 <LoopFillZerobss>

0800150e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001510:	3204      	adds	r2, #4

08001512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001514:	d3fb      	bcc.n	800150e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001516:	f004 fa89 	bl	8005a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151a:	f7ff fc9b 	bl	8000e54 <main>
  bx  lr    
 800151e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001520:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001528:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 800152c:	08005ad4 	.word	0x08005ad4
  ldr r2, =_sbss
 8001530:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8001534:	200006a4 	.word	0x200006a4

08001538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001538:	e7fe      	b.n	8001538 <ADC_IRQHandler>
	...

0800153c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001540:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0d      	ldr	r2, [pc, #52]	@ (800157c <HAL_Init+0x40>)
 8001546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800154a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800154c:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <HAL_Init+0x40>)
 8001552:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001556:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001558:	4b08      	ldr	r3, [pc, #32]	@ (800157c <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a07      	ldr	r2, [pc, #28]	@ (800157c <HAL_Init+0x40>)
 800155e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001562:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001564:	2003      	movs	r0, #3
 8001566:	f000 f92b 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156a:	2000      	movs	r0, #0
 800156c:	f000 f808 	bl	8001580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001570:	f7ff fd52 	bl	8001018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023c00 	.word	0x40023c00

08001580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <HAL_InitTick+0x54>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <HAL_InitTick+0x58>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001596:	fbb3 f3f1 	udiv	r3, r3, r1
 800159a:	fbb2 f3f3 	udiv	r3, r2, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f943 	bl	800182a <HAL_SYSTICK_Config>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00e      	b.n	80015cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d80a      	bhi.n	80015ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b4:	2200      	movs	r2, #0
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295
 80015bc:	f000 f90b 	bl	80017d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c0:	4a06      	ldr	r2, [pc, #24]	@ (80015dc <HAL_InitTick+0x5c>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e000      	b.n	80015cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200001e0 	.word	0x200001e0
 80015d8:	20000254 	.word	0x20000254
 80015dc:	20000250 	.word	0x20000250

080015e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e4:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <HAL_IncTick+0x20>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_IncTick+0x24>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a04      	ldr	r2, [pc, #16]	@ (8001604 <HAL_IncTick+0x24>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000254 	.word	0x20000254
 8001604:	200002c0 	.word	0x200002c0

08001608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <HAL_GetTick+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	200002c0 	.word	0x200002c0

08001620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001630:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001648:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800164c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001652:	4a04      	ldr	r2, [pc, #16]	@ (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <__NVIC_GetPriorityGrouping+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0307 	and.w	r3, r3, #7
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db0b      	blt.n	80016ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	4907      	ldr	r1, [pc, #28]	@ (80016bc <__NVIC_EnableIRQ+0x38>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2001      	movs	r0, #1
 80016a6:	fa00 f202 	lsl.w	r2, r0, r2
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	@ (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	@ (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	@ 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	@ 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800178c:	d301      	bcc.n	8001792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178e:	2301      	movs	r3, #1
 8001790:	e00f      	b.n	80017b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001792:	4a0a      	ldr	r2, [pc, #40]	@ (80017bc <SysTick_Config+0x40>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179a:	210f      	movs	r1, #15
 800179c:	f04f 30ff 	mov.w	r0, #4294967295
 80017a0:	f7ff ff8e 	bl	80016c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a4:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <SysTick_Config+0x40>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017aa:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <SysTick_Config+0x40>)
 80017ac:	2207      	movs	r2, #7
 80017ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	e000e010 	.word	0xe000e010

080017c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ff29 	bl	8001620 <__NVIC_SetPriorityGrouping>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e8:	f7ff ff3e 	bl	8001668 <__NVIC_GetPriorityGrouping>
 80017ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	6978      	ldr	r0, [r7, #20]
 80017f4:	f7ff ff8e 	bl	8001714 <NVIC_EncodePriority>
 80017f8:	4602      	mov	r2, r0
 80017fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff5d 	bl	80016c0 <__NVIC_SetPriority>
}
 8001806:	bf00      	nop
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff31 	bl	8001684 <__NVIC_EnableIRQ>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ffa2 	bl	800177c <SysTick_Config>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	@ 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	e16b      	b.n	8001b38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001860:	2201      	movs	r2, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	429a      	cmp	r2, r3
 800187a:	f040 815a 	bne.w	8001b32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b01      	cmp	r3, #1
 8001888:	d005      	beq.n	8001896 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001892:	2b02      	cmp	r3, #2
 8001894:	d130      	bne.n	80018f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	2203      	movs	r2, #3
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018cc:	2201      	movs	r2, #1
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	f003 0201 	and.w	r2, r3, #1
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b03      	cmp	r3, #3
 8001902:	d017      	beq.n	8001934 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	2203      	movs	r2, #3
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d123      	bne.n	8001988 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	08da      	lsrs	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3208      	adds	r2, #8
 8001948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	220f      	movs	r2, #15
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	691a      	ldr	r2, [r3, #16]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	08da      	lsrs	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3208      	adds	r2, #8
 8001982:	69b9      	ldr	r1, [r7, #24]
 8001984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0203 	and.w	r2, r3, #3
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 80b4 	beq.w	8001b32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	4b60      	ldr	r3, [pc, #384]	@ (8001b50 <HAL_GPIO_Init+0x30c>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d2:	4a5f      	ldr	r2, [pc, #380]	@ (8001b50 <HAL_GPIO_Init+0x30c>)
 80019d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019da:	4b5d      	ldr	r3, [pc, #372]	@ (8001b50 <HAL_GPIO_Init+0x30c>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001b54 <HAL_GPIO_Init+0x310>)
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	089b      	lsrs	r3, r3, #2
 80019ec:	3302      	adds	r3, #2
 80019ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	220f      	movs	r2, #15
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a52      	ldr	r2, [pc, #328]	@ (8001b58 <HAL_GPIO_Init+0x314>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d02b      	beq.n	8001a6a <HAL_GPIO_Init+0x226>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a51      	ldr	r2, [pc, #324]	@ (8001b5c <HAL_GPIO_Init+0x318>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d025      	beq.n	8001a66 <HAL_GPIO_Init+0x222>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a50      	ldr	r2, [pc, #320]	@ (8001b60 <HAL_GPIO_Init+0x31c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d01f      	beq.n	8001a62 <HAL_GPIO_Init+0x21e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a4f      	ldr	r2, [pc, #316]	@ (8001b64 <HAL_GPIO_Init+0x320>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d019      	beq.n	8001a5e <HAL_GPIO_Init+0x21a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a4e      	ldr	r2, [pc, #312]	@ (8001b68 <HAL_GPIO_Init+0x324>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d013      	beq.n	8001a5a <HAL_GPIO_Init+0x216>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a4d      	ldr	r2, [pc, #308]	@ (8001b6c <HAL_GPIO_Init+0x328>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d00d      	beq.n	8001a56 <HAL_GPIO_Init+0x212>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a4c      	ldr	r2, [pc, #304]	@ (8001b70 <HAL_GPIO_Init+0x32c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d007      	beq.n	8001a52 <HAL_GPIO_Init+0x20e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a4b      	ldr	r2, [pc, #300]	@ (8001b74 <HAL_GPIO_Init+0x330>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d101      	bne.n	8001a4e <HAL_GPIO_Init+0x20a>
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	e00e      	b.n	8001a6c <HAL_GPIO_Init+0x228>
 8001a4e:	2308      	movs	r3, #8
 8001a50:	e00c      	b.n	8001a6c <HAL_GPIO_Init+0x228>
 8001a52:	2306      	movs	r3, #6
 8001a54:	e00a      	b.n	8001a6c <HAL_GPIO_Init+0x228>
 8001a56:	2305      	movs	r3, #5
 8001a58:	e008      	b.n	8001a6c <HAL_GPIO_Init+0x228>
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	e006      	b.n	8001a6c <HAL_GPIO_Init+0x228>
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e004      	b.n	8001a6c <HAL_GPIO_Init+0x228>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e002      	b.n	8001a6c <HAL_GPIO_Init+0x228>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <HAL_GPIO_Init+0x228>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	69fa      	ldr	r2, [r7, #28]
 8001a6e:	f002 0203 	and.w	r2, r2, #3
 8001a72:	0092      	lsls	r2, r2, #2
 8001a74:	4093      	lsls	r3, r2
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a7c:	4935      	ldr	r1, [pc, #212]	@ (8001b54 <HAL_GPIO_Init+0x310>)
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	089b      	lsrs	r3, r3, #2
 8001a82:	3302      	adds	r3, #2
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b78 <HAL_GPIO_Init+0x334>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aae:	4a32      	ldr	r2, [pc, #200]	@ (8001b78 <HAL_GPIO_Init+0x334>)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ab4:	4b30      	ldr	r3, [pc, #192]	@ (8001b78 <HAL_GPIO_Init+0x334>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ad8:	4a27      	ldr	r2, [pc, #156]	@ (8001b78 <HAL_GPIO_Init+0x334>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ade:	4b26      	ldr	r3, [pc, #152]	@ (8001b78 <HAL_GPIO_Init+0x334>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b02:	4a1d      	ldr	r2, [pc, #116]	@ (8001b78 <HAL_GPIO_Init+0x334>)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b08:	4b1b      	ldr	r3, [pc, #108]	@ (8001b78 <HAL_GPIO_Init+0x334>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b2c:	4a12      	ldr	r2, [pc, #72]	@ (8001b78 <HAL_GPIO_Init+0x334>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3301      	adds	r3, #1
 8001b36:	61fb      	str	r3, [r7, #28]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	2b0f      	cmp	r3, #15
 8001b3c:	f67f ae90 	bls.w	8001860 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	3724      	adds	r7, #36	@ 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40013800 	.word	0x40013800
 8001b58:	40020000 	.word	0x40020000
 8001b5c:	40020400 	.word	0x40020400
 8001b60:	40020800 	.word	0x40020800
 8001b64:	40020c00 	.word	0x40020c00
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40021400 	.word	0x40021400
 8001b70:	40021800 	.word	0x40021800
 8001b74:	40021c00 	.word	0x40021c00
 8001b78:	40013c00 	.word	0x40013c00

08001b7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691a      	ldr	r2, [r3, #16]
 8001b8c:	887b      	ldrh	r3, [r7, #2]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d002      	beq.n	8001b9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b94:	2301      	movs	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
 8001b98:	e001      	b.n	8001b9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bbc:	787b      	ldrb	r3, [r7, #1]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bc8:	e003      	b.n	8001bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bca:	887b      	ldrh	r3, [r7, #2]
 8001bcc:	041a      	lsls	r2, r3, #16
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	619a      	str	r2, [r3, #24]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 fbc5 	bl	8005384 <USB_GetMode>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	f040 80fb 	bne.w	8001df8 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f003 fb88 	bl	800531c <USB_ReadInterrupts>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 80f1 	beq.w	8001df6 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f003 fb7f 	bl	800531c <USB_ReadInterrupts>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c28:	d104      	bne.n	8001c34 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001c32:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 fb6f 	bl	800531c <USB_ReadInterrupts>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c48:	d104      	bne.n	8001c54 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001c52:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 fb5f 	bl	800531c <USB_ReadInterrupts>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001c68:	d104      	bne.n	8001c74 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001c72:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f003 fb4f 	bl	800531c <USB_ReadInterrupts>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d103      	bne.n	8001c90 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f003 fb41 	bl	800531c <USB_ReadInterrupts>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ca0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ca4:	d120      	bne.n	8001ce8 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001cae:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d113      	bne.n	8001ce8 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001cc0:	2110      	movs	r1, #16
 8001cc2:	6938      	ldr	r0, [r7, #16]
 8001cc4:	f003 fa72 	bl	80051ac <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001cc8:	6938      	ldr	r0, [r7, #16]
 8001cca:	f003 faa1 	bl	8005210 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	7a5b      	ldrb	r3, [r3, #9]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d105      	bne.n	8001ce2 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2101      	movs	r1, #1
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f003 fb5f 	bl	80053a0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f003 fe1b 	bl	800591e <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f003 fb15 	bl	800531c <USB_ReadInterrupts>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cfc:	d102      	bne.n	8001d04 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f001 fca1 	bl	8003646 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f003 fb07 	bl	800531c <USB_ReadInterrupts>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d106      	bne.n	8001d26 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f003 fde4 	bl	80058e6 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2208      	movs	r2, #8
 8001d24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f003 faf6 	bl	800531c <USB_ReadInterrupts>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d3a:	d139      	bne.n	8001db0 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f003 fb6a 	bl	800541a <USB_HC_ReadInterrupt>
 8001d46:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	e025      	b.n	8001d9a <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d018      	beq.n	8001d94 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	015a      	lsls	r2, r3, #5
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4413      	add	r3, r2
 8001d6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d78:	d106      	bne.n	8001d88 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	4619      	mov	r1, r3
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f859 	bl	8001e38 <HCD_HC_IN_IRQHandler>
 8001d86:	e005      	b.n	8001d94 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 febb 	bl	8002b0a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	3301      	adds	r3, #1
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	795b      	ldrb	r3, [r3, #5]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d3d3      	bcc.n	8001d4e <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f003 fab1 	bl	800531c <USB_ReadInterrupts>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b10      	cmp	r3, #16
 8001dc2:	d101      	bne.n	8001dc8 <HAL_HCD_IRQHandler+0x1ea>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <HAL_HCD_IRQHandler+0x1ec>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d014      	beq.n	8001df8 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	699a      	ldr	r2, [r3, #24]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 0210 	bic.w	r2, r2, #16
 8001ddc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f001 fb52 	bl	8003488 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699a      	ldr	r2, [r3, #24]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0210 	orr.w	r2, r2, #16
 8001df2:	619a      	str	r2, [r3, #24]
 8001df4:	e000      	b.n	8001df8 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001df6:	bf00      	nop
    }
  }
}
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <HAL_HCD_Stop+0x16>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e00d      	b.n	8001e30 <HAL_HCD_Stop+0x32>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f003 fc2b 	bl	800567c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	78fa      	ldrb	r2, [r7, #3]
 8001e54:	4611      	mov	r1, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f003 fa73 	bl	8005342 <USB_ReadChInterrupts>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d11a      	bne.n	8001e9c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001e66:	78fb      	ldrb	r3, [r7, #3]
 8001e68:	015a      	lsls	r2, r3, #5
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e72:	461a      	mov	r2, r3
 8001e74:	2304      	movs	r3, #4
 8001e76:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e78:	78fa      	ldrb	r2, [r7, #3]
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	334d      	adds	r3, #77	@ 0x4d
 8001e88:	2207      	movs	r2, #7
 8001e8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	78fa      	ldrb	r2, [r7, #3]
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f003 fad1 	bl	800543c <USB_HC_Halt>
 8001e9a:	e09e      	b.n	8001fda <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	78fa      	ldrb	r2, [r7, #3]
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f003 fa4c 	bl	8005342 <USB_ReadChInterrupts>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001eb4:	d11b      	bne.n	8001eee <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ec8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001eca:	78fa      	ldrb	r2, [r7, #3]
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	011b      	lsls	r3, r3, #4
 8001ed2:	1a9b      	subs	r3, r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	334d      	adds	r3, #77	@ 0x4d
 8001eda:	2208      	movs	r2, #8
 8001edc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	78fa      	ldrb	r2, [r7, #3]
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f003 faa8 	bl	800543c <USB_HC_Halt>
 8001eec:	e075      	b.n	8001fda <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	78fa      	ldrb	r2, [r7, #3]
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f003 fa23 	bl	8005342 <USB_ReadChInterrupts>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d11a      	bne.n	8001f3c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	015a      	lsls	r2, r3, #5
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f12:	461a      	mov	r2, r3
 8001f14:	2308      	movs	r3, #8
 8001f16:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f18:	78fa      	ldrb	r2, [r7, #3]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	1a9b      	subs	r3, r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	334d      	adds	r3, #77	@ 0x4d
 8001f28:	2206      	movs	r2, #6
 8001f2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	78fa      	ldrb	r2, [r7, #3]
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f003 fa81 	bl	800543c <USB_HC_Halt>
 8001f3a:	e04e      	b.n	8001fda <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	78fa      	ldrb	r2, [r7, #3]
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f003 f9fc 	bl	8005342 <USB_ReadChInterrupts>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f54:	d11b      	bne.n	8001f8e <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f62:	461a      	mov	r2, r3
 8001f64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f68:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001f6a:	78fa      	ldrb	r2, [r7, #3]
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	1a9b      	subs	r3, r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	334d      	adds	r3, #77	@ 0x4d
 8001f7a:	2209      	movs	r2, #9
 8001f7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	78fa      	ldrb	r2, [r7, #3]
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f003 fa58 	bl	800543c <USB_HC_Halt>
 8001f8c:	e025      	b.n	8001fda <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	78fa      	ldrb	r2, [r7, #3]
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 f9d3 	bl	8005342 <USB_ReadChInterrupts>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fa2:	2b80      	cmp	r3, #128	@ 0x80
 8001fa4:	d119      	bne.n	8001fda <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	015a      	lsls	r2, r3, #5
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	2380      	movs	r3, #128	@ 0x80
 8001fb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001fb8:	78fa      	ldrb	r2, [r7, #3]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	334d      	adds	r3, #77	@ 0x4d
 8001fc8:	2207      	movs	r2, #7
 8001fca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	78fa      	ldrb	r2, [r7, #3]
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f003 fa31 	bl	800543c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	78fa      	ldrb	r2, [r7, #3]
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f003 f9ad 	bl	8005342 <USB_ReadChInterrupts>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ff2:	d112      	bne.n	800201a <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f003 fa1d 	bl	800543c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	015a      	lsls	r2, r3, #5
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4413      	add	r3, r2
 800200a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800200e:	461a      	mov	r2, r3
 8002010:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002014:	6093      	str	r3, [r2, #8]
 8002016:	f000 bd75 	b.w	8002b04 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f003 f98d 	bl	8005342 <USB_ReadChInterrupts>
 8002028:	4603      	mov	r3, r0
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b01      	cmp	r3, #1
 8002030:	f040 8128 	bne.w	8002284 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	015a      	lsls	r2, r3, #5
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4413      	add	r3, r2
 800203c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002040:	461a      	mov	r2, r3
 8002042:	2320      	movs	r3, #32
 8002044:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002046:	78fa      	ldrb	r2, [r7, #3]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	331b      	adds	r3, #27
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d119      	bne.n	8002090 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800205c:	78fa      	ldrb	r2, [r7, #3]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	1a9b      	subs	r3, r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	331b      	adds	r3, #27
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	015a      	lsls	r2, r3, #5
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4413      	add	r3, r2
 8002078:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	78fa      	ldrb	r2, [r7, #3]
 8002080:	0151      	lsls	r1, r2, #5
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	440a      	add	r2, r1
 8002086:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800208a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800208e:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	799b      	ldrb	r3, [r3, #6]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d01b      	beq.n	80020d0 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002098:	78fa      	ldrb	r2, [r7, #3]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	1a9b      	subs	r3, r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	3330      	adds	r3, #48	@ 0x30
 80020a8:	6819      	ldr	r1, [r3, #0]
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020bc:	78fa      	ldrb	r2, [r7, #3]
 80020be:	1ac9      	subs	r1, r1, r3
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	1a9b      	subs	r3, r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4403      	add	r3, r0
 80020cc:	3338      	adds	r3, #56	@ 0x38
 80020ce:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80020d0:	78fa      	ldrb	r2, [r7, #3]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	334d      	adds	r3, #77	@ 0x4d
 80020e0:	2201      	movs	r2, #1
 80020e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80020e4:	78fa      	ldrb	r2, [r7, #3]
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	1a9b      	subs	r3, r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	3344      	adds	r3, #68	@ 0x44
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	015a      	lsls	r2, r3, #5
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4413      	add	r3, r2
 8002100:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002104:	461a      	mov	r2, r3
 8002106:	2301      	movs	r3, #1
 8002108:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800210a:	78fa      	ldrb	r2, [r7, #3]
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	1a9b      	subs	r3, r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	440b      	add	r3, r1
 8002118:	3326      	adds	r3, #38	@ 0x26
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00a      	beq.n	8002136 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002120:	78fa      	ldrb	r2, [r7, #3]
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	1a9b      	subs	r3, r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	3326      	adds	r3, #38	@ 0x26
 8002130:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002132:	2b02      	cmp	r3, #2
 8002134:	d110      	bne.n	8002158 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	78fa      	ldrb	r2, [r7, #3]
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f003 f97c 	bl	800543c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002150:	461a      	mov	r2, r3
 8002152:	2310      	movs	r3, #16
 8002154:	6093      	str	r3, [r2, #8]
 8002156:	e03d      	b.n	80021d4 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	1a9b      	subs	r3, r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	3326      	adds	r3, #38	@ 0x26
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b03      	cmp	r3, #3
 800216c:	d00a      	beq.n	8002184 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800216e:	78fa      	ldrb	r2, [r7, #3]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	1a9b      	subs	r3, r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	3326      	adds	r3, #38	@ 0x26
 800217e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002180:	2b01      	cmp	r3, #1
 8002182:	d127      	bne.n	80021d4 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4413      	add	r3, r2
 800218c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	78fa      	ldrb	r2, [r7, #3]
 8002194:	0151      	lsls	r1, r2, #5
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	440a      	add	r2, r1
 800219a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800219e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80021a2:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80021a4:	78fa      	ldrb	r2, [r7, #3]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	1a9b      	subs	r3, r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	334c      	adds	r3, #76	@ 0x4c
 80021b4:	2201      	movs	r2, #1
 80021b6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80021b8:	78fa      	ldrb	r2, [r7, #3]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	334c      	adds	r3, #76	@ 0x4c
 80021c8:	781a      	ldrb	r2, [r3, #0]
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	4619      	mov	r1, r3
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f003 fbb3 	bl	800593a <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	799b      	ldrb	r3, [r3, #6]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d13b      	bne.n	8002254 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80021dc:	78fa      	ldrb	r2, [r7, #3]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	1a9b      	subs	r3, r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	3338      	adds	r3, #56	@ 0x38
 80021ec:	6819      	ldr	r1, [r3, #0]
 80021ee:	78fa      	ldrb	r2, [r7, #3]
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	1a9b      	subs	r3, r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4403      	add	r3, r0
 80021fc:	3328      	adds	r3, #40	@ 0x28
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	440b      	add	r3, r1
 8002202:	1e59      	subs	r1, r3, #1
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	1a9b      	subs	r3, r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4403      	add	r3, r0
 8002212:	3328      	adds	r3, #40	@ 0x28
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	fbb1 f3f3 	udiv	r3, r1, r3
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 8470 	beq.w	8002b04 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	333c      	adds	r3, #60	@ 0x3c
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	78fa      	ldrb	r2, [r7, #3]
 8002238:	f083 0301 	eor.w	r3, r3, #1
 800223c:	b2d8      	uxtb	r0, r3
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	333c      	adds	r3, #60	@ 0x3c
 800224c:	4602      	mov	r2, r0
 800224e:	701a      	strb	r2, [r3, #0]
 8002250:	f000 bc58 	b.w	8002b04 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	333c      	adds	r3, #60	@ 0x3c
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	78fa      	ldrb	r2, [r7, #3]
 8002268:	f083 0301 	eor.w	r3, r3, #1
 800226c:	b2d8      	uxtb	r0, r3
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	333c      	adds	r3, #60	@ 0x3c
 800227c:	4602      	mov	r2, r0
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	f000 bc40 	b.w	8002b04 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	78fa      	ldrb	r2, [r7, #3]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f003 f858 	bl	8005342 <USB_ReadChInterrupts>
 8002292:	4603      	mov	r3, r0
 8002294:	f003 0320 	and.w	r3, r3, #32
 8002298:	2b20      	cmp	r3, #32
 800229a:	d131      	bne.n	8002300 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022a8:	461a      	mov	r2, r3
 80022aa:	2320      	movs	r3, #32
 80022ac:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80022ae:	78fa      	ldrb	r2, [r7, #3]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	1a9b      	subs	r3, r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	440b      	add	r3, r1
 80022bc:	331a      	adds	r3, #26
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	f040 841f 	bne.w	8002b04 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80022c6:	78fa      	ldrb	r2, [r7, #3]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	1a9b      	subs	r3, r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	331b      	adds	r3, #27
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	334d      	adds	r3, #77	@ 0x4d
 80022ea:	2203      	movs	r2, #3
 80022ec:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	78fa      	ldrb	r2, [r7, #3]
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f003 f8a0 	bl	800543c <USB_HC_Halt>
 80022fc:	f000 bc02 	b.w	8002b04 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	78fa      	ldrb	r2, [r7, #3]
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f003 f81a 	bl	8005342 <USB_ReadChInterrupts>
 800230e:	4603      	mov	r3, r0
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b02      	cmp	r3, #2
 8002316:	f040 8305 	bne.w	8002924 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	015a      	lsls	r2, r3, #5
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4413      	add	r3, r2
 8002322:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002326:	461a      	mov	r2, r3
 8002328:	2302      	movs	r3, #2
 800232a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800232c:	78fa      	ldrb	r2, [r7, #3]
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	011b      	lsls	r3, r3, #4
 8002334:	1a9b      	subs	r3, r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	334d      	adds	r3, #77	@ 0x4d
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d114      	bne.n	800236c <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002342:	78fa      	ldrb	r2, [r7, #3]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	334d      	adds	r3, #77	@ 0x4d
 8002352:	2202      	movs	r2, #2
 8002354:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002356:	78fa      	ldrb	r2, [r7, #3]
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	1a9b      	subs	r3, r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	334c      	adds	r3, #76	@ 0x4c
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
 800236a:	e2cc      	b.n	8002906 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800236c:	78fa      	ldrb	r2, [r7, #3]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	1a9b      	subs	r3, r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	334d      	adds	r3, #77	@ 0x4d
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b06      	cmp	r3, #6
 8002380:	d114      	bne.n	80023ac <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	334d      	adds	r3, #77	@ 0x4d
 8002392:	2202      	movs	r2, #2
 8002394:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	334c      	adds	r3, #76	@ 0x4c
 80023a6:	2205      	movs	r2, #5
 80023a8:	701a      	strb	r2, [r3, #0]
 80023aa:	e2ac      	b.n	8002906 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	334d      	adds	r3, #77	@ 0x4d
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b07      	cmp	r3, #7
 80023c0:	d00b      	beq.n	80023da <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80023c2:	78fa      	ldrb	r2, [r7, #3]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	334d      	adds	r3, #77	@ 0x4d
 80023d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023d4:	2b09      	cmp	r3, #9
 80023d6:	f040 80a6 	bne.w	8002526 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023da:	78fa      	ldrb	r2, [r7, #3]
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	1a9b      	subs	r3, r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	334d      	adds	r3, #77	@ 0x4d
 80023ea:	2202      	movs	r2, #2
 80023ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80023ee:	78fa      	ldrb	r2, [r7, #3]
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	1a9b      	subs	r3, r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	3344      	adds	r3, #68	@ 0x44
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	1c59      	adds	r1, r3, #1
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4403      	add	r3, r0
 800240e:	3344      	adds	r3, #68	@ 0x44
 8002410:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002412:	78fa      	ldrb	r2, [r7, #3]
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	3344      	adds	r3, #68	@ 0x44
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d943      	bls.n	80024b0 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	3344      	adds	r3, #68	@ 0x44
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	331a      	adds	r3, #26
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d123      	bne.n	800249a <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002452:	78fa      	ldrb	r2, [r7, #3]
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	1a9b      	subs	r3, r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	331b      	adds	r3, #27
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002466:	78fa      	ldrb	r2, [r7, #3]
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	1a9b      	subs	r3, r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	331c      	adds	r3, #28
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	015a      	lsls	r2, r3, #5
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4413      	add	r3, r2
 8002482:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	0151      	lsls	r1, r2, #5
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	440a      	add	r2, r1
 8002490:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002494:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002498:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	334c      	adds	r3, #76	@ 0x4c
 80024aa:	2204      	movs	r2, #4
 80024ac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024ae:	e229      	b.n	8002904 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	334c      	adds	r3, #76	@ 0x4c
 80024c0:	2202      	movs	r2, #2
 80024c2:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	3326      	adds	r3, #38	@ 0x26
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00b      	beq.n	80024f2 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80024da:	78fa      	ldrb	r2, [r7, #3]
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	1a9b      	subs	r3, r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	3326      	adds	r3, #38	@ 0x26
 80024ea:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	f040 8209 	bne.w	8002904 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002508:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002510:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002512:	78fb      	ldrb	r3, [r7, #3]
 8002514:	015a      	lsls	r2, r3, #5
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4413      	add	r3, r2
 800251a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800251e:	461a      	mov	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002524:	e1ee      	b.n	8002904 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002526:	78fa      	ldrb	r2, [r7, #3]
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	1a9b      	subs	r3, r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	334d      	adds	r3, #77	@ 0x4d
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b05      	cmp	r3, #5
 800253a:	f040 80c8 	bne.w	80026ce <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800253e:	78fa      	ldrb	r2, [r7, #3]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	334d      	adds	r3, #77	@ 0x4d
 800254e:	2202      	movs	r2, #2
 8002550:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002552:	78fa      	ldrb	r2, [r7, #3]
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	1a9b      	subs	r3, r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	331b      	adds	r3, #27
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b01      	cmp	r3, #1
 8002566:	f040 81ce 	bne.w	8002906 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800256a:	78fa      	ldrb	r2, [r7, #3]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	1a9b      	subs	r3, r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	3326      	adds	r3, #38	@ 0x26
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b03      	cmp	r3, #3
 800257e:	d16b      	bne.n	8002658 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	3348      	adds	r3, #72	@ 0x48
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	1c59      	adds	r1, r3, #1
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4403      	add	r3, r0
 80025a0:	3348      	adds	r3, #72	@ 0x48
 80025a2:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80025a4:	78fa      	ldrb	r2, [r7, #3]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	3348      	adds	r3, #72	@ 0x48
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d943      	bls.n	8002642 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80025ba:	78fa      	ldrb	r2, [r7, #3]
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	1a9b      	subs	r3, r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	3348      	adds	r3, #72	@ 0x48
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	331b      	adds	r3, #27
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80025e2:	78fa      	ldrb	r2, [r7, #3]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	3344      	adds	r3, #68	@ 0x44
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d809      	bhi.n	800260c <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	331c      	adds	r3, #28
 8002608:	2201      	movs	r2, #1
 800260a:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4413      	add	r3, r2
 8002614:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	0151      	lsls	r1, r2, #5
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	440a      	add	r2, r1
 8002622:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002626:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800262a:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	334c      	adds	r3, #76	@ 0x4c
 800263c:	2204      	movs	r2, #4
 800263e:	701a      	strb	r2, [r3, #0]
 8002640:	e014      	b.n	800266c <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002642:	78fa      	ldrb	r2, [r7, #3]
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	1a9b      	subs	r3, r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	334c      	adds	r3, #76	@ 0x4c
 8002652:	2202      	movs	r2, #2
 8002654:	701a      	strb	r2, [r3, #0]
 8002656:	e009      	b.n	800266c <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	334c      	adds	r3, #76	@ 0x4c
 8002668:	2202      	movs	r2, #2
 800266a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	1a9b      	subs	r3, r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	3326      	adds	r3, #38	@ 0x26
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00b      	beq.n	800269a <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002682:	78fa      	ldrb	r2, [r7, #3]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	1a9b      	subs	r3, r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	3326      	adds	r3, #38	@ 0x26
 8002692:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002694:	2b02      	cmp	r3, #2
 8002696:	f040 8136 	bne.w	8002906 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026b0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026b8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026ba:	78fb      	ldrb	r3, [r7, #3]
 80026bc:	015a      	lsls	r2, r3, #5
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c6:	461a      	mov	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	e11b      	b.n	8002906 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80026ce:	78fa      	ldrb	r2, [r7, #3]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	1a9b      	subs	r3, r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	334d      	adds	r3, #77	@ 0x4d
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	f040 8081 	bne.w	80027e8 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	334d      	adds	r3, #77	@ 0x4d
 80026f6:	2202      	movs	r2, #2
 80026f8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	1a9b      	subs	r3, r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	331b      	adds	r3, #27
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b01      	cmp	r3, #1
 800270e:	f040 80fa 	bne.w	8002906 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002712:	78fa      	ldrb	r2, [r7, #3]
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	1a9b      	subs	r3, r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	334c      	adds	r3, #76	@ 0x4c
 8002722:	2202      	movs	r2, #2
 8002724:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002726:	78fb      	ldrb	r3, [r7, #3]
 8002728:	015a      	lsls	r2, r3, #5
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4413      	add	r3, r2
 800272e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	0151      	lsls	r1, r2, #5
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	440a      	add	r2, r1
 800273c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002744:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4413      	add	r3, r2
 800274e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	78fa      	ldrb	r2, [r7, #3]
 8002756:	0151      	lsls	r1, r2, #5
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	440a      	add	r2, r1
 800275c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002760:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002764:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002766:	78fb      	ldrb	r3, [r7, #3]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4413      	add	r3, r2
 800276e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	0151      	lsls	r1, r2, #5
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	440a      	add	r2, r1
 800277c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002780:	f023 0320 	bic.w	r3, r3, #32
 8002784:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002786:	78fa      	ldrb	r2, [r7, #3]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	1a9b      	subs	r3, r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	3326      	adds	r3, #38	@ 0x26
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00b      	beq.n	80027b4 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	3326      	adds	r3, #38	@ 0x26
 80027ac:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	f040 80a9 	bne.w	8002906 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027ca:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027d2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027e0:	461a      	mov	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	e08e      	b.n	8002906 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80027e8:	78fa      	ldrb	r2, [r7, #3]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	1a9b      	subs	r3, r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	334d      	adds	r3, #77	@ 0x4d
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d143      	bne.n	8002886 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027fe:	78fa      	ldrb	r2, [r7, #3]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	334d      	adds	r3, #77	@ 0x4d
 800280e:	2202      	movs	r2, #2
 8002810:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	334c      	adds	r3, #76	@ 0x4c
 8002822:	2202      	movs	r2, #2
 8002824:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	3326      	adds	r3, #38	@ 0x26
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800283c:	78fa      	ldrb	r2, [r7, #3]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	3326      	adds	r3, #38	@ 0x26
 800284c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800284e:	2b02      	cmp	r3, #2
 8002850:	d159      	bne.n	8002906 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4413      	add	r3, r2
 800285a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002868:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002870:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002872:	78fb      	ldrb	r3, [r7, #3]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4413      	add	r3, r2
 800287a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800287e:	461a      	mov	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	e03f      	b.n	8002906 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002886:	78fa      	ldrb	r2, [r7, #3]
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	1a9b      	subs	r3, r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	334d      	adds	r3, #77	@ 0x4d
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b08      	cmp	r3, #8
 800289a:	d126      	bne.n	80028ea <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	334d      	adds	r3, #77	@ 0x4d
 80028ac:	2202      	movs	r2, #2
 80028ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	3344      	adds	r3, #68	@ 0x44
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	1c59      	adds	r1, r3, #1
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	1a9b      	subs	r3, r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4403      	add	r3, r0
 80028d0:	3344      	adds	r3, #68	@ 0x44
 80028d2:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	334c      	adds	r3, #76	@ 0x4c
 80028e4:	2204      	movs	r2, #4
 80028e6:	701a      	strb	r2, [r3, #0]
 80028e8:	e00d      	b.n	8002906 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80028ea:	78fa      	ldrb	r2, [r7, #3]
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	1a9b      	subs	r3, r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	334d      	adds	r3, #77	@ 0x4d
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	f000 8100 	beq.w	8002b02 <HCD_HC_IN_IRQHandler+0xcca>
 8002902:	e000      	b.n	8002906 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002904:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	334c      	adds	r3, #76	@ 0x4c
 8002916:	781a      	ldrb	r2, [r3, #0]
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	4619      	mov	r1, r3
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f003 f80c 	bl	800593a <HAL_HCD_HC_NotifyURBChange_Callback>
 8002922:	e0ef      	b.n	8002b04 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	78fa      	ldrb	r2, [r7, #3]
 800292a:	4611      	mov	r1, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f002 fd08 	bl	8005342 <USB_ReadChInterrupts>
 8002932:	4603      	mov	r3, r0
 8002934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002938:	2b40      	cmp	r3, #64	@ 0x40
 800293a:	d12f      	bne.n	800299c <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002948:	461a      	mov	r2, r3
 800294a:	2340      	movs	r3, #64	@ 0x40
 800294c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800294e:	78fa      	ldrb	r2, [r7, #3]
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	334d      	adds	r3, #77	@ 0x4d
 800295e:	2205      	movs	r2, #5
 8002960:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002962:	78fa      	ldrb	r2, [r7, #3]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	1a9b      	subs	r3, r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	331a      	adds	r3, #26
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d109      	bne.n	800298c <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	3344      	adds	r3, #68	@ 0x44
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	78fa      	ldrb	r2, [r7, #3]
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f002 fd51 	bl	800543c <USB_HC_Halt>
 800299a:	e0b3      	b.n	8002b04 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f002 fccc 	bl	8005342 <USB_ReadChInterrupts>
 80029aa:	4603      	mov	r3, r0
 80029ac:	f003 0310 	and.w	r3, r3, #16
 80029b0:	2b10      	cmp	r3, #16
 80029b2:	f040 80a7 	bne.w	8002b04 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	1a9b      	subs	r3, r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	3326      	adds	r3, #38	@ 0x26
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d11b      	bne.n	8002a04 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029cc:	78fa      	ldrb	r2, [r7, #3]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	3344      	adds	r3, #68	@ 0x44
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80029e0:	78fa      	ldrb	r2, [r7, #3]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	334d      	adds	r3, #77	@ 0x4d
 80029f0:	2204      	movs	r2, #4
 80029f2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	78fa      	ldrb	r2, [r7, #3]
 80029fa:	4611      	mov	r1, r2
 80029fc:	4618      	mov	r0, r3
 80029fe:	f002 fd1d 	bl	800543c <USB_HC_Halt>
 8002a02:	e03f      	b.n	8002a84 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a04:	78fa      	ldrb	r2, [r7, #3]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	3326      	adds	r3, #38	@ 0x26
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a1a:	78fa      	ldrb	r2, [r7, #3]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	1a9b      	subs	r3, r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	3326      	adds	r3, #38	@ 0x26
 8002a2a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d129      	bne.n	8002a84 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	3344      	adds	r3, #68	@ 0x44
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	799b      	ldrb	r3, [r3, #6]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <HCD_HC_IN_IRQHandler+0xc2a>
 8002a4c:	78fa      	ldrb	r2, [r7, #3]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	331b      	adds	r3, #27
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d110      	bne.n	8002a84 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	1a9b      	subs	r3, r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	334d      	adds	r3, #77	@ 0x4d
 8002a72:	2204      	movs	r2, #4
 8002a74:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f002 fcdc 	bl	800543c <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002a84:	78fa      	ldrb	r2, [r7, #3]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	1a9b      	subs	r3, r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	331b      	adds	r3, #27
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d129      	bne.n	8002aee <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002a9a:	78fa      	ldrb	r2, [r7, #3]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	1a9b      	subs	r3, r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	331b      	adds	r3, #27
 8002aaa:	2200      	movs	r2, #0
 8002aac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	015a      	lsls	r2, r3, #5
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	78fa      	ldrb	r2, [r7, #3]
 8002abe:	0151      	lsls	r1, r2, #5
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	440a      	add	r2, r1
 8002ac4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ac8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002acc:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002ace:	78fb      	ldrb	r3, [r7, #3]
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	78fa      	ldrb	r2, [r7, #3]
 8002ade:	0151      	lsls	r1, r2, #5
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	440a      	add	r2, r1
 8002ae4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ae8:	f043 0320 	orr.w	r3, r3, #32
 8002aec:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002afa:	461a      	mov	r2, r3
 8002afc:	2310      	movs	r3, #16
 8002afe:	6093      	str	r3, [r2, #8]
 8002b00:	e000      	b.n	8002b04 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b02:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b086      	sub	sp, #24
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	460b      	mov	r3, r1
 8002b14:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	78fa      	ldrb	r2, [r7, #3]
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f002 fc0a 	bl	8005342 <USB_ReadChInterrupts>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d11b      	bne.n	8002b70 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b38:	78fb      	ldrb	r3, [r7, #3]
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b44:	461a      	mov	r2, r3
 8002b46:	2304      	movs	r3, #4
 8002b48:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b4a:	78fa      	ldrb	r2, [r7, #3]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	1a9b      	subs	r3, r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	334d      	adds	r3, #77	@ 0x4d
 8002b5a:	2207      	movs	r2, #7
 8002b5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	78fa      	ldrb	r2, [r7, #3]
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f002 fc68 	bl	800543c <USB_HC_Halt>
 8002b6c:	f000 bc89 	b.w	8003482 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	4611      	mov	r1, r2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f002 fbe2 	bl	8005342 <USB_ReadChInterrupts>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	f040 8082 	bne.w	8002c8e <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b8a:	78fb      	ldrb	r3, [r7, #3]
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b96:	461a      	mov	r2, r3
 8002b98:	2320      	movs	r3, #32
 8002b9a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002b9c:	78fa      	ldrb	r2, [r7, #3]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	3319      	adds	r3, #25
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d124      	bne.n	8002bfc <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002bb2:	78fa      	ldrb	r2, [r7, #3]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3319      	adds	r3, #25
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bc6:	78fa      	ldrb	r2, [r7, #3]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	1a9b      	subs	r3, r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	334c      	adds	r3, #76	@ 0x4c
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002bda:	78fa      	ldrb	r2, [r7, #3]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	1a9b      	subs	r3, r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	334d      	adds	r3, #77	@ 0x4d
 8002bea:	2203      	movs	r2, #3
 8002bec:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	78fa      	ldrb	r2, [r7, #3]
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f002 fc20 	bl	800543c <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	331a      	adds	r3, #26
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	f040 8437 	bne.w	8003482 <HCD_HC_OUT_IRQHandler+0x978>
 8002c14:	78fa      	ldrb	r2, [r7, #3]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	331b      	adds	r3, #27
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f040 842b 	bne.w	8003482 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002c2c:	78fa      	ldrb	r2, [r7, #3]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	3326      	adds	r3, #38	@ 0x26
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d009      	beq.n	8002c56 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	331b      	adds	r3, #27
 8002c52:	2201      	movs	r2, #1
 8002c54:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	334d      	adds	r3, #77	@ 0x4d
 8002c66:	2203      	movs	r2, #3
 8002c68:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	4611      	mov	r1, r2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f002 fbe2 	bl	800543c <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c78:	78fa      	ldrb	r2, [r7, #3]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	3344      	adds	r3, #68	@ 0x44
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	e3f9      	b.n	8003482 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	78fa      	ldrb	r2, [r7, #3]
 8002c94:	4611      	mov	r1, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f002 fb53 	bl	8005342 <USB_ReadChInterrupts>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ca2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ca6:	d111      	bne.n	8002ccc <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cba:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f002 fbb9 	bl	800543c <USB_HC_Halt>
 8002cca:	e3da      	b.n	8003482 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f002 fb34 	bl	8005342 <USB_ReadChInterrupts>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d168      	bne.n	8002db6 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	3344      	adds	r3, #68	@ 0x44
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	4611      	mov	r1, r2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f002 fb1e 	bl	8005342 <USB_ReadChInterrupts>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d0c:	2b40      	cmp	r3, #64	@ 0x40
 8002d0e:	d112      	bne.n	8002d36 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3319      	adds	r3, #25
 8002d20:	2201      	movs	r2, #1
 8002d22:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d30:	461a      	mov	r2, r3
 8002d32:	2340      	movs	r3, #64	@ 0x40
 8002d34:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	331b      	adds	r3, #27
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d019      	beq.n	8002d80 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d4c:	78fa      	ldrb	r2, [r7, #3]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	331b      	adds	r3, #27
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d60:	78fb      	ldrb	r3, [r7, #3]
 8002d62:	015a      	lsls	r2, r3, #5
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	78fa      	ldrb	r2, [r7, #3]
 8002d70:	0151      	lsls	r1, r2, #5
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	440a      	add	r2, r1
 8002d76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d7e:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	2301      	movs	r3, #1
 8002d90:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002d92:	78fa      	ldrb	r2, [r7, #3]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	334d      	adds	r3, #77	@ 0x4d
 8002da2:	2201      	movs	r2, #1
 8002da4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	4611      	mov	r1, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f002 fb44 	bl	800543c <USB_HC_Halt>
 8002db4:	e365      	b.n	8003482 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	78fa      	ldrb	r2, [r7, #3]
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f002 fabf 	bl	8005342 <USB_ReadChInterrupts>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dca:	2b40      	cmp	r3, #64	@ 0x40
 8002dcc:	d139      	bne.n	8002e42 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	1a9b      	subs	r3, r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	334d      	adds	r3, #77	@ 0x4d
 8002dde:	2205      	movs	r2, #5
 8002de0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002de2:	78fa      	ldrb	r2, [r7, #3]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	331a      	adds	r3, #26
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d109      	bne.n	8002e0c <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	1a9b      	subs	r3, r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	3319      	adds	r3, #25
 8002e08:	2201      	movs	r2, #1
 8002e0a:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	3344      	adds	r3, #68	@ 0x44
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	78fa      	ldrb	r2, [r7, #3]
 8002e26:	4611      	mov	r1, r2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f002 fb07 	bl	800543c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e2e:	78fb      	ldrb	r3, [r7, #3]
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	2340      	movs	r3, #64	@ 0x40
 8002e3e:	6093      	str	r3, [r2, #8]
 8002e40:	e31f      	b.n	8003482 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	4611      	mov	r1, r2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f002 fa79 	bl	8005342 <USB_ReadChInterrupts>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d11a      	bne.n	8002e90 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e66:	461a      	mov	r2, r3
 8002e68:	2308      	movs	r3, #8
 8002e6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	1a9b      	subs	r3, r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	334d      	adds	r3, #77	@ 0x4d
 8002e7c:	2206      	movs	r2, #6
 8002e7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	78fa      	ldrb	r2, [r7, #3]
 8002e86:	4611      	mov	r1, r2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f002 fad7 	bl	800543c <USB_HC_Halt>
 8002e8e:	e2f8      	b.n	8003482 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f002 fa52 	bl	8005342 <USB_ReadChInterrupts>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	2b10      	cmp	r3, #16
 8002ea6:	d144      	bne.n	8002f32 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3344      	adds	r3, #68	@ 0x44
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002ebc:	78fa      	ldrb	r2, [r7, #3]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	334d      	adds	r3, #77	@ 0x4d
 8002ecc:	2204      	movs	r2, #4
 8002ece:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	3319      	adds	r3, #25
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d114      	bne.n	8002f10 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002ee6:	78fa      	ldrb	r2, [r7, #3]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	3318      	adds	r3, #24
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d109      	bne.n	8002f10 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002efc:	78fa      	ldrb	r2, [r7, #3]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	3319      	adds	r3, #25
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	4611      	mov	r1, r2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f002 fa8f 	bl	800543c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f1e:	78fb      	ldrb	r3, [r7, #3]
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	6093      	str	r3, [r2, #8]
 8002f30:	e2a7      	b.n	8003482 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f002 fa01 	bl	8005342 <USB_ReadChInterrupts>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f46:	2b80      	cmp	r3, #128	@ 0x80
 8002f48:	f040 8083 	bne.w	8003052 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	799b      	ldrb	r3, [r3, #6]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d111      	bne.n	8002f78 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002f54:	78fa      	ldrb	r2, [r7, #3]
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	1a9b      	subs	r3, r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	334d      	adds	r3, #77	@ 0x4d
 8002f64:	2207      	movs	r2, #7
 8002f66:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	4611      	mov	r1, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f002 fa63 	bl	800543c <USB_HC_Halt>
 8002f76:	e062      	b.n	800303e <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	3344      	adds	r3, #68	@ 0x44
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	1c59      	adds	r1, r3, #1
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4403      	add	r3, r0
 8002f98:	3344      	adds	r3, #68	@ 0x44
 8002f9a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f9c:	78fa      	ldrb	r2, [r7, #3]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	3344      	adds	r3, #68	@ 0x44
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d922      	bls.n	8002ff8 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	3344      	adds	r3, #68	@ 0x44
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	334c      	adds	r3, #76	@ 0x4c
 8002fd6:	2204      	movs	r2, #4
 8002fd8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	334c      	adds	r3, #76	@ 0x4c
 8002fea:	781a      	ldrb	r2, [r3, #0]
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f002 fca2 	bl	800593a <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ff6:	e022      	b.n	800303e <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	334c      	adds	r3, #76	@ 0x4c
 8003008:	2202      	movs	r2, #2
 800300a:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4413      	add	r3, r2
 8003014:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003022:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800302a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4413      	add	r3, r2
 8003034:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003038:	461a      	mov	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4413      	add	r3, r2
 8003046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800304a:	461a      	mov	r2, r3
 800304c:	2380      	movs	r3, #128	@ 0x80
 800304e:	6093      	str	r3, [r2, #8]
 8003050:	e217      	b.n	8003482 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	78fa      	ldrb	r2, [r7, #3]
 8003058:	4611      	mov	r1, r2
 800305a:	4618      	mov	r0, r3
 800305c:	f002 f971 	bl	8005342 <USB_ReadChInterrupts>
 8003060:	4603      	mov	r3, r0
 8003062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800306a:	d11b      	bne.n	80030a4 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	334d      	adds	r3, #77	@ 0x4d
 800307c:	2209      	movs	r2, #9
 800307e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f002 f9d7 	bl	800543c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	4413      	add	r3, r2
 8003096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800309a:	461a      	mov	r2, r3
 800309c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030a0:	6093      	str	r3, [r2, #8]
 80030a2:	e1ee      	b.n	8003482 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	78fa      	ldrb	r2, [r7, #3]
 80030aa:	4611      	mov	r1, r2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f002 f948 	bl	8005342 <USB_ReadChInterrupts>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	f040 81df 	bne.w	800347c <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ca:	461a      	mov	r2, r3
 80030cc:	2302      	movs	r3, #2
 80030ce:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80030d0:	78fa      	ldrb	r2, [r7, #3]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	334d      	adds	r3, #77	@ 0x4d
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	f040 8093 	bne.w	800320e <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	334d      	adds	r3, #77	@ 0x4d
 80030f8:	2202      	movs	r2, #2
 80030fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80030fc:	78fa      	ldrb	r2, [r7, #3]
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	1a9b      	subs	r3, r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	334c      	adds	r3, #76	@ 0x4c
 800310c:	2201      	movs	r2, #1
 800310e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003110:	78fa      	ldrb	r2, [r7, #3]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	3326      	adds	r3, #38	@ 0x26
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d00b      	beq.n	800313e <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	3326      	adds	r3, #38	@ 0x26
 8003136:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003138:	2b03      	cmp	r3, #3
 800313a:	f040 8190 	bne.w	800345e <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	799b      	ldrb	r3, [r3, #6]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d115      	bne.n	8003172 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	333d      	adds	r3, #61	@ 0x3d
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	f083 0301 	eor.w	r3, r3, #1
 800315e:	b2d8      	uxtb	r0, r3
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	333d      	adds	r3, #61	@ 0x3d
 800316e:	4602      	mov	r2, r0
 8003170:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	799b      	ldrb	r3, [r3, #6]
 8003176:	2b01      	cmp	r3, #1
 8003178:	f040 8171 	bne.w	800345e <HCD_HC_OUT_IRQHandler+0x954>
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	3334      	adds	r3, #52	@ 0x34
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 8165 	beq.w	800345e <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	3334      	adds	r3, #52	@ 0x34
 80031a4:	6819      	ldr	r1, [r3, #0]
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4403      	add	r3, r0
 80031b4:	3328      	adds	r3, #40	@ 0x28
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	440b      	add	r3, r1
 80031ba:	1e59      	subs	r1, r3, #1
 80031bc:	78fa      	ldrb	r2, [r7, #3]
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4403      	add	r3, r0
 80031ca:	3328      	adds	r3, #40	@ 0x28
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80031d2:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 813f 	beq.w	800345e <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80031e0:	78fa      	ldrb	r2, [r7, #3]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	333d      	adds	r3, #61	@ 0x3d
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	f083 0301 	eor.w	r3, r3, #1
 80031f8:	b2d8      	uxtb	r0, r3
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	1a9b      	subs	r3, r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	333d      	adds	r3, #61	@ 0x3d
 8003208:	4602      	mov	r2, r0
 800320a:	701a      	strb	r2, [r3, #0]
 800320c:	e127      	b.n	800345e <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800320e:	78fa      	ldrb	r2, [r7, #3]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	334d      	adds	r3, #77	@ 0x4d
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b03      	cmp	r3, #3
 8003222:	d120      	bne.n	8003266 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	334d      	adds	r3, #77	@ 0x4d
 8003234:	2202      	movs	r2, #2
 8003236:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003238:	78fa      	ldrb	r2, [r7, #3]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	331b      	adds	r3, #27
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b01      	cmp	r3, #1
 800324c:	f040 8107 	bne.w	800345e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	334c      	adds	r3, #76	@ 0x4c
 8003260:	2202      	movs	r2, #2
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	e0fb      	b.n	800345e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	334d      	adds	r3, #77	@ 0x4d
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b04      	cmp	r3, #4
 800327a:	d13a      	bne.n	80032f2 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800327c:	78fa      	ldrb	r2, [r7, #3]
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	334d      	adds	r3, #77	@ 0x4d
 800328c:	2202      	movs	r2, #2
 800328e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	334c      	adds	r3, #76	@ 0x4c
 80032a0:	2202      	movs	r2, #2
 80032a2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	331b      	adds	r3, #27
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	f040 80d1 	bne.w	800345e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	331b      	adds	r3, #27
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	78fa      	ldrb	r2, [r7, #3]
 80032e0:	0151      	lsls	r1, r2, #5
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	440a      	add	r2, r1
 80032e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ee:	6053      	str	r3, [r2, #4]
 80032f0:	e0b5      	b.n	800345e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80032f2:	78fa      	ldrb	r2, [r7, #3]
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	1a9b      	subs	r3, r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	334d      	adds	r3, #77	@ 0x4d
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b05      	cmp	r3, #5
 8003306:	d114      	bne.n	8003332 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003308:	78fa      	ldrb	r2, [r7, #3]
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	4613      	mov	r3, r2
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	1a9b      	subs	r3, r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	334d      	adds	r3, #77	@ 0x4d
 8003318:	2202      	movs	r2, #2
 800331a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800331c:	78fa      	ldrb	r2, [r7, #3]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	334c      	adds	r3, #76	@ 0x4c
 800332c:	2202      	movs	r2, #2
 800332e:	701a      	strb	r2, [r3, #0]
 8003330:	e095      	b.n	800345e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003332:	78fa      	ldrb	r2, [r7, #3]
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	1a9b      	subs	r3, r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	334d      	adds	r3, #77	@ 0x4d
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b06      	cmp	r3, #6
 8003346:	d114      	bne.n	8003372 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	334d      	adds	r3, #77	@ 0x4d
 8003358:	2202      	movs	r2, #2
 800335a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	334c      	adds	r3, #76	@ 0x4c
 800336c:	2205      	movs	r2, #5
 800336e:	701a      	strb	r2, [r3, #0]
 8003370:	e075      	b.n	800345e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	334d      	adds	r3, #77	@ 0x4d
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b07      	cmp	r3, #7
 8003386:	d00a      	beq.n	800339e <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	334d      	adds	r3, #77	@ 0x4d
 8003398:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800339a:	2b09      	cmp	r3, #9
 800339c:	d170      	bne.n	8003480 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	334d      	adds	r3, #77	@ 0x4d
 80033ae:	2202      	movs	r2, #2
 80033b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	3344      	adds	r3, #68	@ 0x44
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	1c59      	adds	r1, r3, #1
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4403      	add	r3, r0
 80033d2:	3344      	adds	r3, #68	@ 0x44
 80033d4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033d6:	78fa      	ldrb	r2, [r7, #3]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	3344      	adds	r3, #68	@ 0x44
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d914      	bls.n	8003416 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	3344      	adds	r3, #68	@ 0x44
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	334c      	adds	r3, #76	@ 0x4c
 8003410:	2204      	movs	r2, #4
 8003412:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003414:	e022      	b.n	800345c <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	334c      	adds	r3, #76	@ 0x4c
 8003426:	2202      	movs	r2, #2
 8003428:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4413      	add	r3, r2
 8003432:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003440:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003448:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800344a:	78fb      	ldrb	r3, [r7, #3]
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4413      	add	r3, r2
 8003452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003456:	461a      	mov	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800345c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	334c      	adds	r3, #76	@ 0x4c
 800346e:	781a      	ldrb	r2, [r3, #0]
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	4619      	mov	r1, r3
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f002 fa60 	bl	800593a <HAL_HCD_HC_NotifyURBChange_Callback>
 800347a:	e002      	b.n	8003482 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800347c:	bf00      	nop
 800347e:	e000      	b.n	8003482 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003480:	bf00      	nop
  }
}
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08a      	sub	sp, #40	@ 0x28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003498:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	0c5b      	lsrs	r3, r3, #17
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	091b      	lsrs	r3, r3, #4
 80034b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034bc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d004      	beq.n	80034ce <HCD_RXQLVL_IRQHandler+0x46>
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2b05      	cmp	r3, #5
 80034c8:	f000 80b6 	beq.w	8003638 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80034cc:	e0b7      	b.n	800363e <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80b3 	beq.w	800363c <HCD_RXQLVL_IRQHandler+0x1b4>
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4613      	mov	r3, r2
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	332c      	adds	r3, #44	@ 0x2c
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 80a7 	beq.w	800363c <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4613      	mov	r3, r2
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	3338      	adds	r3, #56	@ 0x38
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	18d1      	adds	r1, r2, r3
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4613      	mov	r3, r2
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4403      	add	r3, r0
 8003512:	3334      	adds	r3, #52	@ 0x34
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4299      	cmp	r1, r3
 8003518:	f200 8083 	bhi.w	8003622 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6818      	ldr	r0, [r3, #0]
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4613      	mov	r3, r2
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	332c      	adds	r3, #44	@ 0x2c
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	b292      	uxth	r2, r2
 8003536:	4619      	mov	r1, r3
 8003538:	f001 fe98 	bl	800526c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4613      	mov	r3, r2
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	332c      	adds	r3, #44	@ 0x2c
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	18d1      	adds	r1, r2, r3
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4613      	mov	r3, r2
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4403      	add	r3, r0
 8003560:	332c      	adds	r3, #44	@ 0x2c
 8003562:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4613      	mov	r3, r2
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	3338      	adds	r3, #56	@ 0x38
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	18d1      	adds	r1, r2, r3
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4613      	mov	r3, r2
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4403      	add	r3, r0
 8003588:	3338      	adds	r3, #56	@ 0x38
 800358a:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	4413      	add	r3, r2
 8003594:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	0cdb      	lsrs	r3, r3, #19
 800359c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035a0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4613      	mov	r3, r2
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	3328      	adds	r3, #40	@ 0x28
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d13f      	bne.n	800363c <HCD_RXQLVL_IRQHandler+0x1b4>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d03c      	beq.n	800363c <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035d8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035e0:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ee:	461a      	mov	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4613      	mov	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	333c      	adds	r3, #60	@ 0x3c
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	f083 0301 	eor.w	r3, r3, #1
 800360a:	b2d8      	uxtb	r0, r3
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4613      	mov	r3, r2
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	333c      	adds	r3, #60	@ 0x3c
 800361c:	4602      	mov	r2, r0
 800361e:	701a      	strb	r2, [r3, #0]
      break;
 8003620:	e00c      	b.n	800363c <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4613      	mov	r3, r2
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	1a9b      	subs	r3, r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	334c      	adds	r3, #76	@ 0x4c
 8003632:	2204      	movs	r2, #4
 8003634:	701a      	strb	r2, [r3, #0]
      break;
 8003636:	e001      	b.n	800363c <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003638:	bf00      	nop
 800363a:	e000      	b.n	800363e <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800363c:	bf00      	nop
  }
}
 800363e:	bf00      	nop
 8003640:	3728      	adds	r7, #40	@ 0x28
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003672:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b02      	cmp	r3, #2
 800367c:	d10b      	bne.n	8003696 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b01      	cmp	r3, #1
 8003686:	d102      	bne.n	800368e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f002 f93a 	bl	8005902 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f043 0302 	orr.w	r3, r3, #2
 8003694:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b08      	cmp	r3, #8
 800369e:	d132      	bne.n	8003706 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f043 0308 	orr.w	r3, r3, #8
 80036a6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d126      	bne.n	8003700 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	7a5b      	ldrb	r3, [r3, #9]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d113      	bne.n	80036e2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80036c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036c4:	d106      	bne.n	80036d4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2102      	movs	r1, #2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f001 fe67 	bl	80053a0 <USB_InitFSLSPClkSel>
 80036d2:	e011      	b.n	80036f8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2101      	movs	r1, #1
 80036da:	4618      	mov	r0, r3
 80036dc:	f001 fe60 	bl	80053a0 <USB_InitFSLSPClkSel>
 80036e0:	e00a      	b.n	80036f8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	79db      	ldrb	r3, [r3, #7]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d106      	bne.n	80036f8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036f0:	461a      	mov	r2, r3
 80036f2:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80036f6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f002 f92c 	bl	8005956 <HAL_HCD_PortEnabled_Callback>
 80036fe:	e002      	b.n	8003706 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f002 f936 	bl	8005972 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b20      	cmp	r3, #32
 800370e:	d103      	bne.n	8003718 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f043 0320 	orr.w	r3, r3, #32
 8003716:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800371e:	461a      	mov	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	6013      	str	r3, [r2, #0]
}
 8003724:	bf00      	nop
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e267      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d075      	beq.n	8003836 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800374a:	4b88      	ldr	r3, [pc, #544]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b04      	cmp	r3, #4
 8003754:	d00c      	beq.n	8003770 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003756:	4b85      	ldr	r3, [pc, #532]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800375e:	2b08      	cmp	r3, #8
 8003760:	d112      	bne.n	8003788 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003762:	4b82      	ldr	r3, [pc, #520]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800376a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800376e:	d10b      	bne.n	8003788 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003770:	4b7e      	ldr	r3, [pc, #504]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d05b      	beq.n	8003834 <HAL_RCC_OscConfig+0x108>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d157      	bne.n	8003834 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e242      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003790:	d106      	bne.n	80037a0 <HAL_RCC_OscConfig+0x74>
 8003792:	4b76      	ldr	r3, [pc, #472]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a75      	ldr	r2, [pc, #468]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e01d      	b.n	80037dc <HAL_RCC_OscConfig+0xb0>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCC_OscConfig+0x98>
 80037aa:	4b70      	ldr	r3, [pc, #448]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a6f      	ldr	r2, [pc, #444]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	4b6d      	ldr	r3, [pc, #436]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a6c      	ldr	r2, [pc, #432]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	e00b      	b.n	80037dc <HAL_RCC_OscConfig+0xb0>
 80037c4:	4b69      	ldr	r3, [pc, #420]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a68      	ldr	r2, [pc, #416]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	4b66      	ldr	r3, [pc, #408]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a65      	ldr	r2, [pc, #404]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d013      	beq.n	800380c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fd ff10 	bl	8001608 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037ec:	f7fd ff0c 	bl	8001608 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	@ 0x64
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e207      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fe:	4b5b      	ldr	r3, [pc, #364]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0xc0>
 800380a:	e014      	b.n	8003836 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fd fefc 	bl	8001608 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003814:	f7fd fef8 	bl	8001608 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	@ 0x64
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e1f3      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003826:	4b51      	ldr	r3, [pc, #324]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0xe8>
 8003832:	e000      	b.n	8003836 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d063      	beq.n	800390a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003842:	4b4a      	ldr	r3, [pc, #296]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00b      	beq.n	8003866 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800384e:	4b47      	ldr	r3, [pc, #284]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003856:	2b08      	cmp	r3, #8
 8003858:	d11c      	bne.n	8003894 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800385a:	4b44      	ldr	r3, [pc, #272]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d116      	bne.n	8003894 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003866:	4b41      	ldr	r3, [pc, #260]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d005      	beq.n	800387e <HAL_RCC_OscConfig+0x152>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d001      	beq.n	800387e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e1c7      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387e:	4b3b      	ldr	r3, [pc, #236]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4937      	ldr	r1, [pc, #220]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003892:	e03a      	b.n	800390a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d020      	beq.n	80038de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800389c:	4b34      	ldr	r3, [pc, #208]	@ (8003970 <HAL_RCC_OscConfig+0x244>)
 800389e:	2201      	movs	r2, #1
 80038a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a2:	f7fd feb1 	bl	8001608 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038aa:	f7fd fead 	bl	8001608 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e1a8      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038bc:	4b2b      	ldr	r3, [pc, #172]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0f0      	beq.n	80038aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c8:	4b28      	ldr	r3, [pc, #160]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4925      	ldr	r1, [pc, #148]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]
 80038dc:	e015      	b.n	800390a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038de:	4b24      	ldr	r3, [pc, #144]	@ (8003970 <HAL_RCC_OscConfig+0x244>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fd fe90 	bl	8001608 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ec:	f7fd fe8c 	bl	8001608 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e187      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fe:	4b1b      	ldr	r3, [pc, #108]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d036      	beq.n	8003984 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d016      	beq.n	800394c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800391e:	4b15      	ldr	r3, [pc, #84]	@ (8003974 <HAL_RCC_OscConfig+0x248>)
 8003920:	2201      	movs	r2, #1
 8003922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003924:	f7fd fe70 	bl	8001608 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800392c:	f7fd fe6c 	bl	8001608 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e167      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393e:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0x200>
 800394a:	e01b      	b.n	8003984 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800394c:	4b09      	ldr	r3, [pc, #36]	@ (8003974 <HAL_RCC_OscConfig+0x248>)
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003952:	f7fd fe59 	bl	8001608 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003958:	e00e      	b.n	8003978 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800395a:	f7fd fe55 	bl	8001608 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d907      	bls.n	8003978 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e150      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
 800396c:	40023800 	.word	0x40023800
 8003970:	42470000 	.word	0x42470000
 8003974:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003978:	4b88      	ldr	r3, [pc, #544]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 800397a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1ea      	bne.n	800395a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 8097 	beq.w	8003ac0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003992:	2300      	movs	r3, #0
 8003994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003996:	4b81      	ldr	r3, [pc, #516]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10f      	bne.n	80039c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039a2:	2300      	movs	r3, #0
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	4b7d      	ldr	r3, [pc, #500]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039aa:	4a7c      	ldr	r2, [pc, #496]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 80039ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80039b2:	4b7a      	ldr	r3, [pc, #488]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ba:	60bb      	str	r3, [r7, #8]
 80039bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039be:	2301      	movs	r3, #1
 80039c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c2:	4b77      	ldr	r3, [pc, #476]	@ (8003ba0 <HAL_RCC_OscConfig+0x474>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d118      	bne.n	8003a00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ce:	4b74      	ldr	r3, [pc, #464]	@ (8003ba0 <HAL_RCC_OscConfig+0x474>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a73      	ldr	r2, [pc, #460]	@ (8003ba0 <HAL_RCC_OscConfig+0x474>)
 80039d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039da:	f7fd fe15 	bl	8001608 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e2:	f7fd fe11 	bl	8001608 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e10c      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f4:	4b6a      	ldr	r3, [pc, #424]	@ (8003ba0 <HAL_RCC_OscConfig+0x474>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d106      	bne.n	8003a16 <HAL_RCC_OscConfig+0x2ea>
 8003a08:	4b64      	ldr	r3, [pc, #400]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0c:	4a63      	ldr	r2, [pc, #396]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a14:	e01c      	b.n	8003a50 <HAL_RCC_OscConfig+0x324>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b05      	cmp	r3, #5
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x30c>
 8003a1e:	4b5f      	ldr	r3, [pc, #380]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a22:	4a5e      	ldr	r2, [pc, #376]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a24:	f043 0304 	orr.w	r3, r3, #4
 8003a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a2a:	4b5c      	ldr	r3, [pc, #368]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2e:	4a5b      	ldr	r2, [pc, #364]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a36:	e00b      	b.n	8003a50 <HAL_RCC_OscConfig+0x324>
 8003a38:	4b58      	ldr	r3, [pc, #352]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a3c:	4a57      	ldr	r2, [pc, #348]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a44:	4b55      	ldr	r3, [pc, #340]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a48:	4a54      	ldr	r2, [pc, #336]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a4a:	f023 0304 	bic.w	r3, r3, #4
 8003a4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d015      	beq.n	8003a84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a58:	f7fd fdd6 	bl	8001608 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a60:	f7fd fdd2 	bl	8001608 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e0cb      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a76:	4b49      	ldr	r3, [pc, #292]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0ee      	beq.n	8003a60 <HAL_RCC_OscConfig+0x334>
 8003a82:	e014      	b.n	8003aae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a84:	f7fd fdc0 	bl	8001608 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8a:	e00a      	b.n	8003aa2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8c:	f7fd fdbc 	bl	8001608 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e0b5      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1ee      	bne.n	8003a8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003aae:	7dfb      	ldrb	r3, [r7, #23]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d105      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab4:	4b39      	ldr	r3, [pc, #228]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab8:	4a38      	ldr	r2, [pc, #224]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003aba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003abe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80a1 	beq.w	8003c0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aca:	4b34      	ldr	r3, [pc, #208]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d05c      	beq.n	8003b90 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d141      	bne.n	8003b62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ade:	4b31      	ldr	r3, [pc, #196]	@ (8003ba4 <HAL_RCC_OscConfig+0x478>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fd fd90 	bl	8001608 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aec:	f7fd fd8c 	bl	8001608 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e087      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afe:	4b27      	ldr	r3, [pc, #156]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69da      	ldr	r2, [r3, #28]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	019b      	lsls	r3, r3, #6
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b20:	085b      	lsrs	r3, r3, #1
 8003b22:	3b01      	subs	r3, #1
 8003b24:	041b      	lsls	r3, r3, #16
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2c:	061b      	lsls	r3, r3, #24
 8003b2e:	491b      	ldr	r1, [pc, #108]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba4 <HAL_RCC_OscConfig+0x478>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3a:	f7fd fd65 	bl	8001608 <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b42:	f7fd fd61 	bl	8001608 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e05c      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b54:	4b11      	ldr	r3, [pc, #68]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0f0      	beq.n	8003b42 <HAL_RCC_OscConfig+0x416>
 8003b60:	e054      	b.n	8003c0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b62:	4b10      	ldr	r3, [pc, #64]	@ (8003ba4 <HAL_RCC_OscConfig+0x478>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b68:	f7fd fd4e 	bl	8001608 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b70:	f7fd fd4a 	bl	8001608 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e045      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b82:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0x444>
 8003b8e:	e03d      	b.n	8003c0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d107      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e038      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	40007000 	.word	0x40007000
 8003ba4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c18 <HAL_RCC_OscConfig+0x4ec>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d028      	beq.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d121      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d11a      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003bd8:	4013      	ands	r3, r2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d111      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bee:	085b      	lsrs	r3, r3, #1
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d107      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d001      	beq.n	8003c0c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023800 	.word	0x40023800

08003c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0cc      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c30:	4b68      	ldr	r3, [pc, #416]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d90c      	bls.n	8003c58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	4b65      	ldr	r3, [pc, #404]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c46:	4b63      	ldr	r3, [pc, #396]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0b8      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d020      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d005      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c70:	4b59      	ldr	r3, [pc, #356]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	4a58      	ldr	r2, [pc, #352]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c88:	4b53      	ldr	r3, [pc, #332]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	4a52      	ldr	r2, [pc, #328]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c94:	4b50      	ldr	r3, [pc, #320]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	494d      	ldr	r1, [pc, #308]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d044      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d107      	bne.n	8003cca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cba:	4b47      	ldr	r3, [pc, #284]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d119      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e07f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d003      	beq.n	8003cda <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d107      	bne.n	8003cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cda:	4b3f      	ldr	r3, [pc, #252]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e06f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cea:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e067      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cfa:	4b37      	ldr	r3, [pc, #220]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f023 0203 	bic.w	r2, r3, #3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	4934      	ldr	r1, [pc, #208]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d0c:	f7fd fc7c 	bl	8001608 <HAL_GetTick>
 8003d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d12:	e00a      	b.n	8003d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d14:	f7fd fc78 	bl	8001608 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e04f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 020c 	and.w	r2, r3, #12
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d1eb      	bne.n	8003d14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d3c:	4b25      	ldr	r3, [pc, #148]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d20c      	bcs.n	8003d64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4a:	4b22      	ldr	r3, [pc, #136]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d52:	4b20      	ldr	r3, [pc, #128]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e032      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d70:	4b19      	ldr	r3, [pc, #100]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4916      	ldr	r1, [pc, #88]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d8e:	4b12      	ldr	r3, [pc, #72]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	490e      	ldr	r1, [pc, #56]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003da2:	f000 f821 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 8003da6:	4602      	mov	r2, r0
 8003da8:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	490a      	ldr	r1, [pc, #40]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c0>)
 8003db4:	5ccb      	ldrb	r3, [r1, r3]
 8003db6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dba:	4a09      	ldr	r2, [pc, #36]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003dbe:	4b09      	ldr	r3, [pc, #36]	@ (8003de4 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fd fbdc 	bl	8001580 <HAL_InitTick>

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40023c00 	.word	0x40023c00
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	08005aac 	.word	0x08005aac
 8003de0:	200001e0 	.word	0x200001e0
 8003de4:	20000250 	.word	0x20000250

08003de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dec:	b094      	sub	sp, #80	@ 0x50
 8003dee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e00:	4b79      	ldr	r3, [pc, #484]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 030c 	and.w	r3, r3, #12
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d00d      	beq.n	8003e28 <HAL_RCC_GetSysClockFreq+0x40>
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	f200 80e1 	bhi.w	8003fd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0x34>
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d003      	beq.n	8003e22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e1a:	e0db      	b.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e1c:	4b73      	ldr	r3, [pc, #460]	@ (8003fec <HAL_RCC_GetSysClockFreq+0x204>)
 8003e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e20:	e0db      	b.n	8003fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e22:	4b73      	ldr	r3, [pc, #460]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e26:	e0d8      	b.n	8003fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e28:	4b6f      	ldr	r3, [pc, #444]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e30:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e32:	4b6d      	ldr	r3, [pc, #436]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d063      	beq.n	8003f06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e3e:	4b6a      	ldr	r3, [pc, #424]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	099b      	lsrs	r3, r3, #6
 8003e44:	2200      	movs	r2, #0
 8003e46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e50:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e52:	2300      	movs	r3, #0
 8003e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e5a:	4622      	mov	r2, r4
 8003e5c:	462b      	mov	r3, r5
 8003e5e:	f04f 0000 	mov.w	r0, #0
 8003e62:	f04f 0100 	mov.w	r1, #0
 8003e66:	0159      	lsls	r1, r3, #5
 8003e68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e6c:	0150      	lsls	r0, r2, #5
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	4621      	mov	r1, r4
 8003e74:	1a51      	subs	r1, r2, r1
 8003e76:	6139      	str	r1, [r7, #16]
 8003e78:	4629      	mov	r1, r5
 8003e7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e8c:	4659      	mov	r1, fp
 8003e8e:	018b      	lsls	r3, r1, #6
 8003e90:	4651      	mov	r1, sl
 8003e92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e96:	4651      	mov	r1, sl
 8003e98:	018a      	lsls	r2, r1, #6
 8003e9a:	4651      	mov	r1, sl
 8003e9c:	ebb2 0801 	subs.w	r8, r2, r1
 8003ea0:	4659      	mov	r1, fp
 8003ea2:	eb63 0901 	sbc.w	r9, r3, r1
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	f04f 0300 	mov.w	r3, #0
 8003eae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eba:	4690      	mov	r8, r2
 8003ebc:	4699      	mov	r9, r3
 8003ebe:	4623      	mov	r3, r4
 8003ec0:	eb18 0303 	adds.w	r3, r8, r3
 8003ec4:	60bb      	str	r3, [r7, #8]
 8003ec6:	462b      	mov	r3, r5
 8003ec8:	eb49 0303 	adc.w	r3, r9, r3
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003eda:	4629      	mov	r1, r5
 8003edc:	024b      	lsls	r3, r1, #9
 8003ede:	4621      	mov	r1, r4
 8003ee0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ee4:	4621      	mov	r1, r4
 8003ee6:	024a      	lsls	r2, r1, #9
 8003ee8:	4610      	mov	r0, r2
 8003eea:	4619      	mov	r1, r3
 8003eec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eee:	2200      	movs	r2, #0
 8003ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ef2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ef4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ef8:	f7fc f966 	bl	80001c8 <__aeabi_uldivmod>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4613      	mov	r3, r2
 8003f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f04:	e058      	b.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f06:	4b38      	ldr	r3, [pc, #224]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	099b      	lsrs	r3, r3, #6
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	4618      	mov	r0, r3
 8003f10:	4611      	mov	r1, r2
 8003f12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f16:	623b      	str	r3, [r7, #32]
 8003f18:	2300      	movs	r3, #0
 8003f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f20:	4642      	mov	r2, r8
 8003f22:	464b      	mov	r3, r9
 8003f24:	f04f 0000 	mov.w	r0, #0
 8003f28:	f04f 0100 	mov.w	r1, #0
 8003f2c:	0159      	lsls	r1, r3, #5
 8003f2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f32:	0150      	lsls	r0, r2, #5
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4641      	mov	r1, r8
 8003f3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f3e:	4649      	mov	r1, r9
 8003f40:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f58:	ebb2 040a 	subs.w	r4, r2, sl
 8003f5c:	eb63 050b 	sbc.w	r5, r3, fp
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	f04f 0300 	mov.w	r3, #0
 8003f68:	00eb      	lsls	r3, r5, #3
 8003f6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f6e:	00e2      	lsls	r2, r4, #3
 8003f70:	4614      	mov	r4, r2
 8003f72:	461d      	mov	r5, r3
 8003f74:	4643      	mov	r3, r8
 8003f76:	18e3      	adds	r3, r4, r3
 8003f78:	603b      	str	r3, [r7, #0]
 8003f7a:	464b      	mov	r3, r9
 8003f7c:	eb45 0303 	adc.w	r3, r5, r3
 8003f80:	607b      	str	r3, [r7, #4]
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	f04f 0300 	mov.w	r3, #0
 8003f8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f8e:	4629      	mov	r1, r5
 8003f90:	028b      	lsls	r3, r1, #10
 8003f92:	4621      	mov	r1, r4
 8003f94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f98:	4621      	mov	r1, r4
 8003f9a:	028a      	lsls	r2, r1, #10
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	61bb      	str	r3, [r7, #24]
 8003fa6:	61fa      	str	r2, [r7, #28]
 8003fa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fac:	f7fc f90c 	bl	80001c8 <__aeabi_uldivmod>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	0c1b      	lsrs	r3, r3, #16
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003fc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fd2:	e002      	b.n	8003fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fd4:	4b05      	ldr	r3, [pc, #20]	@ (8003fec <HAL_RCC_GetSysClockFreq+0x204>)
 8003fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3750      	adds	r7, #80	@ 0x50
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	00f42400 	.word	0x00f42400
 8003ff0:	007a1200 	.word	0x007a1200

08003ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ff8:	4b03      	ldr	r3, [pc, #12]	@ (8004008 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	200001e0 	.word	0x200001e0

0800400c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004010:	f7ff fff0 	bl	8003ff4 <HAL_RCC_GetHCLKFreq>
 8004014:	4602      	mov	r2, r0
 8004016:	4b05      	ldr	r3, [pc, #20]	@ (800402c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	0a9b      	lsrs	r3, r3, #10
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	4903      	ldr	r1, [pc, #12]	@ (8004030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004022:	5ccb      	ldrb	r3, [r1, r3]
 8004024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004028:	4618      	mov	r0, r3
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40023800 	.word	0x40023800
 8004030:	08005abc 	.word	0x08005abc

08004034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004038:	f7ff ffdc 	bl	8003ff4 <HAL_RCC_GetHCLKFreq>
 800403c:	4602      	mov	r2, r0
 800403e:	4b05      	ldr	r3, [pc, #20]	@ (8004054 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	0b5b      	lsrs	r3, r3, #13
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	4903      	ldr	r1, [pc, #12]	@ (8004058 <HAL_RCC_GetPCLK2Freq+0x24>)
 800404a:	5ccb      	ldrb	r3, [r1, r3]
 800404c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004050:	4618      	mov	r0, r3
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40023800 	.word	0x40023800
 8004058:	08005abc 	.word	0x08005abc

0800405c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e041      	b.n	80040f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fd f88c 	bl	80011a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3304      	adds	r3, #4
 8004098:	4619      	mov	r1, r3
 800409a:	4610      	mov	r0, r2
 800409c:	f000 fa88 	bl	80045b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b01      	cmp	r3, #1
 800410e:	d001      	beq.n	8004114 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e04e      	b.n	80041b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f042 0201 	orr.w	r2, r2, #1
 800412a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a23      	ldr	r2, [pc, #140]	@ (80041c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d022      	beq.n	800417c <HAL_TIM_Base_Start_IT+0x80>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800413e:	d01d      	beq.n	800417c <HAL_TIM_Base_Start_IT+0x80>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a1f      	ldr	r2, [pc, #124]	@ (80041c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d018      	beq.n	800417c <HAL_TIM_Base_Start_IT+0x80>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a1e      	ldr	r2, [pc, #120]	@ (80041c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d013      	beq.n	800417c <HAL_TIM_Base_Start_IT+0x80>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a1c      	ldr	r2, [pc, #112]	@ (80041cc <HAL_TIM_Base_Start_IT+0xd0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00e      	beq.n	800417c <HAL_TIM_Base_Start_IT+0x80>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1b      	ldr	r2, [pc, #108]	@ (80041d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d009      	beq.n	800417c <HAL_TIM_Base_Start_IT+0x80>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a19      	ldr	r2, [pc, #100]	@ (80041d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d004      	beq.n	800417c <HAL_TIM_Base_Start_IT+0x80>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a18      	ldr	r2, [pc, #96]	@ (80041d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d111      	bne.n	80041a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 0307 	and.w	r3, r3, #7
 8004186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b06      	cmp	r3, #6
 800418c:	d010      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f042 0201 	orr.w	r2, r2, #1
 800419c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800419e:	e007      	b.n	80041b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 0201 	orr.w	r2, r2, #1
 80041ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40010000 	.word	0x40010000
 80041c4:	40000400 	.word	0x40000400
 80041c8:	40000800 	.word	0x40000800
 80041cc:	40000c00 	.word	0x40000c00
 80041d0:	40010400 	.word	0x40010400
 80041d4:	40014000 	.word	0x40014000
 80041d8:	40001800 	.word	0x40001800

080041dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d020      	beq.n	8004240 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01b      	beq.n	8004240 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0202 	mvn.w	r2, #2
 8004210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f9a3 	bl	8004572 <HAL_TIM_IC_CaptureCallback>
 800422c:	e005      	b.n	800423a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f995 	bl	800455e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f9a6 	bl	8004586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b00      	cmp	r3, #0
 8004248:	d020      	beq.n	800428c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d01b      	beq.n	800428c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f06f 0204 	mvn.w	r2, #4
 800425c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2202      	movs	r2, #2
 8004262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f97d 	bl	8004572 <HAL_TIM_IC_CaptureCallback>
 8004278:	e005      	b.n	8004286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f96f 	bl	800455e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f980 	bl	8004586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d020      	beq.n	80042d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b00      	cmp	r3, #0
 800429e:	d01b      	beq.n	80042d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0208 	mvn.w	r2, #8
 80042a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2204      	movs	r2, #4
 80042ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f957 	bl	8004572 <HAL_TIM_IC_CaptureCallback>
 80042c4:	e005      	b.n	80042d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f949 	bl	800455e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f95a 	bl	8004586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f003 0310 	and.w	r3, r3, #16
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d020      	beq.n	8004324 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d01b      	beq.n	8004324 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f06f 0210 	mvn.w	r2, #16
 80042f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2208      	movs	r2, #8
 80042fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f931 	bl	8004572 <HAL_TIM_IC_CaptureCallback>
 8004310:	e005      	b.n	800431e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f923 	bl	800455e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f934 	bl	8004586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00c      	beq.n	8004348 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d007      	beq.n	8004348 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f06f 0201 	mvn.w	r2, #1
 8004340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f901 	bl	800454a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00c      	beq.n	800436c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004358:	2b00      	cmp	r3, #0
 800435a:	d007      	beq.n	800436c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fae8 	bl	800493c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00c      	beq.n	8004390 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800437c:	2b00      	cmp	r3, #0
 800437e:	d007      	beq.n	8004390 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f905 	bl	800459a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00c      	beq.n	80043b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f003 0320 	and.w	r3, r3, #32
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d007      	beq.n	80043b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0220 	mvn.w	r2, #32
 80043ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 faba 	bl	8004928 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043b4:	bf00      	nop
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_TIM_ConfigClockSource+0x1c>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e0b4      	b.n	8004542 <HAL_TIM_ConfigClockSource+0x186>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80043f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004410:	d03e      	beq.n	8004490 <HAL_TIM_ConfigClockSource+0xd4>
 8004412:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004416:	f200 8087 	bhi.w	8004528 <HAL_TIM_ConfigClockSource+0x16c>
 800441a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800441e:	f000 8086 	beq.w	800452e <HAL_TIM_ConfigClockSource+0x172>
 8004422:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004426:	d87f      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x16c>
 8004428:	2b70      	cmp	r3, #112	@ 0x70
 800442a:	d01a      	beq.n	8004462 <HAL_TIM_ConfigClockSource+0xa6>
 800442c:	2b70      	cmp	r3, #112	@ 0x70
 800442e:	d87b      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x16c>
 8004430:	2b60      	cmp	r3, #96	@ 0x60
 8004432:	d050      	beq.n	80044d6 <HAL_TIM_ConfigClockSource+0x11a>
 8004434:	2b60      	cmp	r3, #96	@ 0x60
 8004436:	d877      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x16c>
 8004438:	2b50      	cmp	r3, #80	@ 0x50
 800443a:	d03c      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0xfa>
 800443c:	2b50      	cmp	r3, #80	@ 0x50
 800443e:	d873      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x16c>
 8004440:	2b40      	cmp	r3, #64	@ 0x40
 8004442:	d058      	beq.n	80044f6 <HAL_TIM_ConfigClockSource+0x13a>
 8004444:	2b40      	cmp	r3, #64	@ 0x40
 8004446:	d86f      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x16c>
 8004448:	2b30      	cmp	r3, #48	@ 0x30
 800444a:	d064      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0x15a>
 800444c:	2b30      	cmp	r3, #48	@ 0x30
 800444e:	d86b      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x16c>
 8004450:	2b20      	cmp	r3, #32
 8004452:	d060      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0x15a>
 8004454:	2b20      	cmp	r3, #32
 8004456:	d867      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x16c>
 8004458:	2b00      	cmp	r3, #0
 800445a:	d05c      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0x15a>
 800445c:	2b10      	cmp	r3, #16
 800445e:	d05a      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0x15a>
 8004460:	e062      	b.n	8004528 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004472:	f000 f9bd 	bl	80047f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004484:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	609a      	str	r2, [r3, #8]
      break;
 800448e:	e04f      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044a0:	f000 f9a6 	bl	80047f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044b2:	609a      	str	r2, [r3, #8]
      break;
 80044b4:	e03c      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044c2:	461a      	mov	r2, r3
 80044c4:	f000 f91a 	bl	80046fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2150      	movs	r1, #80	@ 0x50
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 f973 	bl	80047ba <TIM_ITRx_SetConfig>
      break;
 80044d4:	e02c      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044e2:	461a      	mov	r2, r3
 80044e4:	f000 f939 	bl	800475a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2160      	movs	r1, #96	@ 0x60
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 f963 	bl	80047ba <TIM_ITRx_SetConfig>
      break;
 80044f4:	e01c      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004502:	461a      	mov	r2, r3
 8004504:	f000 f8fa 	bl	80046fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2140      	movs	r1, #64	@ 0x40
 800450e:	4618      	mov	r0, r3
 8004510:	f000 f953 	bl	80047ba <TIM_ITRx_SetConfig>
      break;
 8004514:	e00c      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4619      	mov	r1, r3
 8004520:	4610      	mov	r0, r2
 8004522:	f000 f94a 	bl	80047ba <TIM_ITRx_SetConfig>
      break;
 8004526:	e003      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
      break;
 800452c:	e000      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800452e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004540:	7bfb      	ldrb	r3, [r7, #15]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a43      	ldr	r2, [pc, #268]	@ (80046d0 <TIM_Base_SetConfig+0x120>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d013      	beq.n	80045f0 <TIM_Base_SetConfig+0x40>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ce:	d00f      	beq.n	80045f0 <TIM_Base_SetConfig+0x40>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a40      	ldr	r2, [pc, #256]	@ (80046d4 <TIM_Base_SetConfig+0x124>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d00b      	beq.n	80045f0 <TIM_Base_SetConfig+0x40>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a3f      	ldr	r2, [pc, #252]	@ (80046d8 <TIM_Base_SetConfig+0x128>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d007      	beq.n	80045f0 <TIM_Base_SetConfig+0x40>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a3e      	ldr	r2, [pc, #248]	@ (80046dc <TIM_Base_SetConfig+0x12c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d003      	beq.n	80045f0 <TIM_Base_SetConfig+0x40>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a3d      	ldr	r2, [pc, #244]	@ (80046e0 <TIM_Base_SetConfig+0x130>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d108      	bne.n	8004602 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a32      	ldr	r2, [pc, #200]	@ (80046d0 <TIM_Base_SetConfig+0x120>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d02b      	beq.n	8004662 <TIM_Base_SetConfig+0xb2>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004610:	d027      	beq.n	8004662 <TIM_Base_SetConfig+0xb2>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a2f      	ldr	r2, [pc, #188]	@ (80046d4 <TIM_Base_SetConfig+0x124>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d023      	beq.n	8004662 <TIM_Base_SetConfig+0xb2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a2e      	ldr	r2, [pc, #184]	@ (80046d8 <TIM_Base_SetConfig+0x128>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d01f      	beq.n	8004662 <TIM_Base_SetConfig+0xb2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a2d      	ldr	r2, [pc, #180]	@ (80046dc <TIM_Base_SetConfig+0x12c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d01b      	beq.n	8004662 <TIM_Base_SetConfig+0xb2>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a2c      	ldr	r2, [pc, #176]	@ (80046e0 <TIM_Base_SetConfig+0x130>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d017      	beq.n	8004662 <TIM_Base_SetConfig+0xb2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a2b      	ldr	r2, [pc, #172]	@ (80046e4 <TIM_Base_SetConfig+0x134>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d013      	beq.n	8004662 <TIM_Base_SetConfig+0xb2>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a2a      	ldr	r2, [pc, #168]	@ (80046e8 <TIM_Base_SetConfig+0x138>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d00f      	beq.n	8004662 <TIM_Base_SetConfig+0xb2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a29      	ldr	r2, [pc, #164]	@ (80046ec <TIM_Base_SetConfig+0x13c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d00b      	beq.n	8004662 <TIM_Base_SetConfig+0xb2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a28      	ldr	r2, [pc, #160]	@ (80046f0 <TIM_Base_SetConfig+0x140>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d007      	beq.n	8004662 <TIM_Base_SetConfig+0xb2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a27      	ldr	r2, [pc, #156]	@ (80046f4 <TIM_Base_SetConfig+0x144>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d003      	beq.n	8004662 <TIM_Base_SetConfig+0xb2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a26      	ldr	r2, [pc, #152]	@ (80046f8 <TIM_Base_SetConfig+0x148>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d108      	bne.n	8004674 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	689a      	ldr	r2, [r3, #8]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a0e      	ldr	r2, [pc, #56]	@ (80046d0 <TIM_Base_SetConfig+0x120>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d003      	beq.n	80046a2 <TIM_Base_SetConfig+0xf2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a10      	ldr	r2, [pc, #64]	@ (80046e0 <TIM_Base_SetConfig+0x130>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d103      	bne.n	80046aa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f043 0204 	orr.w	r2, r3, #4
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	601a      	str	r2, [r3, #0]
}
 80046c2:	bf00      	nop
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	40010000 	.word	0x40010000
 80046d4:	40000400 	.word	0x40000400
 80046d8:	40000800 	.word	0x40000800
 80046dc:	40000c00 	.word	0x40000c00
 80046e0:	40010400 	.word	0x40010400
 80046e4:	40014000 	.word	0x40014000
 80046e8:	40014400 	.word	0x40014400
 80046ec:	40014800 	.word	0x40014800
 80046f0:	40001800 	.word	0x40001800
 80046f4:	40001c00 	.word	0x40001c00
 80046f8:	40002000 	.word	0x40002000

080046fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	f023 0201 	bic.w	r2, r3, #1
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f023 030a 	bic.w	r3, r3, #10
 8004738:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	621a      	str	r2, [r3, #32]
}
 800474e:	bf00      	nop
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800475a:	b480      	push	{r7}
 800475c:	b087      	sub	sp, #28
 800475e:	af00      	add	r7, sp, #0
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	f023 0210 	bic.w	r2, r3, #16
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004784:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	031b      	lsls	r3, r3, #12
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004796:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	621a      	str	r2, [r3, #32]
}
 80047ae:	bf00      	nop
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b085      	sub	sp, #20
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f043 0307 	orr.w	r3, r3, #7
 80047dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	609a      	str	r2, [r3, #8]
}
 80047e4:	bf00      	nop
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
 80047fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800480a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	021a      	lsls	r2, r3, #8
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	431a      	orrs	r2, r3
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4313      	orrs	r3, r2
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	4313      	orrs	r3, r2
 800481c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	609a      	str	r2, [r3, #8]
}
 8004824:	bf00      	nop
 8004826:	371c      	adds	r7, #28
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004844:	2302      	movs	r3, #2
 8004846:	e05a      	b.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800486e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a21      	ldr	r2, [pc, #132]	@ (800490c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d022      	beq.n	80048d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004894:	d01d      	beq.n	80048d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a1d      	ldr	r2, [pc, #116]	@ (8004910 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d018      	beq.n	80048d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004914 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d013      	beq.n	80048d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004918 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d00e      	beq.n	80048d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a18      	ldr	r2, [pc, #96]	@ (800491c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d009      	beq.n	80048d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a17      	ldr	r2, [pc, #92]	@ (8004920 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d004      	beq.n	80048d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a15      	ldr	r2, [pc, #84]	@ (8004924 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d10c      	bne.n	80048ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	40010000 	.word	0x40010000
 8004910:	40000400 	.word	0x40000400
 8004914:	40000800 	.word	0x40000800
 8004918:	40000c00 	.word	0x40000c00
 800491c:	40010400 	.word	0x40010400
 8004920:	40014000 	.word	0x40014000
 8004924:	40001800 	.word	0x40001800

08004928 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e042      	b.n	80049e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fc fd6e 	bl	8001458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2224      	movs	r2, #36	@ 0x24
 8004980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004992:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f973 	bl	8004c80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	691a      	ldr	r2, [r3, #16]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695a      	ldr	r2, [r3, #20]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2220      	movs	r2, #32
 80049dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08a      	sub	sp, #40	@ 0x28
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	603b      	str	r3, [r7, #0]
 80049fc:	4613      	mov	r3, r2
 80049fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d175      	bne.n	8004afc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <HAL_UART_Transmit+0x2c>
 8004a16:	88fb      	ldrh	r3, [r7, #6]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e06e      	b.n	8004afe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2221      	movs	r2, #33	@ 0x21
 8004a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a2e:	f7fc fdeb 	bl	8001608 <HAL_GetTick>
 8004a32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	88fa      	ldrh	r2, [r7, #6]
 8004a38:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	88fa      	ldrh	r2, [r7, #6]
 8004a3e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a48:	d108      	bne.n	8004a5c <HAL_UART_Transmit+0x6c>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d104      	bne.n	8004a5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a52:	2300      	movs	r3, #0
 8004a54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	61bb      	str	r3, [r7, #24]
 8004a5a:	e003      	b.n	8004a64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a64:	e02e      	b.n	8004ac4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	2180      	movs	r1, #128	@ 0x80
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 f848 	bl	8004b06 <UART_WaitOnFlagUntilTimeout>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e03a      	b.n	8004afe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10b      	bne.n	8004aa6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	3302      	adds	r3, #2
 8004aa2:	61bb      	str	r3, [r7, #24]
 8004aa4:	e007      	b.n	8004ab6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	781a      	ldrb	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1cb      	bne.n	8004a66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	2140      	movs	r1, #64	@ 0x40
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 f814 	bl	8004b06 <UART_WaitOnFlagUntilTimeout>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e006      	b.n	8004afe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004af8:	2300      	movs	r3, #0
 8004afa:	e000      	b.n	8004afe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004afc:	2302      	movs	r3, #2
  }
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3720      	adds	r7, #32
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b086      	sub	sp, #24
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	60f8      	str	r0, [r7, #12]
 8004b0e:	60b9      	str	r1, [r7, #8]
 8004b10:	603b      	str	r3, [r7, #0]
 8004b12:	4613      	mov	r3, r2
 8004b14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b16:	e03b      	b.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1e:	d037      	beq.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b20:	f7fc fd72 	bl	8001608 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	6a3a      	ldr	r2, [r7, #32]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d302      	bcc.n	8004b36 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e03a      	b.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d023      	beq.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b80      	cmp	r3, #128	@ 0x80
 8004b4c:	d020      	beq.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2b40      	cmp	r3, #64	@ 0x40
 8004b52:	d01d      	beq.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d116      	bne.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 f81d 	bl	8004bb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2208      	movs	r2, #8
 8004b82:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e00f      	b.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	bf0c      	ite	eq
 8004ba0:	2301      	moveq	r3, #1
 8004ba2:	2300      	movne	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	79fb      	ldrb	r3, [r7, #7]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d0b4      	beq.n	8004b18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b095      	sub	sp, #84	@ 0x54
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	330c      	adds	r3, #12
 8004bc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bca:	e853 3f00 	ldrex	r3, [r3]
 8004bce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	330c      	adds	r3, #12
 8004bde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004be0:	643a      	str	r2, [r7, #64]	@ 0x40
 8004be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004be6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004be8:	e841 2300 	strex	r3, r2, [r1]
 8004bec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1e5      	bne.n	8004bc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3314      	adds	r3, #20
 8004bfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	e853 3f00 	ldrex	r3, [r3]
 8004c02:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	f023 0301 	bic.w	r3, r3, #1
 8004c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3314      	adds	r3, #20
 8004c12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c1c:	e841 2300 	strex	r3, r2, [r1]
 8004c20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1e5      	bne.n	8004bf4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d119      	bne.n	8004c64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	330c      	adds	r3, #12
 8004c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	e853 3f00 	ldrex	r3, [r3]
 8004c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f023 0310 	bic.w	r3, r3, #16
 8004c46:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	330c      	adds	r3, #12
 8004c4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c50:	61ba      	str	r2, [r7, #24]
 8004c52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	6979      	ldr	r1, [r7, #20]
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	e841 2300 	strex	r3, r2, [r1]
 8004c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1e5      	bne.n	8004c30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004c72:	bf00      	nop
 8004c74:	3754      	adds	r7, #84	@ 0x54
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
	...

08004c80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c84:	b0c0      	sub	sp, #256	@ 0x100
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c9c:	68d9      	ldr	r1, [r3, #12]
 8004c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	ea40 0301 	orr.w	r3, r0, r1
 8004ca8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004cd8:	f021 010c 	bic.w	r1, r1, #12
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ce6:	430b      	orrs	r3, r1
 8004ce8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cfa:	6999      	ldr	r1, [r3, #24]
 8004cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	ea40 0301 	orr.w	r3, r0, r1
 8004d06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	4b8f      	ldr	r3, [pc, #572]	@ (8004f4c <UART_SetConfig+0x2cc>)
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d005      	beq.n	8004d20 <UART_SetConfig+0xa0>
 8004d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	4b8d      	ldr	r3, [pc, #564]	@ (8004f50 <UART_SetConfig+0x2d0>)
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d104      	bne.n	8004d2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d20:	f7ff f988 	bl	8004034 <HAL_RCC_GetPCLK2Freq>
 8004d24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004d28:	e003      	b.n	8004d32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d2a:	f7ff f96f 	bl	800400c <HAL_RCC_GetPCLK1Freq>
 8004d2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d3c:	f040 810c 	bne.w	8004f58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d44:	2200      	movs	r2, #0
 8004d46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d52:	4622      	mov	r2, r4
 8004d54:	462b      	mov	r3, r5
 8004d56:	1891      	adds	r1, r2, r2
 8004d58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d5a:	415b      	adcs	r3, r3
 8004d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d62:	4621      	mov	r1, r4
 8004d64:	eb12 0801 	adds.w	r8, r2, r1
 8004d68:	4629      	mov	r1, r5
 8004d6a:	eb43 0901 	adc.w	r9, r3, r1
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d82:	4690      	mov	r8, r2
 8004d84:	4699      	mov	r9, r3
 8004d86:	4623      	mov	r3, r4
 8004d88:	eb18 0303 	adds.w	r3, r8, r3
 8004d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d90:	462b      	mov	r3, r5
 8004d92:	eb49 0303 	adc.w	r3, r9, r3
 8004d96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004da6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004daa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004dae:	460b      	mov	r3, r1
 8004db0:	18db      	adds	r3, r3, r3
 8004db2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004db4:	4613      	mov	r3, r2
 8004db6:	eb42 0303 	adc.w	r3, r2, r3
 8004dba:	657b      	str	r3, [r7, #84]	@ 0x54
 8004dbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004dc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004dc4:	f7fb fa00 	bl	80001c8 <__aeabi_uldivmod>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4b61      	ldr	r3, [pc, #388]	@ (8004f54 <UART_SetConfig+0x2d4>)
 8004dce:	fba3 2302 	umull	r2, r3, r3, r2
 8004dd2:	095b      	lsrs	r3, r3, #5
 8004dd4:	011c      	lsls	r4, r3, #4
 8004dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004de0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004de4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004de8:	4642      	mov	r2, r8
 8004dea:	464b      	mov	r3, r9
 8004dec:	1891      	adds	r1, r2, r2
 8004dee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004df0:	415b      	adcs	r3, r3
 8004df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004df4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004df8:	4641      	mov	r1, r8
 8004dfa:	eb12 0a01 	adds.w	sl, r2, r1
 8004dfe:	4649      	mov	r1, r9
 8004e00:	eb43 0b01 	adc.w	fp, r3, r1
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	f04f 0300 	mov.w	r3, #0
 8004e0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e18:	4692      	mov	sl, r2
 8004e1a:	469b      	mov	fp, r3
 8004e1c:	4643      	mov	r3, r8
 8004e1e:	eb1a 0303 	adds.w	r3, sl, r3
 8004e22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e26:	464b      	mov	r3, r9
 8004e28:	eb4b 0303 	adc.w	r3, fp, r3
 8004e2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e44:	460b      	mov	r3, r1
 8004e46:	18db      	adds	r3, r3, r3
 8004e48:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	eb42 0303 	adc.w	r3, r2, r3
 8004e50:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e5a:	f7fb f9b5 	bl	80001c8 <__aeabi_uldivmod>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4611      	mov	r1, r2
 8004e64:	4b3b      	ldr	r3, [pc, #236]	@ (8004f54 <UART_SetConfig+0x2d4>)
 8004e66:	fba3 2301 	umull	r2, r3, r3, r1
 8004e6a:	095b      	lsrs	r3, r3, #5
 8004e6c:	2264      	movs	r2, #100	@ 0x64
 8004e6e:	fb02 f303 	mul.w	r3, r2, r3
 8004e72:	1acb      	subs	r3, r1, r3
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004e7a:	4b36      	ldr	r3, [pc, #216]	@ (8004f54 <UART_SetConfig+0x2d4>)
 8004e7c:	fba3 2302 	umull	r2, r3, r3, r2
 8004e80:	095b      	lsrs	r3, r3, #5
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004e88:	441c      	add	r4, r3
 8004e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e9c:	4642      	mov	r2, r8
 8004e9e:	464b      	mov	r3, r9
 8004ea0:	1891      	adds	r1, r2, r2
 8004ea2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ea4:	415b      	adcs	r3, r3
 8004ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ea8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004eac:	4641      	mov	r1, r8
 8004eae:	1851      	adds	r1, r2, r1
 8004eb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004eb2:	4649      	mov	r1, r9
 8004eb4:	414b      	adcs	r3, r1
 8004eb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ec4:	4659      	mov	r1, fp
 8004ec6:	00cb      	lsls	r3, r1, #3
 8004ec8:	4651      	mov	r1, sl
 8004eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ece:	4651      	mov	r1, sl
 8004ed0:	00ca      	lsls	r2, r1, #3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	4642      	mov	r2, r8
 8004eda:	189b      	adds	r3, r3, r2
 8004edc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ee0:	464b      	mov	r3, r9
 8004ee2:	460a      	mov	r2, r1
 8004ee4:	eb42 0303 	adc.w	r3, r2, r3
 8004ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ef8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004efc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f00:	460b      	mov	r3, r1
 8004f02:	18db      	adds	r3, r3, r3
 8004f04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f06:	4613      	mov	r3, r2
 8004f08:	eb42 0303 	adc.w	r3, r2, r3
 8004f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004f16:	f7fb f957 	bl	80001c8 <__aeabi_uldivmod>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f54 <UART_SetConfig+0x2d4>)
 8004f20:	fba3 1302 	umull	r1, r3, r3, r2
 8004f24:	095b      	lsrs	r3, r3, #5
 8004f26:	2164      	movs	r1, #100	@ 0x64
 8004f28:	fb01 f303 	mul.w	r3, r1, r3
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	3332      	adds	r3, #50	@ 0x32
 8004f32:	4a08      	ldr	r2, [pc, #32]	@ (8004f54 <UART_SetConfig+0x2d4>)
 8004f34:	fba2 2303 	umull	r2, r3, r2, r3
 8004f38:	095b      	lsrs	r3, r3, #5
 8004f3a:	f003 0207 	and.w	r2, r3, #7
 8004f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4422      	add	r2, r4
 8004f46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f48:	e106      	b.n	8005158 <UART_SetConfig+0x4d8>
 8004f4a:	bf00      	nop
 8004f4c:	40011000 	.word	0x40011000
 8004f50:	40011400 	.word	0x40011400
 8004f54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004f6a:	4642      	mov	r2, r8
 8004f6c:	464b      	mov	r3, r9
 8004f6e:	1891      	adds	r1, r2, r2
 8004f70:	6239      	str	r1, [r7, #32]
 8004f72:	415b      	adcs	r3, r3
 8004f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f7a:	4641      	mov	r1, r8
 8004f7c:	1854      	adds	r4, r2, r1
 8004f7e:	4649      	mov	r1, r9
 8004f80:	eb43 0501 	adc.w	r5, r3, r1
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	f04f 0300 	mov.w	r3, #0
 8004f8c:	00eb      	lsls	r3, r5, #3
 8004f8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f92:	00e2      	lsls	r2, r4, #3
 8004f94:	4614      	mov	r4, r2
 8004f96:	461d      	mov	r5, r3
 8004f98:	4643      	mov	r3, r8
 8004f9a:	18e3      	adds	r3, r4, r3
 8004f9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004fa0:	464b      	mov	r3, r9
 8004fa2:	eb45 0303 	adc.w	r3, r5, r3
 8004fa6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004fb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	008b      	lsls	r3, r1, #2
 8004fca:	4621      	mov	r1, r4
 8004fcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fd0:	4621      	mov	r1, r4
 8004fd2:	008a      	lsls	r2, r1, #2
 8004fd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004fd8:	f7fb f8f6 	bl	80001c8 <__aeabi_uldivmod>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4b60      	ldr	r3, [pc, #384]	@ (8005164 <UART_SetConfig+0x4e4>)
 8004fe2:	fba3 2302 	umull	r2, r3, r3, r2
 8004fe6:	095b      	lsrs	r3, r3, #5
 8004fe8:	011c      	lsls	r4, r3, #4
 8004fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ff4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ff8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ffc:	4642      	mov	r2, r8
 8004ffe:	464b      	mov	r3, r9
 8005000:	1891      	adds	r1, r2, r2
 8005002:	61b9      	str	r1, [r7, #24]
 8005004:	415b      	adcs	r3, r3
 8005006:	61fb      	str	r3, [r7, #28]
 8005008:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800500c:	4641      	mov	r1, r8
 800500e:	1851      	adds	r1, r2, r1
 8005010:	6139      	str	r1, [r7, #16]
 8005012:	4649      	mov	r1, r9
 8005014:	414b      	adcs	r3, r1
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005024:	4659      	mov	r1, fp
 8005026:	00cb      	lsls	r3, r1, #3
 8005028:	4651      	mov	r1, sl
 800502a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800502e:	4651      	mov	r1, sl
 8005030:	00ca      	lsls	r2, r1, #3
 8005032:	4610      	mov	r0, r2
 8005034:	4619      	mov	r1, r3
 8005036:	4603      	mov	r3, r0
 8005038:	4642      	mov	r2, r8
 800503a:	189b      	adds	r3, r3, r2
 800503c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005040:	464b      	mov	r3, r9
 8005042:	460a      	mov	r2, r1
 8005044:	eb42 0303 	adc.w	r3, r2, r3
 8005048:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005056:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	f04f 0300 	mov.w	r3, #0
 8005060:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005064:	4649      	mov	r1, r9
 8005066:	008b      	lsls	r3, r1, #2
 8005068:	4641      	mov	r1, r8
 800506a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800506e:	4641      	mov	r1, r8
 8005070:	008a      	lsls	r2, r1, #2
 8005072:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005076:	f7fb f8a7 	bl	80001c8 <__aeabi_uldivmod>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4611      	mov	r1, r2
 8005080:	4b38      	ldr	r3, [pc, #224]	@ (8005164 <UART_SetConfig+0x4e4>)
 8005082:	fba3 2301 	umull	r2, r3, r3, r1
 8005086:	095b      	lsrs	r3, r3, #5
 8005088:	2264      	movs	r2, #100	@ 0x64
 800508a:	fb02 f303 	mul.w	r3, r2, r3
 800508e:	1acb      	subs	r3, r1, r3
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	3332      	adds	r3, #50	@ 0x32
 8005094:	4a33      	ldr	r2, [pc, #204]	@ (8005164 <UART_SetConfig+0x4e4>)
 8005096:	fba2 2303 	umull	r2, r3, r2, r3
 800509a:	095b      	lsrs	r3, r3, #5
 800509c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050a0:	441c      	add	r4, r3
 80050a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050a6:	2200      	movs	r2, #0
 80050a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80050aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80050ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80050b0:	4642      	mov	r2, r8
 80050b2:	464b      	mov	r3, r9
 80050b4:	1891      	adds	r1, r2, r2
 80050b6:	60b9      	str	r1, [r7, #8]
 80050b8:	415b      	adcs	r3, r3
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050c0:	4641      	mov	r1, r8
 80050c2:	1851      	adds	r1, r2, r1
 80050c4:	6039      	str	r1, [r7, #0]
 80050c6:	4649      	mov	r1, r9
 80050c8:	414b      	adcs	r3, r1
 80050ca:	607b      	str	r3, [r7, #4]
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050d8:	4659      	mov	r1, fp
 80050da:	00cb      	lsls	r3, r1, #3
 80050dc:	4651      	mov	r1, sl
 80050de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050e2:	4651      	mov	r1, sl
 80050e4:	00ca      	lsls	r2, r1, #3
 80050e6:	4610      	mov	r0, r2
 80050e8:	4619      	mov	r1, r3
 80050ea:	4603      	mov	r3, r0
 80050ec:	4642      	mov	r2, r8
 80050ee:	189b      	adds	r3, r3, r2
 80050f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050f2:	464b      	mov	r3, r9
 80050f4:	460a      	mov	r2, r1
 80050f6:	eb42 0303 	adc.w	r3, r2, r3
 80050fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	663b      	str	r3, [r7, #96]	@ 0x60
 8005106:	667a      	str	r2, [r7, #100]	@ 0x64
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005114:	4649      	mov	r1, r9
 8005116:	008b      	lsls	r3, r1, #2
 8005118:	4641      	mov	r1, r8
 800511a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800511e:	4641      	mov	r1, r8
 8005120:	008a      	lsls	r2, r1, #2
 8005122:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005126:	f7fb f84f 	bl	80001c8 <__aeabi_uldivmod>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	4b0d      	ldr	r3, [pc, #52]	@ (8005164 <UART_SetConfig+0x4e4>)
 8005130:	fba3 1302 	umull	r1, r3, r3, r2
 8005134:	095b      	lsrs	r3, r3, #5
 8005136:	2164      	movs	r1, #100	@ 0x64
 8005138:	fb01 f303 	mul.w	r3, r1, r3
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	3332      	adds	r3, #50	@ 0x32
 8005142:	4a08      	ldr	r2, [pc, #32]	@ (8005164 <UART_SetConfig+0x4e4>)
 8005144:	fba2 2303 	umull	r2, r3, r2, r3
 8005148:	095b      	lsrs	r3, r3, #5
 800514a:	f003 020f 	and.w	r2, r3, #15
 800514e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4422      	add	r2, r4
 8005156:	609a      	str	r2, [r3, #8]
}
 8005158:	bf00      	nop
 800515a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800515e:	46bd      	mov	sp, r7
 8005160:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005164:	51eb851f 	.word	0x51eb851f

08005168 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f043 0201 	orr.w	r2, r3, #1
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f023 0201 	bic.w	r2, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	3301      	adds	r3, #1
 80051be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051c6:	d901      	bls.n	80051cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e01b      	b.n	8005204 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	daf2      	bge.n	80051ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	019b      	lsls	r3, r3, #6
 80051dc:	f043 0220 	orr.w	r2, r3, #32
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	3301      	adds	r3, #1
 80051e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051f0:	d901      	bls.n	80051f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e006      	b.n	8005204 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	f003 0320 	and.w	r3, r3, #32
 80051fe:	2b20      	cmp	r3, #32
 8005200:	d0f0      	beq.n	80051e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	3301      	adds	r3, #1
 8005220:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005228:	d901      	bls.n	800522e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e018      	b.n	8005260 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	daf2      	bge.n	800521c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2210      	movs	r2, #16
 800523e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	3301      	adds	r3, #1
 8005244:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800524c:	d901      	bls.n	8005252 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e006      	b.n	8005260 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f003 0310 	and.w	r3, r3, #16
 800525a:	2b10      	cmp	r3, #16
 800525c:	d0f0      	beq.n	8005240 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800526c:	b480      	push	{r7}
 800526e:	b08b      	sub	sp, #44	@ 0x2c
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	4613      	mov	r3, r2
 8005278:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005282:	88fb      	ldrh	r3, [r7, #6]
 8005284:	089b      	lsrs	r3, r3, #2
 8005286:	b29b      	uxth	r3, r3
 8005288:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800528a:	88fb      	ldrh	r3, [r7, #6]
 800528c:	f003 0303 	and.w	r3, r3, #3
 8005290:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005292:	2300      	movs	r3, #0
 8005294:	623b      	str	r3, [r7, #32]
 8005296:	e014      	b.n	80052c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80052a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a6:	3301      	adds	r3, #1
 80052a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ac:	3301      	adds	r3, #1
 80052ae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	3301      	adds	r3, #1
 80052b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b8:	3301      	adds	r3, #1
 80052ba:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	3301      	adds	r3, #1
 80052c0:	623b      	str	r3, [r7, #32]
 80052c2:	6a3a      	ldr	r2, [r7, #32]
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d3e6      	bcc.n	8005298 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80052ca:	8bfb      	ldrh	r3, [r7, #30]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01e      	beq.n	800530e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052da:	461a      	mov	r2, r3
 80052dc:	f107 0310 	add.w	r3, r7, #16
 80052e0:	6812      	ldr	r2, [r2, #0]
 80052e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	fa22 f303 	lsr.w	r3, r2, r3
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f4:	701a      	strb	r2, [r3, #0]
      i++;
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	3301      	adds	r3, #1
 80052fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80052fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fe:	3301      	adds	r3, #1
 8005300:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005302:	8bfb      	ldrh	r3, [r7, #30]
 8005304:	3b01      	subs	r3, #1
 8005306:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005308:	8bfb      	ldrh	r3, [r7, #30]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1ea      	bne.n	80052e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800530e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005310:	4618      	mov	r0, r3
 8005312:	372c      	adds	r7, #44	@ 0x2c
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4013      	ands	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005334:	68fb      	ldr	r3, [r7, #12]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005342:	b480      	push	{r7}
 8005344:	b085      	sub	sp, #20
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	460b      	mov	r3, r1
 800534c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005352:	78fb      	ldrb	r3, [r7, #3]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4413      	add	r3, r2
 800535a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005362:	78fb      	ldrb	r3, [r7, #3]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4413      	add	r3, r2
 800536a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	4013      	ands	r3, r2
 8005374:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005376:	68bb      	ldr	r3, [r7, #8]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	f003 0301 	and.w	r3, r3, #1
}
 8005394:	4618      	mov	r0, r3
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	460b      	mov	r3, r1
 80053aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80053be:	f023 0303 	bic.w	r3, r3, #3
 80053c2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	78fb      	ldrb	r3, [r7, #3]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	68f9      	ldr	r1, [r7, #12]
 80053d4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80053d8:	4313      	orrs	r3, r2
 80053da:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d107      	bne.n	80053f2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053e8:	461a      	mov	r2, r3
 80053ea:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80053ee:	6053      	str	r3, [r2, #4]
 80053f0:	e00c      	b.n	800540c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80053f2:	78fb      	ldrb	r3, [r7, #3]
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d107      	bne.n	8005408 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053fe:	461a      	mov	r2, r3
 8005400:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005404:	6053      	str	r3, [r2, #4]
 8005406:	e001      	b.n	800540c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e000      	b.n	800540e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800541a:	b480      	push	{r7}
 800541c:	b085      	sub	sp, #20
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	b29b      	uxth	r3, r3
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800543c:	b480      	push	{r7}
 800543e:	b089      	sub	sp, #36	@ 0x24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	4413      	add	r3, r2
 800545c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	0c9b      	lsrs	r3, r3, #18
 8005464:	f003 0303 	and.w	r3, r3, #3
 8005468:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	4413      	add	r3, r2
 8005472:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	0fdb      	lsrs	r3, r3, #31
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	4413      	add	r3, r2
 8005488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	0fdb      	lsrs	r3, r3, #31
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b20      	cmp	r3, #32
 80054a0:	d10d      	bne.n	80054be <USB_HC_Halt+0x82>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10a      	bne.n	80054be <USB_HC_Halt+0x82>
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d005      	beq.n	80054ba <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d002      	beq.n	80054ba <USB_HC_Halt+0x7e>
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	d101      	bne.n	80054be <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	e0d8      	b.n	8005670 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <USB_HC_Halt+0x8e>
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d173      	bne.n	80055b2 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	0151      	lsls	r1, r2, #5
 80054dc:	69fa      	ldr	r2, [r7, #28]
 80054de:	440a      	add	r2, r1
 80054e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80054e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054e8:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d14a      	bne.n	800558c <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d133      	bne.n	800556a <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	4413      	add	r3, r2
 800550a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	0151      	lsls	r1, r2, #5
 8005514:	69fa      	ldr	r2, [r7, #28]
 8005516:	440a      	add	r2, r1
 8005518:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800551c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005520:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	4413      	add	r3, r2
 800552a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	0151      	lsls	r1, r2, #5
 8005534:	69fa      	ldr	r2, [r7, #28]
 8005536:	440a      	add	r2, r1
 8005538:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800553c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005540:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	3301      	adds	r3, #1
 8005546:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800554e:	d82e      	bhi.n	80055ae <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	4413      	add	r3, r2
 8005558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005562:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005566:	d0ec      	beq.n	8005542 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005568:	e081      	b.n	800566e <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	4413      	add	r3, r2
 8005572:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	0151      	lsls	r1, r2, #5
 800557c:	69fa      	ldr	r2, [r7, #28]
 800557e:	440a      	add	r2, r1
 8005580:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005584:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005588:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800558a:	e070      	b.n	800566e <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	4413      	add	r3, r2
 8005594:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	0151      	lsls	r1, r2, #5
 800559e:	69fa      	ldr	r2, [r7, #28]
 80055a0:	440a      	add	r2, r1
 80055a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80055aa:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80055ac:	e05f      	b.n	800566e <USB_HC_Halt+0x232>
            break;
 80055ae:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80055b0:	e05d      	b.n	800566e <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	0151      	lsls	r1, r2, #5
 80055c4:	69fa      	ldr	r2, [r7, #28]
 80055c6:	440a      	add	r2, r1
 80055c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055d0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d133      	bne.n	800564a <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	0151      	lsls	r1, r2, #5
 80055f4:	69fa      	ldr	r2, [r7, #28]
 80055f6:	440a      	add	r2, r1
 80055f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005600:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	4413      	add	r3, r2
 800560a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	0151      	lsls	r1, r2, #5
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	440a      	add	r2, r1
 8005618:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800561c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005620:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	3301      	adds	r3, #1
 8005626:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800562e:	d81d      	bhi.n	800566c <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	4413      	add	r3, r2
 8005638:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005642:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005646:	d0ec      	beq.n	8005622 <USB_HC_Halt+0x1e6>
 8005648:	e011      	b.n	800566e <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	4413      	add	r3, r2
 8005652:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	0151      	lsls	r1, r2, #5
 800565c:	69fa      	ldr	r2, [r7, #28]
 800565e:	440a      	add	r2, r1
 8005660:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005664:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005668:	6013      	str	r3, [r2, #0]
 800566a:	e000      	b.n	800566e <USB_HC_Halt+0x232>
          break;
 800566c:	bf00      	nop
    }
  }

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3724      	adds	r7, #36	@ 0x24
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b088      	sub	sp, #32
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005684:	2300      	movs	r3, #0
 8005686:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff fd7a 	bl	800518a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005696:	2110      	movs	r1, #16
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7ff fd87 	bl	80051ac <USB_FlushTxFifo>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7ff fdb1 	bl	8005210 <USB_FlushRxFifo>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80056b8:	2300      	movs	r3, #0
 80056ba:	61bb      	str	r3, [r7, #24]
 80056bc:	e01f      	b.n	80056fe <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80056d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80056dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80056e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056f2:	461a      	mov	r2, r3
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	3301      	adds	r3, #1
 80056fc:	61bb      	str	r3, [r7, #24]
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	2b0f      	cmp	r3, #15
 8005702:	d9dc      	bls.n	80056be <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005704:	2300      	movs	r3, #0
 8005706:	61bb      	str	r3, [r7, #24]
 8005708:	e034      	b.n	8005774 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	4413      	add	r3, r2
 8005712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005720:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005728:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005730:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	4413      	add	r3, r2
 800573a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800573e:	461a      	mov	r2, r3
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	3301      	adds	r3, #1
 8005748:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005750:	d80c      	bhi.n	800576c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	4413      	add	r3, r2
 800575a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005764:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005768:	d0ec      	beq.n	8005744 <USB_StopHost+0xc8>
 800576a:	e000      	b.n	800576e <USB_StopHost+0xf2>
        break;
 800576c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	3301      	adds	r3, #1
 8005772:	61bb      	str	r3, [r7, #24]
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	2b0f      	cmp	r3, #15
 8005778:	d9c7      	bls.n	800570a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005780:	461a      	mov	r2, r3
 8005782:	f04f 33ff 	mov.w	r3, #4294967295
 8005786:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f04f 32ff 	mov.w	r2, #4294967295
 800578e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7ff fce9 	bl	8005168 <USB_EnableGlobalInt>

  return ret;
 8005796:	7ffb      	ldrb	r3, [r7, #31]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3720      	adds	r7, #32
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f804 	bl	80057c4 <USBH_HandleSof>
}
 80057bc:	bf00      	nop
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b0b      	cmp	r3, #11
 80057d4:	d10a      	bne.n	80057ec <USBH_HandleSof+0x28>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d005      	beq.n	80057ec <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	4798      	blx	r3
  }
}
 80057ec:	bf00      	nop
 80057ee:	3708      	adds	r7, #8
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8005804:	bf00      	nop
}
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8005828:	bf00      	nop
}
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b082      	sub	sp, #8
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f883 	bl	800598e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	791b      	ldrb	r3, [r3, #4]
 800588c:	4619      	mov	r1, r3
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f80b 	bl	80058aa <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	795b      	ldrb	r3, [r3, #5]
 8005898:	4619      	mov	r1, r3
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f805 	bl	80058aa <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	460b      	mov	r3, r1
 80058b4:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80058b6:	78fb      	ldrb	r3, [r7, #3]
 80058b8:	2b0f      	cmp	r3, #15
 80058ba:	d80d      	bhi.n	80058d8 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80058bc:	78fb      	ldrb	r3, [r7, #3]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	33e0      	adds	r3, #224	@ 0xe0
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	78fb      	ldrb	r3, [r7, #3]
 80058ca:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	33e0      	adds	r3, #224	@ 0xe0
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	440b      	add	r3, r1
 80058d6:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b082      	sub	sp, #8
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff ff53 	bl	80057a0 <USBH_LL_IncTimer>
}
 80058fa:	bf00      	nop
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b082      	sub	sp, #8
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff ff8f 	bl	8005834 <USBH_LL_Connect>
}
 8005916:	bf00      	nop
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff ff98 	bl	8005862 <USBH_LL_Disconnect>
}
 8005932:	bf00      	nop
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	460b      	mov	r3, r1
 8005944:	70fb      	strb	r3, [r7, #3]
 8005946:	4613      	mov	r3, r2
 8005948:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b082      	sub	sp, #8
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff ff45 	bl	80057f4 <USBH_LL_PortEnabled>
}
 800596a:	bf00      	nop
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b082      	sub	sp, #8
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff ff45 	bl	8005810 <USBH_LL_PortDisabled>
}
 8005986:	bf00      	nop
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b084      	sub	sp, #16
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7fc fa2a 	bl	8001dfe <HAL_HCD_Stop>
 80059aa:	4603      	mov	r3, r0
 80059ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 f807 	bl	80059c4 <USBH_Get_USB_Status>
 80059b6:	4603      	mov	r3, r0
 80059b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80059ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4603      	mov	r3, r0
 80059cc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80059d2:	79fb      	ldrb	r3, [r7, #7]
 80059d4:	2b03      	cmp	r3, #3
 80059d6:	d817      	bhi.n	8005a08 <USBH_Get_USB_Status+0x44>
 80059d8:	a201      	add	r2, pc, #4	@ (adr r2, 80059e0 <USBH_Get_USB_Status+0x1c>)
 80059da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059de:	bf00      	nop
 80059e0:	080059f1 	.word	0x080059f1
 80059e4:	080059f7 	.word	0x080059f7
 80059e8:	080059fd 	.word	0x080059fd
 80059ec:	08005a03 	.word	0x08005a03
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80059f0:	2300      	movs	r3, #0
 80059f2:	73fb      	strb	r3, [r7, #15]
    break;
 80059f4:	e00b      	b.n	8005a0e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80059f6:	2302      	movs	r3, #2
 80059f8:	73fb      	strb	r3, [r7, #15]
    break;
 80059fa:	e008      	b.n	8005a0e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80059fc:	2301      	movs	r3, #1
 80059fe:	73fb      	strb	r3, [r7, #15]
    break;
 8005a00:	e005      	b.n	8005a0e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8005a02:	2302      	movs	r3, #2
 8005a04:	73fb      	strb	r3, [r7, #15]
    break;
 8005a06:	e002      	b.n	8005a0e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8005a08:	2302      	movs	r3, #2
 8005a0a:	73fb      	strb	r3, [r7, #15]
    break;
 8005a0c:	bf00      	nop
  }
  return usb_status;
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <memset>:
 8005a1c:	4402      	add	r2, r0
 8005a1e:	4603      	mov	r3, r0
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d100      	bne.n	8005a26 <memset+0xa>
 8005a24:	4770      	bx	lr
 8005a26:	f803 1b01 	strb.w	r1, [r3], #1
 8005a2a:	e7f9      	b.n	8005a20 <memset+0x4>

08005a2c <__libc_init_array>:
 8005a2c:	b570      	push	{r4, r5, r6, lr}
 8005a2e:	4d0d      	ldr	r5, [pc, #52]	@ (8005a64 <__libc_init_array+0x38>)
 8005a30:	4c0d      	ldr	r4, [pc, #52]	@ (8005a68 <__libc_init_array+0x3c>)
 8005a32:	1b64      	subs	r4, r4, r5
 8005a34:	10a4      	asrs	r4, r4, #2
 8005a36:	2600      	movs	r6, #0
 8005a38:	42a6      	cmp	r6, r4
 8005a3a:	d109      	bne.n	8005a50 <__libc_init_array+0x24>
 8005a3c:	4d0b      	ldr	r5, [pc, #44]	@ (8005a6c <__libc_init_array+0x40>)
 8005a3e:	4c0c      	ldr	r4, [pc, #48]	@ (8005a70 <__libc_init_array+0x44>)
 8005a40:	f000 f818 	bl	8005a74 <_init>
 8005a44:	1b64      	subs	r4, r4, r5
 8005a46:	10a4      	asrs	r4, r4, #2
 8005a48:	2600      	movs	r6, #0
 8005a4a:	42a6      	cmp	r6, r4
 8005a4c:	d105      	bne.n	8005a5a <__libc_init_array+0x2e>
 8005a4e:	bd70      	pop	{r4, r5, r6, pc}
 8005a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a54:	4798      	blx	r3
 8005a56:	3601      	adds	r6, #1
 8005a58:	e7ee      	b.n	8005a38 <__libc_init_array+0xc>
 8005a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a5e:	4798      	blx	r3
 8005a60:	3601      	adds	r6, #1
 8005a62:	e7f2      	b.n	8005a4a <__libc_init_array+0x1e>
 8005a64:	08005acc 	.word	0x08005acc
 8005a68:	08005acc 	.word	0x08005acc
 8005a6c:	08005acc 	.word	0x08005acc
 8005a70:	08005ad0 	.word	0x08005ad0

08005a74 <_init>:
 8005a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a76:	bf00      	nop
 8005a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a7a:	bc08      	pop	{r3}
 8005a7c:	469e      	mov	lr, r3
 8005a7e:	4770      	bx	lr

08005a80 <_fini>:
 8005a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a82:	bf00      	nop
 8005a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a86:	bc08      	pop	{r3}
 8005a88:	469e      	mov	lr, r3
 8005a8a:	4770      	bx	lr
